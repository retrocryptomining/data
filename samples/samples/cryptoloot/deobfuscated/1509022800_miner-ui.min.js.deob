var _0xb2d9 = [
    'miner',
    'elements',
    'intervalUpdateStats',
    'intervalDrawGraph',
    'ctx',
    '2d',
    'getContext',
    'canvas',
    'click',
    'bind',
    'start',
    'addEventListener',
    'startButton',
    'stop',
    'stopButton',
    'addThread',
    'threadsAdd',
    'removeThread',
    'threadsRemove',
    'stats',
    'push',
    'didAcceptHash',
    'accepted',
    'on',
    'prototype',
    'preventDefault',
    'running',
    'add',
    'classList',
    'container',
    'stopped',
    'remove',
    'updateStats',
    'drawGraph',
    'textContent',
    'threads',
    'getNumThreads',
    'display',
    'style',
    'blkWarn',
    'block',
    'none',
    'hashesPerSecond',
    'setNumThreads',
    'max',
    'toFixed',
    'getHashesPerSecond',
    'hashesTotal',
    'getTotalHashes',
    'offsetWidth',
    'width',
    'height',
    'offsetHeight',
    'shift',
    'length',
    'hashes',
    'clearRect',
    'fillStyle',
    '#aaa',
    'fillRect',
    '#ccc'
];
var MinerUI = /* Called:undefined | Scope Closed:false| writes:true*/
function (_0x96e4x2, _0x96e4x3) {
    this.miner = _0x96e4x2, this.elements = _0x96e4x3, this.intervalUpdateStats = 0, this.intervalDrawGraph = 0, this.ctx = this.elements.canvas.getContext('2d'), this.elements.startButton.addEventListener('click', this.start.bind(this)), this.elements.stopButton.addEventListener('click', this.stop.bind(this)), this.elements.threadsAdd.addEventListener('click', this.addThread.bind(this)), this.elements.threadsRemove.addEventListener('click', this.removeThread.bind(this)), this.stats = [];
    for (var _0x96e4x4 = 0, _0x96e4x5 = 0; _0x96e4x5 < 300; _0x96e4x4++, _0x96e4x5 += 5) {
        this[_0xb2d9[19]][_0xb2d9[20]]({
            hashes: 0,
            accepted: 0
        });
    }
    ;
    this.didAcceptHash = false, this.miner && this.miner.on('accepted', /* Called:undefined | Scope Closed:false| writes:true*/
    function () {
        this.didAcceptHash = true;
    }.bind(this));
};
MinerUI.prototype.start = /* Called:undefined | Scope Closed:false| writes:true*/
function (_0x96e4x2) {
    {
        _0x96e4x2.preventDefault();
        return this.miner ? (this.miner.start(CryptoLoot.FORCE_MULTI_TAB), this.elements.container.classList.add('running'), this.elements.container.classList.remove('stopped'), this.intervalUpdateStats = setInterval(this.updateStats.bind(this), 50), this.intervalDrawGraph = setInterval(this.drawGraph.bind(this), 500), this.elements.threads.textContent = this.miner.getNumThreads(), false) : (this.elements.blkWarn.style.display = 'block', this.elements.startButton.style.display = 'none', false);
    }
}, MinerUI.prototype.stop = /* Called:undefined | Scope Closed:false| writes:true*/
function (_0x96e4x2) {
    {
        this.miner.stop();
        this.elements.hashesPerSecond.textContent = 0;
        this.elements.container.classList.remove('running');
        this.elements.container.classList.add('stopped');
        clearInterval(this.intervalUpdateStats);
        clearInterval(this.intervalDrawGraph);
        _0x96e4x2.preventDefault();
        return false;
    }
}, MinerUI.prototype.addThread = /* Called:undefined | Scope Closed:false| writes:true*/
function (_0x96e4x2) {
    {
        this.miner.setNumThreads(this.miner.getNumThreads() + 1);
        this.elements.threads.textContent = this.miner.getNumThreads();
        _0x96e4x2.preventDefault();
        return false;
    }
}, MinerUI.prototype.removeThread = /* Called:undefined | Scope Closed:false| writes:true*/
function (_0x96e4x2) {
    {
        this.miner.setNumThreads(Math.max(0, this.miner.getNumThreads() - 1));
        this.elements.threads.textContent = this.miner.getNumThreads();
        _0x96e4x2.preventDefault();
        return false;
    }
}, MinerUI.prototype.updateStats = /* Called:undefined | Scope Closed:false| writes:true*/
function () {
    this.elements.hashesPerSecond.textContent = this.miner.getHashesPerSecond().toFixed(1), this.elements.hashesTotal.textContent = this.miner.getTotalHashes(true);
}, MinerUI.prototype.drawGraph = /* Called:undefined | Scope Closed:false| writes:true*/
function () {
    this.elements.canvas.offsetWidth !== this.elements.canvas.width && (this.elements.canvas.width = this.elements.canvas.offsetWidth, this.elements.canvas.height = this.elements.canvas.offsetHeight);
    var _0x96e4x2 = this.elements.canvas.width, _0x96e4x3 = this.elements.canvas.height, _0x96e4x4 = this.stats.shift();
    this.stats[this.stats.length - 1];
    _0x96e4x4.hashes = this.miner.getHashesPerSecond(), _0x96e4x4.accepted = this.didAcceptHash, this.didAcceptHash = false, this.stats.push(_0x96e4x4);
    for (var _0x96e4x5 = 0, _0x96e4x6 = 0; _0x96e4x6 < this[_0xb2d9[19]][_0xb2d9[54]]; _0x96e4x6++) {
        var _0x96e4x7 = this[_0xb2d9[19]][_0x96e4x6][_0xb2d9[55]];
        _0x96e4x7 > _0x96e4x5 && (_0x96e4x5 = _0x96e4x7);
    }
    ;
    this.ctx.clearRect(0, 0, _0x96e4x2, _0x96e4x3);
    for (var _0x96e4x6 = this[_0xb2d9[19]][_0xb2d9[54]], _0x96e4x8 = 1; _0x96e4x6--; _0x96e4x8++) {
        var _0x96e4x9 = this[_0xb2d9[19]][_0x96e4x6], _0x96e4xa = _0x96e4x9[_0xb2d9[55]] / _0x96e4x5 * (_0x96e4x3 - 16) | 0;
        _0x96e4x9[_0xb2d9[22]] ? (this[_0xb2d9[4]][_0xb2d9[57]] = _0xb2d9[58], this[_0xb2d9[4]][_0xb2d9[59]](_0x96e4x2 - 10 * _0x96e4x8, _0x96e4x3 - _0x96e4xa, 9, _0x96e4xa)) : (this[_0xb2d9[4]][_0xb2d9[57]] = _0xb2d9[60], this[_0xb2d9[4]][_0xb2d9[59]](_0x96e4x2 - 10 * _0x96e4x8, _0x96e4x3 - _0x96e4xa, 9, _0x96e4xa));
    }
};
