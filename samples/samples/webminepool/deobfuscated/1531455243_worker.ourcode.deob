importScripts('cn.js');
var cn = Module.cwrap('hash_cn', 'string', [
    'string',
    'string',
    'number',
    'number'
]);
function zeroPad(num, places)
    /*Scope Closed:false | writes:false*/
    {
        var zero = places - num.toString().length + 1;
        return Array(+(zero > 0 && zero)).join('0') + num;
    }
function hex2int(s)
    /*Scope Closed:false | writes:false*/
    {
        return parseInt(s.match(/[a-fA-F0-9]{2}/g).reverse().join(''), 16);
    }
function int2hex(i)
    /*Scope Closed:false | writes:false*/
    {
        return zeroPad(i.toString(16), 8).match(/[a-fA-F0-9]{2}/g).reverse().join('');
    }
function getRandomInt(min, max)
    /*Scope Closed:true*/
    {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
onmessage = /* Called:undefined | Scope Closed:false| writes:false*/
function (e) {
    var jbthrt = e.data;
    var job = jbthrt.job;
    var thrt = jbthrt.throttle;
    var bsuccess = false;
    var hash = '';
    var hexnonce = 0;
    var calcHash = /* Called:undefined | Scope Closed:false| writes:true*/
    function () {
        if (job !== null) {
            var target = parseInt(s.match(/[a-fA-F0-9]{2}/g).reverse().join(''), 16);
            var inonce = Math.floor(Math.random() * (4294967295 - min + 1)) + 0;
            hexnonce = zeroPad(i.toString(16), 8).match(/[a-fA-F0-9]{2}/g).reverse().join('');
            try {
                if (job.algo === 'cn')
                    hash = cn(job.blob, hexnonce, 0, job.variant);
                else if (job.algo === 'cn-lite')
                    hash = cn(job.blob, hexnonce, 1, job.variant);
                else
                    throw 'algorithm not supported!';
                var hashval = parseInt(s.match(/[a-fA-F0-9]{2}/g).reverse().join(''), 16);
                bsuccess = hashval < target;
            } 
        }
    };
    var submit = /* Called:undefined | Scope Closed:false| writes:false*/
    function () {
        if (bsuccess) {
            var msg = {
                identifier: 'solved',
                job_id: job.job_id,
                nonce: hexnonce,
                result: hash
            };
            postMessage(JSON.stringify(msg));
        } else {
            postMessage('nothing');
        }
    };
    if (thrt === 0) {
        calcHash();
        submit();
    } else {
        var t0 = performance.now();
        calcHash();
        var dt = performance.now() - t0;
        var sleept = Math.round(thrt / (100 - thrt + 10) * dt);
        setTimeout(submit, sleept);
    }
};

